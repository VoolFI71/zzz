"""–û–ø–ª–∞—Ç–∞ —á–µ—Ä–µ–∑ Telegram Stars."""

from __future__ import annotations

import asyncio
import os
import time
import logging
from aiogram import Bot, F, Router
from aiogram.fsm.context import FSMContext
from aiogram.types import CallbackQuery, LabeledPrice, Message, PreCheckoutQuery, InlineKeyboardMarkup, InlineKeyboardButton
from database import db
from utils import check_available_configs

logger = logging.getLogger(__name__)

stars_router = Router()


@stars_router.callback_query(F.data == "pay_star")
async def pay_with_stars(callback_query: CallbackQuery, state: FSMContext, bot: Bot) -> None:
    tg_id = callback_query.from_user.id

    user_data = await state.get_data()
    # –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ 1 –∏–ª–∏ 3 –º–µ—Å—è—Ü–∞
    days = int(user_data.get("selected_days", 31))
    # –ú–∞–ø–ø–∏–Ω–≥ payload –ø–æ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ (31 ‚Üí 1–º, –≤—Å—ë –æ—Å—Ç–∞–ª—å–Ω–æ–µ ‚Üí 3–º)
    payload = "sub_1m" if days == 31 else "sub_3m"

    # –ê–Ω—Ç–∏-—Å–ø–∞–º –∏ –æ–¥–∏–Ω –∞–∫—Ç–∏–≤–Ω—ã–π —Å—á—ë—Ç –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    now_ts = int(time.time())
    last_click_ts = user_data.get("last_buy_click_ts")
    if last_click_ts and (now_ts - int(last_click_ts) < 3):
        await callback_query.answer("–ü–æ–¥–æ–∂–¥–∏—Ç–µ –ø–∞—Ä—É —Å–µ–∫—É–Ω–¥‚Ä¶", show_alert=False)
        return
    await state.update_data(last_buy_click_ts=now_ts)

    existing_invoice_id = user_data.get("invoice_msg_id")
    if existing_invoice_id:
        await callback_query.answer("–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –Ω–µ–æ–ø–ª–∞—á–µ–Ω–Ω—ã–π —Å—á—ë—Ç –≤—ã—à–µ ‚¨ÜÔ∏è", show_alert=True)
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —É–∂–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –∫–æ–Ω—Ñ–∏–≥–∏
    existing_configs = await db.get_codes_by_tg_id(tg_id)
    
    if existing_configs:
        # –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å—Ç—å –∫–æ–Ω—Ñ–∏–≥–∏ - –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –ø—Ä–æ–¥–ª–µ–Ω–∏–µ
        await callback_query.message.edit_text(
            "–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞! –í—ã —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ–¥–ª–∏—Ç—å –µ—ë?",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚úÖ –ü—Ä–æ–¥–ª–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="extend_subscription")],
                [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_payment")]
            ])
        )
        await callback_query.answer()
        return
    
    # –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –∫–æ–Ω—Ñ–∏–≥–æ–≤ - —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–µ –Ω–∞ –≤—Å–µ—Ö —Å–µ—Ä–≤–µ—Ä–∞—Ö
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤—Å–µ —Å–µ—Ä–≤–µ—Ä—ã –∏–∑ SERVER_ORDER (–∫–∞–∫ –ø—Ä–∏ –ø–æ–∫—É–ø–∫–µ –ø–æ–¥–ø–∏—Å–∫–∏)
    env_order = os.getenv("SERVER_ORDER", "fi")
    servers_to_use = [s.strip().lower() for s in env_order.split(',') if s.strip()]
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–ø–∏—Å–æ–∫ —Å–µ—Ä–≤–µ—Ä–æ–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
    await state.update_data(servers_to_use=servers_to_use)

    provider_token = ""

    try:
        await bot.delete_message(chat_id=tg_id, message_id=callback_query.message.message_id)
    except Exception:
        pass

    # –°–æ–∑–¥–∞—ë–º —Å—á—ë—Ç
    if payload == "sub_1m":
        invoice_msg = await bot.send_invoice(
            chat_id=tg_id,
            title="–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ 1 –º–µ—Å—è—Ü",
            description="–î–æ—Å—Ç—É–ø –∫ GLS VPN –Ω–∞ 1 –º–µ—Å—è—Ü",
            payload=payload,
            provider_token=provider_token,
            currency="XTR",
            prices=[LabeledPrice(label="XTR", amount=int(os.getenv("PRICE_1M_STAR", "149")))],
            max_tip_amount=0,
        )
    else:
        invoice_msg = await bot.send_invoice(
            chat_id=tg_id,
            title="–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ 3 –º–µ—Å—è—Ü–∞",
            description="GLS VPN –¥–æ—Å—Ç—É–ø –Ω–∞ 3 –º–µ—Å—è—Ü–∞",
            payload=payload,
            provider_token=provider_token,
            currency="XTR",
            prices=[LabeledPrice(label="XTR", amount=int(os.getenv("PRICE_3M_STAR", "349")))],
            max_tip_amount=0,
        )

    try:
        await state.update_data(invoice_msg_id=invoice_msg.message_id, invoice_created_ts=now_ts)
    except Exception:
        pass

    # –ê–≤—Ç–æ-–∏—Å—Ç–µ—á–µ–Ω–∏–µ (4 –º–∏–Ω—É—Ç—ã)
    async def _expire_invoice() -> None:
        try:
            await asyncio.sleep(4 * 60)
            data_state = await state.get_data()
            current_invoice_id = data_state.get("invoice_msg_id")
            if current_invoice_id == invoice_msg.message_id:
                try:
                    await bot.delete_message(chat_id=tg_id, message_id=invoice_msg.message_id)
                except Exception:
                    pass
                try:
                    await state.update_data(invoice_msg_id=None)
                except Exception:
                    pass
                try:
                    await bot.send_message(tg_id, "–°—á—ë—Ç –∏—Å—Ç—ë–∫. –ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ, —Å–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—ã–π.")
                except Exception:
                    pass
        except Exception:
            pass

    asyncio.create_task(_expire_invoice())
    await callback_query.answer("–°–æ–∑–¥–∞—ë–º —Å—á—ë—Ç –¥–ª—è –æ–ø–ª–∞—Ç—ã...")

    # –û—Ç–¥–µ–ª—å–Ω–æ–µ —Å–µ—Ä–≤–∏—Å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å—á—ë—Ç–æ–º
    try:
        control_kb = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å —Å—á—ë—Ç", callback_data="cancel_star_invoice")],
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back")]
        ])
        control_msg = await bot.send_message(
            chat_id=tg_id,
            text="–î–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å—á—ë—Ç–æ–º –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ:",
            reply_markup=control_kb,
        )
        try:
            await state.update_data(invoice_ctrl_msg_id=control_msg.message_id)
        except Exception:
            pass
    except Exception:
        pass


@stars_router.pre_checkout_query(lambda _: True)
async def pre_checkout_query_handler(pre_checkout_query: PreCheckoutQuery, bot: Bot) -> None:
    await bot.answer_pre_checkout_query(pre_checkout_query.id, ok=True)


@stars_router.message(F.successful_payment)
async def successful_payment_handler(message: Message, bot: Bot, state: FSMContext) -> None:
    from utils import get_session
    tg_id = message.from_user.id
    payload = message.successful_payment.invoice_payload
    payload_to_days = {"sub_1m": 31, "sub_3m": 93}
    days = payload_to_days.get(payload, 31)
    user_data = await state.get_data()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —É–∂–µ –∫–æ–Ω—Ñ–∏–≥–∏
    existing_configs = await db.get_codes_by_tg_id(tg_id)
    
    if existing_configs:
        # –ü—Ä–æ–¥–ª–µ–≤–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∫–æ–Ω—Ñ–∏–≥–∏
        await extend_existing_configs(tg_id, days, bot)
    else:
        # –í—ã–¥–∞–µ–º –∫–æ–Ω—Ñ–∏–≥–∏ –Ω–∞ –≤—Å–µ—Ö —Å–µ—Ä–≤–µ—Ä–∞—Ö
        servers_to_use = user_data.get("servers_to_use", ["fi"])
        await give_configs_on_all_servers(tg_id, days, servers_to_use, bot)
    
    # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –ø–ª–∞—Ç–µ–∂ –≤ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    amount = message.successful_payment.total_amount
    await db.mark_payment(tg_id, days)
    await db.add_star_payment(amount)
    
    # –ù–∞—á–∏—Å–ª—è–µ–º –±–æ–Ω—É—Å —Ä–µ—Ñ–µ—Ä–∞–ª—É
    inviter_tg_id = await db.get_referrer_id(str(tg_id))
    if inviter_tg_id:
        try:
            # –ù–∞—á–∏—Å–ª—è–µ–º –±–æ–Ω—É—Å–Ω—ã–µ –¥–Ω–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 2 –¥–Ω—è)
            BONUS_DAYS = int(days//10)
            await db.add_balance_days(str(inviter_tg_id), BONUS_DAYS)
            try:
                await bot.send_message(int(inviter_tg_id),
                                    f"–í–∞—à —Ä–µ—Ñ–µ—Ä–∞–ª –æ–ø–ª–∞—Ç–∏–ª –ø–æ–¥–ø–∏—Å–∫—É ‚Äî –≤–∞–º –Ω–∞—á–∏—Å–ª–µ–Ω–æ {BONUS_DAYS} –¥–Ω—è(–µ–π) –±–æ–Ω—É—Å–∞. –í—ã –º–æ–∂–µ—Ç–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –∏—Ö –≤ –ª–∏—á–Ω–æ–º –∫–∞–±–∏–Ω–µ—Ç–µ. –ü—Ä–∏ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –¥–Ω–∏ –Ω–µ —Å—É–º–º–∏—Ä—É—é—Ç—Å—è —Å —Ç–µ–∫—É—â–∏–º –∫–æ–Ω—Ñ–∏–≥–æ–º –≤ –ø–æ–¥–ø–∏—Å–∫–µ.")
            except Exception:
                pass
        except Exception as exc:
            logger.error("–û—à–∏–±–∫–∞ –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è –±–æ–Ω—É—Å–∞ –ø—Ä–∏–≥–ª–∞—Å–∏—Ç–µ–ª—é %s: %s", inviter_tg_id, exc)
    
    # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∞
    try:
        admin_id = 746560409
        if admin_id:
            at_username = (f"@{message.from_user.username}" if getattr(message.from_user, "username", None) else "‚Äî")
            await bot.send_message(admin_id, f"–û–ø–ª–∞—á–µ–Ω–∞ –ø–æ–¥–ø–∏—Å–∫–∞ —á–µ—Ä–µ–∑ Stars: user_id={tg_id}, user={at_username}, —Å—Ä–æ–∫={days} –¥–Ω.")
    except Exception:
        pass

    # –û—á–∏—Å—Ç–∫–∞ –∏–Ω–≤–æ–π—Å–∞
    try:
        data_state = await state.get_data()
        invoice_msg_id = data_state.get("invoice_msg_id")
        if invoice_msg_id:
            await bot.delete_message(chat_id=tg_id, message_id=invoice_msg_id)
            await state.update_data(invoice_msg_id=None)
        ctrl_msg_id = data_state.get("invoice_ctrl_msg_id")
        if ctrl_msg_id:
            try:
                await bot.delete_message(chat_id=tg_id, message_id=ctrl_msg_id)
            except Exception:
                pass
            try:
                await state.update_data(invoice_ctrl_msg_id=None)
            except Exception:
                pass
    except Exception:
        pass

    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –ø–æ–º–µ—Ç–∫–∏ –ø–æ —Ç–µ—Å—Ç–æ–≤—ã–º —Ç–∞—Ä–∏—Ñ–∞–º –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è


@stars_router.callback_query(F.data == "extend_subscription")
async def extend_subscription_handler(callback_query: CallbackQuery, state: FSMContext, bot: Bot) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–æ–¥–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏."""
    tg_id = callback_query.from_user.id
    user_data = await state.get_data()
    days = int(user_data.get("selected_days", 31))
    
    # –°–æ–∑–¥–∞–µ–º –∏–Ω–≤–æ–π—Å –¥–ª—è –ø—Ä–æ–¥–ª–µ–Ω–∏—è
    payload = "sub_1m" if days == 31 else "sub_3m"
    star_1m = int(os.getenv("PRICE_1M_STAR", "149"))
    star_3m = int(os.getenv("PRICE_3M_STAR", "349"))
    amount = star_1m if days == 31 else star_3m
    
    try:
        await bot.send_invoice(
            chat_id=tg_id,
            title=f"–ü—Ä–æ–¥–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏ GLS VPN ‚Äî {days} –¥–Ω.",
            description=f"–ü—Ä–æ–¥–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ {days} –¥–Ω–µ–π",
            payload=payload,
            provider_token="",
            currency="XTR",  # Telegram Stars
            prices=[LabeledPrice(label=f"{days} –¥–Ω.", amount=amount)],
        )
        await callback_query.answer("–°—á—ë—Ç –¥–ª—è –ø—Ä–æ–¥–ª–µ–Ω–∏—è —Å–æ–∑–¥–∞–Ω!")
    except Exception as e:
        logger.error(f"Failed to create extend invoice: {e}")
        await callback_query.answer("–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å—á—ë—Ç–∞", show_alert=True)


@stars_router.callback_query(F.data == "cancel_payment")
async def cancel_payment_handler(callback_query: CallbackQuery, state: FSMContext, bot: Bot) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–º–µ–Ω—ã –æ–ø–ª–∞—Ç—ã."""
    await callback_query.message.edit_text("–û–ø–ª–∞—Ç–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.")
    await callback_query.answer()


@stars_router.callback_query(F.data == "cancel_star_invoice")
async def cancel_star_invoice(callback_query: CallbackQuery, state: FSMContext, bot: Bot) -> None:
    tg_id = callback_query.from_user.id
    try:
        data_state = await state.get_data()
        invoice_msg_id = data_state.get("invoice_msg_id")
        if invoice_msg_id:
            try:
                await bot.delete_message(chat_id=tg_id, message_id=invoice_msg_id)
            except Exception:
                pass
            await state.update_data(invoice_msg_id=None)
        ctrl_msg_id = data_state.get("invoice_ctrl_msg_id")
        if ctrl_msg_id:
            try:
                await bot.delete_message(chat_id=tg_id, message_id=ctrl_msg_id)
            except Exception:
                pass
            await state.update_data(invoice_ctrl_msg_id=None)
    except Exception:
        pass
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –≤—ã–±–æ—Ä—É —Å–ø–æ—Å–æ–±–∞ –æ–ø–ª–∞—Ç—ã
    try:
        days = int((await state.get_data()).get("selected_days", 31))
        star_1m = int(os.getenv("PRICE_1M_STAR", "149"))
        star_3m = int(os.getenv("PRICE_3M_STAR", "349"))
        rub_1m = int(os.getenv("PRICE_1M_RUB", "149"))
        rub_3m = int(os.getenv("PRICE_3M_RUB", "349"))

        if days == 31:
            star_amount, rub_amount = star_1m, rub_1m
        else:
            star_amount, rub_amount = star_3m, rub_3m
        from keyboards.keyboard import create_payment_method_keyboard
        await bot.send_message(
            tg_id,
            f"–í—ã–±—Ä–∞–Ω —Ç–∞—Ä–∏—Ñ: {days} –¥–Ω. –í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:",
            reply_markup=create_payment_method_keyboard(star_amount, rub_amount),
        )
    except Exception:
        pass
    await callback_query.answer("–°—á—ë—Ç –æ—Ç–º–µ–Ω—ë–Ω")


async def give_configs_on_all_servers(tg_id: int, days: int, servers: list, bot: Bot) -> None:
    """–í—ã–¥–∞–µ—Ç –∫–æ–Ω—Ñ–∏–≥–∏ –Ω–∞ –≤—Å–µ—Ö —É–∫–∞–∑–∞–Ω–Ω—ã—Ö —Å–µ—Ä–≤–µ—Ä–∞—Ö –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    from utils import get_session
    import aiohttp
    
    AUTH_CODE = os.getenv("AUTH_CODE")
    urlupdate = "http://fastapi:8080/giveconfig"
    session = await get_session()
    
    success_count = 0
    failed_servers = []
    
    for server in servers:
        try:
            data = {"time": days, "id": str(tg_id), "server": server}
            async with session.post(urlupdate, json=data, headers={"X-API-Key": AUTH_CODE}) as resp:
                if resp.status == 200:
                    success_count += 1
                else:
                    failed_servers.append(server)
        except Exception as e:
            logger.error(f"Failed to create config on server {server}: {e}")
            failed_servers.append(server)
    
    # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ
    if success_count > 0:
        try:
            sub_key = await db.get_or_create_sub_key(str(tg_id))
            base = os.getenv("PUBLIC_BASE_URL", "https://swaga.space").rstrip('/')
            sub_url = f"{base}/subscription/{sub_key}"
            await bot.send_message(tg_id, f"‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞!\n\n–í–∞—à–∞ —Å—Å—ã–ª–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏: {sub_url}")
        except Exception:
            await bot.send_message(tg_id, f"‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞!")
    
    if failed_servers:
        await bot.send_message(tg_id, f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∫–æ–Ω—Ñ–∏–≥–∏ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–∞—Ö: {', '.join(failed_servers)}")


async def extend_existing_configs(tg_id: int, days: int, bot: Bot) -> None:
    """–ü—Ä–æ–¥–ª–µ–≤–∞–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∫–æ–Ω—Ñ–∏–≥–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    from utils import get_session
    import aiohttp
    
    AUTH_CODE = os.getenv("AUTH_CODE")
    urlextend = "http://fastapi:8080/extendconfig"
    session = await get_session()
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∫–æ–Ω—Ñ–∏–≥–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    existing_configs = await db.get_codes_by_tg_id(tg_id)
    success_count = 0
    failed_configs = []
    
    for user_code, time_end, server in existing_configs:
        try:
            data = {"time": days, "uid": user_code, "server": server}
            async with session.post(urlextend, json=data, headers={"X-API-Key": AUTH_CODE}) as resp:
                if resp.status == 200:
                    success_count += 1
                else:
                    failed_configs.append(user_code)
        except Exception as e:
            logger.error(f"Failed to extend config {user_code}: {e}")
            failed_configs.append(user_code)
    
    # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ
    if success_count > 0:
        await bot.send_message(tg_id, f"‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –ø—Ä–æ–¥–ª–µ–Ω–∞ –Ω–∞ {success_count} –∫–æ–Ω—Ñ–∏–≥–∞—Ö!")
    
    if failed_configs:
        await bot.send_message(tg_id, f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–¥–ª–∏—Ç—å {len(failed_configs)} –∫–æ–Ω—Ñ–∏–≥–æ–≤")


