"""–û–±—â–∏–µ callback-–æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ (–≤—ã–±–æ—Ä —Ç–∞—Ä–∏—Ñ–∞, —Å–µ—Ä–≤–µ—Ä–∞, –Ω–∞–≤–∏–≥–∞—Ü–∏—è)."""

from __future__ import annotations

import os
from aiogram import Bot, F, Router
from aiogram.fsm.context import FSMContext
from aiogram.types import CallbackQuery

from keyboards import keyboard
from keyboards.keyboard import (
    create_keyboard,
    create_payment_method_keyboard,
)
from database import db
from utils import get_session
from utils import pick_first_available_server
import aiohttp

common_router = Router()


@common_router.callback_query(F.data.in_({"plan_1m", "plan_3m"}))
async def select_plan(callback_query: CallbackQuery, state: FSMContext) -> None:
    if callback_query.data == "plan_1m":
        days = 31
    else:
        days = 93
    await state.update_data(selected_days=days)

    # –¶–µ–Ω—ã –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –º–µ—Ç–æ–¥–æ–≤ –æ–ø–ª–∞—Ç—ã
    star_1m = int(os.getenv("PRICE_1M_STAR", "149"))
    star_3m = int(os.getenv("PRICE_3M_STAR", "349"))
    rub_1m = int(os.getenv("PRICE_1M_RUB", "149"))
    rub_3m = int(os.getenv("PRICE_3M_RUB", "349"))


    if days == 31:
        star_amount, rub_amount = star_1m, rub_1m
    else:
        star_amount, rub_amount = star_3m, rub_3m

    await callback_query.message.edit_text(
        text=f"–í—ã–±—Ä–∞–Ω —Ç–∞—Ä–∏—Ñ: {days} –¥–Ω. –í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:",
        reply_markup=create_payment_method_keyboard(star_amount, rub_amount),
    )
    await callback_query.answer()


@common_router.callback_query(F.data.startswith("server_"))
async def select_server(callback_query: CallbackQuery, state: FSMContext) -> None:
    # Accept any callback in the form "server_<code>" and persist the code
    data = callback_query.data or ""
    server_code = data.split("_", 1)[1].lower() if "_" in data else ""
    if server_code:
        await state.update_data(server=server_code)
    await callback_query.message.edit_text(
        text="–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∞—Ä–∏—Ñ:",
        reply_markup=keyboard.create_tariff_keyboard(),
    )


@common_router.callback_query(F.data == "back")
async def go_back(callback_query: CallbackQuery, bot: Bot, state: FSMContext) -> None:
    tg_id = callback_query.from_user.id
    current_text = (callback_query.message.text or "").lower()

    # –ï—Å–ª–∏ –Ω–∞ —ç–∫—Ä–∞–Ω–µ –≤—ã–±–æ—Ä —Å–ø–æ—Å–æ–±–∞ –æ–ø–ª–∞—Ç—ã ‚Äî –≤–µ—Ä–Ω—ë–º—Å—è –∫ –≤—ã–±–æ—Ä—É —Ç–∞—Ä–∏—Ñ–∞
    if "–≤—ã–±—Ä–∞–Ω —Ç–∞—Ä–∏—Ñ" in current_text and ("–æ–ø–ª–∞—Ç" in current_text or "‚≠ê" in current_text or "‚ÇΩ" in current_text):
        try:
            await callback_query.message.edit_text(
                text="–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∞—Ä–∏—Ñ:",
                reply_markup=keyboard.create_tariff_keyboard(),
            )
        except Exception:
            await bot.send_message(
                chat_id=tg_id,
                text="–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∞—Ä–∏—Ñ:",
                reply_markup=keyboard.create_tariff_keyboard(),
            )
        await callback_query.answer()
        return

    # –ï—Å–ª–∏ –æ—Ç–∫—Ä—ã—Ç —ç–∫—Ä–∞–Ω —Å —Ä–µ–∞–ª—å–Ω—ã–º —Å—á—ë—Ç–æ–º/–æ–ø–ª–∞—Ç–æ–π ‚Äî –≤–µ—Ä–Ω—ë–º—Å—è –∫ –≤—ã–±–æ—Ä—É —Å–ø–æ—Å–æ–±–∞ –æ–ø–ª–∞—Ç—ã
    # –í–∞–∂–Ω–æ: –æ–ø–∏—Ä–∞–µ–º—Å—è –Ω–∞ —Ç–µ–∫—É—â–∏–π —Ç–µ–∫—Å—Ç, —á—Ç–æ–±—ã –Ω–µ –∑–∞—Å—Ç—Ä–µ–≤–∞—Ç—å –∏–∑‚Äë–∑–∞ —Å—Ç–∞—Ä—ã—Ö state-–∑–Ω–∞—á–µ–Ω–∏–π
    if any(word in current_text for word in ["—Å—á–µ—Ç", "—Å—á—ë—Ç", "–æ–ø–ª–∞—Ç", "invoice", "—É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å—á—ë—Ç–æ–º"]):
        try:
            user_state = await state.get_data()
        except Exception:
            user_state = {}
        days = int(user_state.get("selected_days", 31))
        star_1m = int(os.getenv("PRICE_1M_STAR", "149"))
        star_3m = int(os.getenv("PRICE_3M_STAR", "349"))
        rub_1m = int(os.getenv("PRICE_1M_RUB", "149"))
        rub_3m = int(os.getenv("PRICE_3M_RUB", "349"))


        if days == 31:
            star_amount, rub_amount = star_1m, rub_1m
        else:
            star_amount, rub_amount = star_3m, rub_3m

        try:
            await callback_query.message.edit_text(
                text=f"–í—ã–±—Ä–∞–Ω —Ç–∞—Ä–∏—Ñ: {days} –¥–Ω. –í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:",
                reply_markup=create_payment_method_keyboard(star_amount, rub_amount),
            )
        except Exception:
            await bot.send_message(
                chat_id=tg_id,
                text=f"–í—ã–±—Ä–∞–Ω —Ç–∞—Ä–∏—Ñ: {days} –¥–Ω. –í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:",
                reply_markup=create_payment_method_keyboard(star_amount, rub_amount),
            )
        await callback_query.answer()
        return

    if "—Ç–∞—Ä–∏—Ñ" in current_text:
        text = (
            "–í—ã –æ—Ñ–æ—Ä–º–ª—è–µ—Ç–µ –¥–æ—Å—Ç—É–ø –∫ —É—Å–ª—É–≥–∞–º GLS VPN.\n\n"
            "- üîê –ü–æ–ª–Ω–∞—è –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å –∏ –∞–Ω–æ–Ω–∏–º–Ω–æ—Å—Ç—å\n"
            "- ‚ôæÔ∏è –ë–µ–∑–ª–∏–º–∏—Ç–Ω—ã–π —Ç—Ä–∞—Ñ–∏–∫\n"
            "- üöÄ –°—Ç–∞–±–∏–ª—å–Ω–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å –∏ –º–≥–Ω–æ–≤–µ–Ω–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ\n\n"
            "üåç –î–æ—Å—Ç—É–ø–Ω—ã–µ –ª–æ–∫–∞—Ü–∏–∏:\n"
            "‚îú üá≥üá± –ù–∏–¥–µ—Ä–ª–∞–Ω–¥—ã ‚Äî –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ\n"
            "‚îú üá©üá™ –ì–µ—Ä–º–∞–Ω–∏—è ‚Äî –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ\n"
            "‚îú üá∫üá∏ –°–®–ê ‚Äî –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ\n"
            "‚îî üá´üáÆ –§–∏–Ω–ª—è–Ω–¥–∏—è ‚Äî –¥–æ—Å—Ç—É–ø–Ω–æ"
        )
        await callback_query.message.edit_text(text=text, reply_markup=keyboard.create_server_keyboard())
    elif "—Å—Ç—Ä–∞–Ω—É" in current_text or "—Å—Ç—Ä–∞–Ω–∞" in current_text:
        await bot.delete_message(chat_id=tg_id, message_id=callback_query.message.message_id)
        await bot.send_message(
            chat_id=tg_id,
            text="–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é:",
            reply_markup=create_keyboard(),
        )
    else:
        await bot.delete_message(chat_id=tg_id, message_id=callback_query.message.message_id)
        await bot.send_message(
            chat_id=tg_id,
            text="–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é:",
            reply_markup=create_keyboard(),
        )


@common_router.callback_query(F.data == "activate_balance")
async def activate_balance(callback_query: CallbackQuery, bot: Bot, state: FSMContext) -> None:
    # –í—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–µ–Ω–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥–æ–≤
    await callback_query.answer(
        "üöß –ê–∫—Ç–∏–≤–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥–æ–≤ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞\n\n"
        "–í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –º—ã –ø—Ä–æ–≤–æ–¥–∏–º —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ä–∞–±–æ—Ç—ã.\n"
        "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
        show_alert=True
    )

