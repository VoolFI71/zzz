"""–û–ø–ª–∞—Ç–∞ —á–µ—Ä–µ–∑ YooKassa: —Å–æ–∑–¥–∞–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞ –∏ –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞."""

from __future__ import annotations

import os
from database import db
import time
import uuid
import logging
from aiogram import Bot, F, Router
from aiogram.fsm.context import FSMContext
from aiogram.types import CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from utils import check_available_configs, check_all_servers_available

logger = logging.getLogger(__name__)

yookassa_router = Router()


from yookassa import Configuration, Payment

@yookassa_router.callback_query(F.data == "pay_cash")
async def pay_with_yookassa(callback_query: CallbackQuery, state: FSMContext, bot: Bot) -> None:
    
    user_data = await state.get_data()
    now_ts = int(time.time())
    last_click_ts = user_data.get("last_buy_click_ts")
    if last_click_ts and (now_ts - int(last_click_ts) < 3):
        await callback_query.answer("–ü–æ–¥–æ–∂–¥–∏—Ç–µ –ø–∞—Ä—É —Å–µ–∫—É–Ω–¥‚Ä¶", show_alert=False)
        return
    await state.update_data(last_buy_click_ts=now_ts)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Å–µ—Ä–≤–µ—Ä–æ–≤ –ø–µ—Ä–µ–¥ —Å–æ–∑–¥–∞–Ω–∏–µ–º –ø–ª–∞—Ç–µ–∂–∞
    if not await check_all_servers_available():
        await callback_query.message.edit_text(
            "‚ùå –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —Å–µ–π—á–∞—Å –Ω–µ –≤—Å–µ —Å–µ—Ä–≤–µ—Ä—ã –¥–æ—Å—Ç—É–ø–Ω—ã –¥–ª—è –Ω–æ–≤—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫.\n"
            "–î–ª—è –ø–æ–∫—É–ø–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã –≤—Å–µ —Å–µ—Ä–≤–µ—Ä—ã.\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back")]
            ])
        )
        await callback_query.answer()
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —É–∂–µ –ê–ö–¢–ò–í–ù–´–ï –∫–æ–Ω—Ñ–∏–≥–∏
    existing_configs = await db.get_active_configs_by_tg_id(callback_query.from_user.id)
    
    
    if existing_configs:
        # –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å—Ç—å –∫–æ–Ω—Ñ–∏–≥–∏ - –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –ø—Ä–æ–¥–ª–µ–Ω–∏–µ
        await callback_query.message.edit_text(
            "–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞! –í—ã —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ–¥–ª–∏—Ç—å –µ—ë?",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚úÖ –ü—Ä–æ–¥–ª–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="extend_yookassa")],
                [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_payment")]
            ])
        )
        await callback_query.answer()
        return
    
    # –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –∫–æ–Ω—Ñ–∏–≥–æ–≤ - —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–µ –Ω–∞ –≤—Å–µ—Ö —Å–µ—Ä–≤–µ—Ä–∞—Ö
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤—Å–µ —Å–µ—Ä–≤–µ—Ä—ã –∏–∑ SERVER_ORDER (–∫–∞–∫ –ø—Ä–∏ –ø–æ–∫—É–ø–∫–µ –ø–æ–¥–ø–∏—Å–∫–∏)
    env_order = os.getenv("SERVER_ORDER", "fi,ge")
    servers_to_use = [s.strip().lower() for s in env_order.split(',') if s.strip()]
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–ø–∏—Å–æ–∫ —Å–µ—Ä–≤–µ—Ä–æ–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
    # –ï—Å–ª–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã –≤–∞—Ä–∏–∞–Ω—Ç—ã (fi2, ge3), –≤—ã–±–µ—Ä–µ–º –ø–æ –æ–¥–Ω–æ–º—É –≤–∞—Ä–∏–∞–Ω—Ç—É –Ω–∞ —Ä–µ–≥–∏–æ–Ω
    try:
        from utils import pick_servers_one_per_region
        selected = await pick_servers_one_per_region(servers_to_use)
    except Exception:
        selected = servers_to_use
    await state.update_data(servers_to_use=selected)

    YOOKASSA_SHOP_ID = os.getenv("YOOKASSA_SHOP_ID")
    YOOKASSA_SECRET = os.getenv("YOOKASSA_SECRET_KEY")

    if not (YOOKASSA_SHOP_ID and YOOKASSA_SECRET):
        await callback_query.answer("–ü–ª–∞—Ç—ë–∂ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: YooKassa –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞", show_alert=True)
        return

    Configuration.account_id = YOOKASSA_SHOP_ID
    Configuration.secret_key = YOOKASSA_SECRET

    days = int(user_data.get("selected_days", 31))
    # –°—É–º–º—ã –∏ –æ–ø–∏—Å–∞–Ω–∏—è –∏–∑ –æ–∫—Ä—É–∂–µ–Ω–∏—è —Å –∞–¥–µ–∫–≤–∞—Ç–Ω—ã–º–∏ –¥–µ—Ñ–æ–ª—Ç–∞–º–∏
    price_1m = int(os.getenv("PRICE_1M_RUB", "100"))
    price_3m = int(os.getenv("PRICE_3M_RUB", "250"))
    price_6m = int(os.getenv("PRICE_6M_RUB", "450"))

    desc_1m = os.getenv("YK_DESC_1M", "–ü–æ–¥–ø–∏—Å–∫–∞ GLS VPN ‚Äî 1 –º–µ—Å—è—Ü")
    desc_3m = os.getenv("YK_DESC_3M", "–ü–æ–¥–ø–∏—Å–∫–∞ GLS VPN ‚Äî 3 –º–µ—Å—è—Ü–∞")
    desc_6m = os.getenv("YK_DESC_6M", "–ü–æ–¥–ø–∏—Å–∫–∞ GLS VPN ‚Äî 6 –º–µ—Å—è—Ü–µ–≤")
    desc_12m = os.getenv("YK_DESC_12M", "–ü–æ–¥–ø–∏—Å–∫–∞ GLS VPN ‚Äî 12 –º–µ—Å—è—Ü–µ–≤")

    if days == 31:
        payload = "sub_1m"
        amount_rub, description = price_1m, desc_1m
    elif days == 93:
        payload = "sub_3m"
        amount_rub, description = price_3m, desc_3m
    elif days == 180:
        payload = "sub_6m"
        amount_rub, description = price_6m, desc_6m
    else:
        payload = "sub_1m"
        amount_rub, description = price_1m, desc_1m

    # –ß–µ–∫ (receipt) —Å –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–º –±–ª–æ–∫–æ–º customer
    receipt: dict = {
        "items": [
            {
                "description": description,
                "quantity": "1.00",
                "amount": {"value": f"{amount_rub}.00", "currency": "RUB"},
                "vat_code": 1,
            }
        ]
    }
    customer: dict = {}
    # –ë–µ—Ä—ë–º –∏–∑ –æ–∫—Ä—É–∂–µ–Ω–∏—è, –∏–Ω–∞—á–µ –ø–æ–¥—Å—Ç–∞–≤–ª—è–µ–º —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –∞–¥—Ä–µ—Å –ø–æ tg_id
    _email_from_env = os.getenv("YK_RECEIPT_EMAIL")
    customer["email"] = "gleb.tula71@mail.ru"
    receipt["customer"] = customer


    try:
        payment_resp = Payment.create({
            "amount": {"value": f"{amount_rub}.00", "currency": "RUB"},
            "confirmation": {"type": "redirect", "return_url": "https://t.me/glsvpn_bot"},
            "capture": True,
            "description": description,
            "metadata": {
                "tg_id": str(callback_query.from_user.id),
                "payload": payload,
            },
            "receipt": receipt,
        }, uuid.uuid4())
    except Exception as exc:
        logger.error("YooKassa create error: %s", exc)
        await callback_query.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞", show_alert=True)
        return

    # –ü–æ –≤–∞—à–µ–º—É –ø—Ä–∏–º–µ—Ä—É: –ø–æ–ª—É—á–∞–µ–º URL –Ω–∞ –æ–ø–ª–∞—Ç—É –∏ id —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
    confirmation_url = payment_resp.confirmation.confirmation_url
    confirmation_id = payment_resp.id
    await state.update_data(yookassa_payment_id=confirmation_id)

    check_kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üí≥ –û–ø–ª–∞—Ç–∏—Ç—å YooKassa", url=confirmation_url)],
        [InlineKeyboardButton(text="‚úÖ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É", callback_data="check_yk")],
        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å —Å—á—ë—Ç", callback_data="cancel_yk_invoice")],
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back")],
    ])
    msg = await bot.send_message(
        callback_query.from_user.id,
        f"–°—á—ë—Ç —Å–æ–∑–¥–∞–Ω –Ω–∞ {amount_rub} ‚ÇΩ. –û–ø–ª–∞—Ç–∏—Ç–µ –∏ –Ω–∞–∂–º–∏—Ç–µ \"–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É\".",
        reply_markup=check_kb,
    )
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å—Å—ã–ª–∫–æ–π –Ω–∞ –æ–ø–ª–∞—Ç—É –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è
    try:
        await state.update_data(yookassa_msg_id=msg.message_id)
    except Exception:
        pass
    await callback_query.answer()
    # –ü–∏—à–µ–º –∞–≥—Ä–µ–≥–∞—Ç —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è —Å—á—ë—Ç–∞ –Ω–µ –±—É–¥–µ–º ‚Äî —Å—á–∏—Ç–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–æ —Ñ–∞–∫—Ç—É —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç—ã

    # –ê–≤—Ç–æ-–∏—Å—Ç–µ—á–µ–Ω–∏–µ (10 –º–∏–Ω—É—Ç): —É–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π –æ–ø–ª–∞—Ç—ã –∏ –æ—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    import asyncio as _asyncio
    async def _expire_yk_invoice() -> None:
        try:
            await _asyncio.sleep(10 * 60)
            data_state = await state.get_data()
            current_pid = data_state.get("yookassa_payment_id")
            current_msg_id = data_state.get("yookassa_msg_id")
            if current_pid == confirmation_id and current_msg_id:
                try:
                    await bot.delete_message(chat_id=callback_query.from_user.id, message_id=current_msg_id)
                except Exception:
                    pass
                try:
                    await state.update_data(yookassa_payment_id=None, yookassa_msg_id=None)
                except Exception:
                    pass
                try:
                    await bot.send_message(callback_query.from_user.id, "–°—á—ë—Ç –∏—Å—Ç—ë–∫. –ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ, —Å–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—ã–π.")
                except Exception:
                    pass
        except Exception:
            pass

    _asyncio.create_task(_expire_yk_invoice())


@yookassa_router.callback_query(F.data == "cancel_yk_invoice")
async def cancel_yk_invoice(callback_query: CallbackQuery, state: FSMContext, bot: Bot) -> None:
    tg_id = callback_query.from_user.id
    try:
        data_state = await state.get_data()
        yk_msg_id = data_state.get("yookassa_msg_id")
        if yk_msg_id:
            try:
                await bot.delete_message(chat_id=tg_id, message_id=yk_msg_id)
            except Exception:
                pass
            await state.update_data(yookassa_msg_id=None, yookassa_payment_id=None)
    except Exception:
        pass
    # –í–µ—Ä–Ω—ë–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å–ø–æ—Å–æ–±–æ–≤ –æ–ø–ª–∞—Ç—ã
    try:
        days = int((await state.get_data()).get("selected_days", 31))
        star_1m = int(os.getenv("PRICE_1M_STAR", "100"))
        star_3m = int(os.getenv("PRICE_3M_STAR", "250"))
        star_6m = int(os.getenv("PRICE_6M_STAR", "450"))
        rub_1m = int(os.getenv("PRICE_1M_RUB", "100"))
        rub_3m = int(os.getenv("PRICE_3M_RUB", "250"))
        rub_6m = int(os.getenv("PRICE_6M_RUB", "450"))

        if days == 31:
            star_amount, rub_amount = star_1m, rub_1m
        elif days == 93:
            star_amount, rub_amount = star_3m, rub_3m
        elif days == 180:
            star_amount, rub_amount = star_6m, rub_6m
        else:
            star_amount, rub_amount = star_1m, rub_1m
        from keyboards.keyboard import create_payment_method_keyboard
        await bot.send_message(
            tg_id,
            f"–í—ã–±—Ä–∞–Ω —Ç–∞—Ä–∏—Ñ: {days} –¥–Ω. –í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:",
            reply_markup=create_payment_method_keyboard(star_amount, rub_amount),
        )
    except Exception:
        pass
    await callback_query.answer("–°—á—ë—Ç –æ—Ç–º–µ–Ω—ë–Ω")


@yookassa_router.callback_query(F.data == "check_yk")
@yookassa_router.callback_query(F.data == "check_yookassa")
async def check_yookassa(callback_query: CallbackQuery, state: FSMContext, bot: Bot) -> None:
    from utils import get_session
    yk_id = (await state.get_data()).get("yookassa_payment_id")
    if not yk_id:
        await callback_query.answer("–°—á—ë—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return

    try:
        payment = Payment.find_one(yk_id)
        status = payment.status
    except Exception as exc:
        logger.error("YooKassa fetch error: %s", exc)
        await callback_query.answer("–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–ª–∞—Ç–µ–∂–∞", show_alert=True)
        return

    if status != "succeeded":
        await callback_query.answer("–ü–ª–∞—Ç—ë–∂ –µ—â—ë –Ω–µ –æ–ø–ª–∞—á–µ–Ω", show_alert=True)
        return

    if status == "succeeded":
        await state.update_data(yookassa_payment_id=None)
        tg_id = callback_query.from_user.id
        user_data = await state.get_data()
        payload = payment.metadata.get("payload") if hasattr(payment, "metadata") else "sub_1m"
        payload_to_days = {"sub_1m": 31, "sub_3m": 93, "sub_6m": 180, "sub_12m": 365}
        days = payload_to_days.get(payload, 31)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —É–∂–µ –ê–ö–¢–ò–í–ù–´–ï –∫–æ–Ω—Ñ–∏–≥–∏
        existing_configs = await db.get_active_configs_by_tg_id(tg_id)
        
        if existing_configs:
            # –ü—Ä–æ–¥–ª–µ–≤–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∫–æ–Ω—Ñ–∏–≥–∏
            await extend_existing_configs_yookassa(tg_id, days, bot)
        else:
            # –í—ã–¥–∞–µ–º –∫–æ–Ω—Ñ–∏–≥–∏ –Ω–∞ —Ä–∞–Ω–µ–µ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Å–µ—Ä–≤–µ—Ä–∞—Ö (–ø–æ –æ–¥–Ω–æ–º—É –Ω–∞ —Ä–µ–≥–∏–æ–Ω)
            data_state = await state.get_data()
            servers_to_use = data_state.get("servers_to_use")
            if not servers_to_use:
                import os
                server_order_env = os.getenv("SERVER_ORDER", "fi,ge")
                fallback = [s.strip().lower() for s in server_order_env.split(',') if s.strip()]
                try:
                    from utils import pick_servers_one_per_region
                    servers_to_use = await pick_servers_one_per_region(fallback)
                except Exception:
                    servers_to_use = fallback
            await give_configs_on_all_servers_yookassa(tg_id, days, servers_to_use, bot)
        
        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –ø–ª–∞—Ç–µ–∂ –≤ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        amount = payment.amount.value if hasattr(payment.amount, 'value') else 0
        await db.mark_payment(tg_id, days)
        await db.add_rub_payment(amount)
        
        # –ù–∞—á–∏—Å–ª—è–µ–º –±–æ–Ω—É—Å —Ä–µ—Ñ–µ—Ä–∞–ª—É
        inviter_tg_id = await db.get_referrer_id(str(tg_id))
        if inviter_tg_id:
            try:
                # –ù–∞—á–∏—Å–ª—è–µ–º –±–æ–Ω—É—Å–Ω—ã–µ –¥–Ω–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 2 –¥–Ω—è)
                BONUS_DAYS = int(days//10)
                await db.add_balance_days(str(inviter_tg_id), BONUS_DAYS)
                try:
                    await bot.send_message(int(inviter_tg_id),
                                        f"–í–∞—à —Ä–µ—Ñ–µ—Ä–∞–ª –æ–ø–ª–∞—Ç–∏–ª –ø–æ–¥–ø–∏—Å–∫—É ‚Äî –≤–∞–º –Ω–∞—á–∏—Å–ª–µ–Ω–æ {BONUS_DAYS} –¥–Ω—è(–µ–π) –±–æ–Ω—É—Å–∞. –í—ã –º–æ–∂–µ—Ç–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –∏—Ö –≤ –ª–∏—á–Ω–æ–º –∫–∞–±–∏–Ω–µ—Ç–µ")
                except Exception:
                    pass
            except Exception as exc:
                logger.error("–û—à–∏–±–∫–∞ –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è –±–æ–Ω—É—Å–∞ –ø—Ä–∏–≥–ª–∞—Å–∏—Ç–µ–ª—é %s: %s", inviter_tg_id, exc)
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∞
        try:
            admin_id = 746560409
            if admin_id:
                at_username = (f"@{callback_query.from_user.username}" if getattr(callback_query.from_user, "username", None) else "‚Äî")
                if existing_configs:
                    # –ü—Ä–æ–¥–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏
                    await bot.send_message(admin_id, f"–ü—Ä–æ–¥–ª–µ–Ω–∞ –ø–æ–¥–ø–∏—Å–∫–∞ —á–µ—Ä–µ–∑ YooKassa: user_id={tg_id}, user={at_username}, —Å—Ä–æ–∫={days} –¥–Ω.")
                else:
                    # –ù–æ–≤–∞—è –ø–æ–¥–ø–∏—Å–∫–∞
                    await bot.send_message(admin_id, f"–û–ø–ª–∞—á–µ–Ω–∞ –ø–æ–¥–ø–∏—Å–∫–∞ —á–µ—Ä–µ–∑ YooKassa: user_id={tg_id}, user={at_username}, —Å—Ä–æ–∫={days} –¥–Ω.")
        except Exception:
            pass

        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π –æ–ø–ª–∞—Ç—ã, –µ—Å–ª–∏ –æ–Ω–æ –µ—Å—Ç—å
        try:
            data_state = await state.get_data()
            yk_msg_id = data_state.get("yookassa_msg_id")
            if yk_msg_id:
                try:
                    await bot.delete_message(chat_id=tg_id, message_id=yk_msg_id)
                except Exception:
                    pass
                await state.update_data(yookassa_msg_id=None)
        except Exception:
            pass


async def give_configs_on_all_servers_yookassa(tg_id: int, days: int, servers: list, bot: Bot) -> None:
    """–í—ã–¥–∞–µ—Ç –∫–æ–Ω—Ñ–∏–≥–∏ –Ω–∞ –≤—Å–µ—Ö —É–∫–∞–∑–∞–Ω–Ω—ã—Ö —Å–µ—Ä–≤–µ—Ä–∞—Ö –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (YooKassa)."""
    from utils import get_session
    import aiohttp
    
    AUTH_CODE = os.getenv("AUTH_CODE")
    urlupdate = "http://fastapi:8080/giveconfig"
    session = await get_session()
    
    success_count = 0
    failed_servers = []
    
    for server in servers:
        try:
            data = {"time": days, "id": str(tg_id), "server": server}
            async with session.post(urlupdate, json=data, headers={"X-API-Key": AUTH_CODE}) as resp:
                if resp.status == 200:
                    success_count += 1
                else:
                    failed_servers.append(server)
        except Exception as e:
            logger.error(f"Failed to create config on server {server}: {e}")
            failed_servers.append(server)
    
    # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ
    if success_count > 0:
        await bot.send_message(tg_id, f"‚úÖ –û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ! \n\n–ü–æ–ª—É—á–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É –º–æ–∂–Ω–æ –≤ –õ–∏—á–Ω–æ–º –∫–∞–±–∏–Ω–µ—Ç–µ ‚Üí –ú–æ–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è")
    
    if failed_servers:
        await bot.send_message(tg_id, f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∫–æ–Ω—Ñ–∏–≥–∏ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–∞—Ö: {', '.join(failed_servers)}")


async def extend_existing_configs_yookassa(tg_id: int, days: int, bot: Bot) -> None:
    """–ü—Ä–æ–¥–ª–µ–≤–∞–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∫–æ–Ω—Ñ–∏–≥–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (YooKassa)."""
    from utils import get_session
    import aiohttp
    
    AUTH_CODE = os.getenv("AUTH_CODE")
    urlextend = "http://fastapi:8080/extendconfig"
    session = await get_session()
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –ê–ö–¢–ò–í–ù–´–ï –∫–æ–Ω—Ñ–∏–≥–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    existing_configs = await db.get_active_configs_by_tg_id(tg_id)
    success_count = 0
    failed_configs = []
    
    for user_code, time_end, server in existing_configs:
        try:
            data = {"time": days, "uid": user_code, "server": server}
            async with session.post(urlextend, json=data, headers={"X-API-Key": AUTH_CODE}) as resp:
                if resp.status == 200:
                    success_count += 1
                else:
                    failed_configs.append(user_code)
        except Exception as e:
            logger.error(f"Failed to extend config {user_code}: {e}")
            failed_configs.append(user_code)
    
    # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ
    if success_count > 0:
        await bot.send_message(tg_id, f"‚úÖ –û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ! –ü–æ–¥–ø–∏—Å–∫–∞ –ø—Ä–æ–¥–ª–µ–Ω–∞ –Ω–∞ {success_count} –∫–æ–Ω—Ñ–∏–≥–∞—Ö.\n\n–ü–æ–ª—É—á–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É –º–æ–∂–Ω–æ –≤ –õ–∏—á–Ω–æ–º –∫–∞–±–∏–Ω–µ—Ç–µ ‚Üí –ú–æ–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è")
    
    if failed_configs:
        await bot.send_message(tg_id, f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–¥–ª–∏—Ç—å {len(failed_configs)} –∫–æ–Ω—Ñ–∏–≥–æ–≤")


@yookassa_router.callback_query(F.data == "extend_yookassa")
async def extend_yookassa_handler(callback_query: CallbackQuery, state: FSMContext, bot: Bot) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–æ–¥–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏ —á–µ—Ä–µ–∑ YooKassa."""
    tg_id = callback_query.from_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Å–µ—Ä–≤–µ—Ä–æ–≤ –ø–µ—Ä–µ–¥ —Å–æ–∑–¥–∞–Ω–∏–µ–º –ø–ª–∞—Ç–µ–∂–∞ –¥–ª—è –ø—Ä–æ–¥–ª–µ–Ω–∏—è
    if not await check_all_servers_available():
        await callback_query.message.edit_text(
            "‚ùå –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —Å–µ–π—á–∞—Å –Ω–µ –≤—Å–µ —Å–µ—Ä–≤–µ—Ä—ã –¥–æ—Å—Ç—É–ø–Ω—ã –¥–ª—è –ø—Ä–æ–¥–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–æ–∫.\n"
            "–î–ª—è –ø—Ä–æ–¥–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã –≤—Å–µ —Å–µ—Ä–≤–µ—Ä—ã.\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back")]
            ])
        )
        await callback_query.answer()
        return
    
    user_data = await state.get_data()
    days = int(user_data.get("selected_days", 31))

    # –°–æ–∑–¥–∞–µ–º –ø–ª–∞—Ç–µ–∂ –¥–ª—è –ø—Ä–æ–¥–ª–µ–Ω–∏—è
    price_1m = int(os.getenv("PRICE_1M_RUB", "100"))
    price_3m = int(os.getenv("PRICE_3M_RUB", "250"))
    price_6m = int(os.getenv("PRICE_6M_RUB", "450"))
    if days == 31:
        payload = "sub_1m"; amount = price_1m
    elif days == 93:
        payload = "sub_3m"; amount = price_3m
    elif days == 180:
        payload = "sub_6m"; amount = price_6m
    else:
        payload = "sub_1m"; amount = price_1m
    
    YOOKASSA_SHOP_ID = os.getenv("YOOKASSA_SHOP_ID")
    YOOKASSA_SECRET = os.getenv("YOOKASSA_SECRET_KEY")
    
    if not (YOOKASSA_SHOP_ID and YOOKASSA_SECRET):
        await callback_query.answer("–ü–ª–∞—Ç—ë–∂ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: YooKassa –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞", show_alert=True)
        return
    
    Configuration.account_id = YOOKASSA_SHOP_ID
    Configuration.secret_key = YOOKASSA_SECRET
    
    try:
        payment = Payment.create({
            "amount": {"value": str(amount), "currency": "RUB"},
            "confirmation": {"type": "redirect", "return_url": "https://t.me/your_bot"},
            "capture": True,
            "description": f"–ü—Ä–æ–¥–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏ GLS VPN ‚Äî {days} –¥–Ω.",
            "metadata": {"payload": payload},
            "receipt": {
                "customer": {"email": f"gleb.tula71@mail.ru"},
                "items": [{
                    "description": f"–ü—Ä–æ–¥–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏ GLS VPN ‚Äî {days} –¥–Ω.",
                    "amount": {"value": str(amount), "currency": "RUB"},
                    "vat_code": 1,
                    "quantity": "1"
                }]
            }
        })
        
        await state.update_data(yookassa_payment_id=payment.id)
        msg = await callback_query.message.edit_text(
            f"üí≥ <b>–ü—Ä–æ–¥–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏ GLS VPN ‚Äî {days} –¥–Ω.</b>\n\n"
            f"–°—É–º–º–∞: {amount} ‚ÇΩ\n\n"
            f"–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è –æ–ø–ª–∞—Ç—ã:",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üí≥ –û–ø–ª–∞—Ç–∏—Ç—å", url=payment.confirmation.confirmation_url)],
                [InlineKeyboardButton(text="‚úÖ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É", callback_data="check_yookassa")],
                [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å —Å—á—ë—Ç", callback_data="cancel_yk_invoice")]
            ]),
            parse_mode="HTML"
        )
        try:
            await state.update_data(yookassa_msg_id=msg.message_id)
        except Exception:
            pass
        await callback_query.answer("–°—á—ë—Ç –¥–ª—è –ø—Ä–æ–¥–ª–µ–Ω–∏—è —Å–æ–∑–¥–∞–Ω!")
        # –ê–≤—Ç–æ-–∏—Å—Ç–µ—á–µ–Ω–∏–µ (10 –º–∏–Ω—É—Ç) –¥–ª—è –ø—Ä–æ–¥–ª–µ–Ω–∏—è
        import asyncio as _asyncio
        async def _expire_yk_invoice_renewal() -> None:
            try:
                await _asyncio.sleep(10 * 60)
                data_state = await state.get_data()
                current_pid = data_state.get("yookassa_payment_id")
                current_msg_id = data_state.get("yookassa_msg_id")
                if current_pid == payment.id and current_msg_id:
                    try:
                        await bot.delete_message(chat_id=tg_id, message_id=current_msg_id)
                    except Exception:
                        pass
                    try:
                        await state.update_data(yookassa_payment_id=None, yookassa_msg_id=None)
                    except Exception:
                        pass
                    try:
                        await bot.send_message(tg_id, "–°—á—ë—Ç –∏—Å—Ç—ë–∫. –ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ, —Å–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—ã–π.")
                    except Exception:
                        pass
            except Exception:
                pass
        _asyncio.create_task(_expire_yk_invoice_renewal())
    except Exception as e:
        logger.error(f"Failed to create YooKassa payment: {e}")
        await callback_query.answer("–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å—á—ë—Ç–∞", show_alert=True)


