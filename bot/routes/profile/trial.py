"""
–§—É–Ω–∫—Ü–∏–∏ –ø—Ä–æ–±–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏.
"""

import os
import aiohttp
from aiogram import Router, F, types
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, WebAppInfo
from utils import should_throttle, acquire_action_lock, check_all_servers_available, get_session
from keyboards.ui_labels import BTN_TRIAL
from database import db
from keyboards import keyboard

router = Router()

@router.message(F.text.in_({
    "–ü—Ä–æ–±–Ω–∞—è 3 –¥–Ω—è",
    "üéÅ –ü—Ä–æ–±–Ω–∞—è 3 –¥–Ω—è",
    "–ü—Ä–æ–±–Ω—ã–µ 3 –¥–Ω—è",
    "üéÅ –ü—Ä–æ–±–Ω—ã–µ 3 –¥–Ω—è",
    "–ü—Ä–æ–±–Ω—ã–π –¥–æ—Å—Ç—É–ø 3 –¥–Ω—è",
    "üéÅ –ü—Ä–æ–±–Ω—ã–π –¥–æ—Å—Ç—É–ø 3 –¥–Ω—è",
    BTN_TRIAL,
}))
async def free_trial(message: types.Message):
    """–ê–∫—Ç–∏–≤–∞—Ü–∏—è –ø—Ä–æ–±–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ 3 –¥–Ω—è."""
    user_id = message.from_user.id
    # Throttle repeated clicks
    throttled, retry_after = should_throttle(user_id, "free_trial", cooldown_seconds=5.0)
    if throttled:
        await message.answer(f"–°–ª–∏—à–∫–æ–º —á–∞—Å—Ç–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —á–µ—Ä–µ–∑ {int(retry_after)+1} —Å–µ–∫.")
        return
    try:
        await db.ensure_user_row(str(user_id))
        if await db.has_used_trial_3d(str(user_id)):
            await message.answer("–í—ã —É–∂–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–ª–∏ –ø—Ä–æ–±–Ω—É—é –ø–æ–¥–ø–∏—Å–∫—É —Ä–∞–Ω–µ–µ.")
            return
    except Exception:
        await message.answer("–û—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Å–µ—Ä–≤–µ—Ä–æ–≤ –ø–µ—Ä–µ–¥ –≤—ã–¥–∞—á–µ–π –ø—Ä–æ–±–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏
    if not await check_all_servers_available():
        await message.answer(
            "‚ùå –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —Å–µ–π—á–∞—Å –Ω–µ –≤—Å–µ —Å–µ—Ä–≤–µ—Ä—ã –¥–æ—Å—Ç—É–ø–Ω—ã –¥–ª—è –ø—Ä–æ–±–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏.\n"
            "–î–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø—Ä–æ–±–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã –≤—Å–µ —Å–µ—Ä–≤–µ—Ä—ã.\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É."
        )
        return

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
    progress_msg = await message.answer("üîÑ –ê–∫—Ç–∏–≤–∏—Ä—É—é –ø—Ä–æ–±–Ω—É—é –ø–æ–¥–ø–∏—Å–∫—É...")
    
    # –í—ã–¥–∞–µ–º –∫–æ–Ω—Ñ–∏–≥–∏ –Ω–∞ –≤—Å–µ—Ö —Å–µ—Ä–≤–µ—Ä–∞—Ö –∏–∑ SERVER_ORDER (–∫–∞–∫ –ø—Ä–∏ –ø–æ–∫—É–ø–∫–µ –ø–æ–¥–ø–∏—Å–∫–∏)
    server_order_env = os.getenv("SERVER_ORDER", "ge")
    servers_to_use = [s.strip().lower() for s in server_order_env.split(',') if s.strip()]
    # –í—ã–±–∏—Ä–∞–µ–º –ø–æ –æ–¥–Ω–æ–º—É –≤–∞—Ä–∏–∞–Ω—Ç—É –Ω–∞ —Ä–µ–≥–∏–æ–Ω (ge*)
    try:
        from utils import pick_servers_one_per_region
        servers_to_use = await pick_servers_one_per_region(servers_to_use)
    except Exception:
        pass

    # –í—ã–¥–∞—ë–º –±–µ—Å–ø–ª–∞—Ç–Ω—ã–µ 3 –¥–Ω—è –Ω–∞ –≤—Å–µ—Ö —Å–µ—Ä–≤–µ—Ä–∞—Ö
    AUTH_CODE = os.getenv("AUTH_CODE")
    urlupdate = "http://fastapi:8080/giveconfig"
    success_count = 0
    failed_servers = []
    
    try:
        session = await get_session()
        async with acquire_action_lock(user_id, "free_trial"):
            for server in servers_to_use:
                data = {"time": 3, "id": str(user_id), "server": server}
                async with session.post(urlupdate, json=data, headers={"X-API-Key": AUTH_CODE}) as resp:
                    if resp.status == 200:
                        success_count += 1
                    else:
                        failed_servers.append(server)
            
            if success_count > 0:
                # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
                await progress_msg.edit_text("‚úÖ –ü—Ä–æ–±–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞! –ù–∞—Å—Ç—Ä–∞–∏–≤–∞—é –¥–æ—Å—Ç—É–ø...")
                
                await db.set_trial_3d_used(str(user_id))
                base = os.getenv("PUBLIC_BASE_URL", "https://swaga.space").rstrip('/')
                try:
                    sub_url = f"http://fastapi:8080/sub/{user_id}"
                    async with session.get(sub_url, headers={"X-API-Key": AUTH_CODE}) as sub_resp:
                        if sub_resp.status == 200:
                            sub_data = await sub_resp.json()
                            sub_key = sub_data.get("sub_key")
                            if sub_key:
                                web_url = f"{base}/subscription/{sub_key}"
                            else:
                                web_url = f"{base}/subscription"
                        else:
                            web_url = f"{base}/subscription"
                except Exception:
                    # Fallback –Ω–∞ —Å—Ç–∞—Ä—É—é —Å—Å—ã–ª–∫—É, –µ—Å–ª–∏ —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫
                    web_url = f"{base}/subscription"
                kb = InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="üì≤ –î–æ–±–∞–≤–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É –≤ V2rayTun", web_app=WebAppInfo(url=web_url))],
                    [InlineKeyboardButton(text="üìã –°–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å —Å—Å—ã–ª–∫—É", callback_data="copy_sub")],
                ])
                await message.answer(f"üéâ –ü—Ä–æ–±–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ 3 –¥–Ω—è –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞ –Ω–∞ {success_count} —Å–µ—Ä–≤–µ—Ä–∞—Ö!", reply_markup=kb)
                await message.answer("üí° –ü–æ–¥–ø–∏—Å–∫–∞ –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∞ —Å–∞–π—Ç–µ, –≤ —ç—Ç–æ–º —Å–ª—É—á–∞–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å —Å—Å—ã–ª–∫—É –Ω–∞ –ø–æ–¥–ø–∏—Å–∫—É –∏ –≤—Å—Ç–∞–≤–∏—Ç—å –≤ V2rayTun –≤—Ä—É—á–Ω—É—é.")

                try:
                    admin_id = 746560409
                    at_username = (f"@{message.from_user.username}" if getattr(message.from_user, "username", None) else "‚Äî")
                    await message.bot.send_message(admin_id, f"–ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞ –ø—Ä–æ–±–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞: user_id={user_id}, user={at_username}, —Å–µ—Ä–≤–µ—Ä–æ–≤={success_count}, —Å—Ä–æ–∫=3 –¥–Ω.")
                except Exception:
                    pass
            else:
                await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–±–Ω—É—é –ø–æ–¥–ø–∏—Å–∫—É. –°–µ—Ä–≤–µ—Ä—ã –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —á–µ—Ä–µ–∑ 5-10 –º–∏–Ω—É—Ç.", reply_markup=keyboard.create_keyboard())
                
            if failed_servers:
                await message.answer(f"‚ö†Ô∏è –ß–∞—Å—Ç–∏—á–Ω–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–æ: –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∫–æ–Ω—Ñ–∏–≥–∏ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–∞—Ö {', '.join(failed_servers)}. –û—Å—Ç–∞–ª—å–Ω—ã–µ —Å–µ—Ä–≤–µ—Ä—ã —Ä–∞–±–æ—Ç–∞—é—Ç.", reply_markup=keyboard.create_keyboard())
                
    except aiohttp.ClientError:
        await message.answer("üåê –ü—Ä–æ–±–ª–µ–º—ã —Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º –∫ —Å–µ—Ä–≤–µ—Ä–∞–º. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", reply_markup=keyboard.create_keyboard())
