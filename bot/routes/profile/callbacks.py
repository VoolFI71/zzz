"""
Callback –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –ø—Ä–æ—Ñ–∏–ª—è.
"""

import os
import aiohttp
from aiogram import Router, F, types
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from utils import acquire_action_lock, get_session
from database import db

router = Router()

AUTH_CODE = os.getenv("AUTH_CODE")

@router.callback_query(F.data.startswith("copy_config_"))
async def copy_config_callback(callback: types.CallbackQuery):
    """–¢–µ–ø–µ—Ä—å –æ—Ç–¥–∞—ë–º —Å—Å—ã–ª–∫—É –Ω–∞ –ø–æ–¥–ø–∏—Å–∫—É, –∫–æ—Ç–æ—Ä–∞—è –ø–æ–¥—Ç—è–Ω–µ—Ç –≤—Å–µ –∫–æ–Ω—Ñ–∏–≥–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏."""
    try:
        # idx –∏–∑ callback –Ω–∞–º –±–æ–ª—å—à–µ –Ω–µ –Ω—É–∂–µ–Ω, –Ω–æ –ø–∞—Ä—Å–∏–º –±–µ–∑–æ–ø–∞—Å–Ω–æ –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
        _ = int(callback.data.split("_")[-1]) if callback.data.rsplit("_", 1)[-1].isdigit() else None
    except Exception:
        pass

    user_id = callback.from_user.id
    headers = {"X-API-Key": AUTH_CODE}

    try:
        session = await get_session()
        async with acquire_action_lock(user_id, "copy_config"):
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å—Ç–æ—è–Ω–Ω—ã–π sub_key –∏–∑ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–≥–æ API
            sub_url_api = f"http://fastapi:8080/sub/{user_id}"
            async with session.get(sub_url_api, timeout=10, headers=headers) as resp:
                if resp.status != 200:
                    await callback.answer("–û—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ", show_alert=True)
                    return
                data = await resp.json()
                sub_key = data.get("sub_key")
                if not sub_key:
                    await callback.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Å—ã–ª–∫—É", show_alert=True)
                    return
            # –§–æ—Ä–º–∏—Ä—É–µ–º –ø—É–±–ª–∏—á–Ω—É—é —Å—Å—ã–ª–∫—É –ø–æ–¥–ø–∏—Å–∫–∏
            base = os.getenv("PUBLIC_BASE_URL", "https://swaga.space").rstrip('/')
            web_url = f"{base}/subscription/{sub_key}"
            kb = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üì≤ –î–æ–±–∞–≤–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É –≤ V2rayTun", url=web_url)],
                [InlineKeyboardButton(text="üìã –°–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å —Å—Å—ã–ª–∫—É", callback_data="copy_sub")],
            ])
            await callback.message.answer("–í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞:", reply_markup=kb, disable_web_page_preview=True)
            await callback.answer()
    except aiohttp.ClientError:
        await callback.answer("–û—à–∏–±–∫–∞ —Å–µ—Ç–∏", show_alert=True)
    except Exception:
        await callback.answer("–û—à–∏–±–∫–∞", show_alert=True)

@router.callback_query(F.data == "copy_sub")
async def copy_subscription_callback(callback: types.CallbackQuery):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –µ–≥–æ —Å—Å—ã–ª–∫—É –Ω–∞ –ø–æ–¥–ø–∏—Å–∫—É –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è."""
    user_id = callback.from_user.id
    headers = {"X-API-Key": AUTH_CODE}
    try:
        session = await get_session()
        sub_url_api = f"http://fastapi:8080/sub/{user_id}"
        async with acquire_action_lock(user_id, "copy_sub"):
            async with session.get(sub_url_api, timeout=10, headers=headers) as resp:
                if resp.status != 200:
                    await callback.answer("–û—à–∏–±–∫–∞", show_alert=True)
                    return
                data = await resp.json()
                sub_key = data.get("sub_key")
                if not sub_key:
                    # –ü—ã—Ç–∞–µ–º—Å—è —Å–æ–∑–¥–∞—Ç—å sub_key –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ
                    try:
                        sub_key = await db.get_or_create_sub_key(str(user_id))
                    except Exception:
                        await callback.answer("–ù–µ—Ç —Å—Å—ã–ª–∫–∏", show_alert=True)
                        return
        base = os.getenv("PUBLIC_BASE_URL", "https://swaga.space").rstrip('/')
        web_url = f"{base}/subscription/{sub_key}"
        # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ —Å—Å—ã–ª–∫—É –±–µ–∑ –∫–Ω–æ–ø–æ–∫
        try:
            await callback.message.edit_text(web_url, disable_web_page_preview=True)
        except Exception:
            try:
                # –ï—Å–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ (—Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ) ‚Äî –æ—Ç–ø—Ä–∞–≤–∏–º –Ω–æ–≤—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
                await callback.message.answer(web_url, disable_web_page_preview=True)
            except Exception:
                pass
        # –°–æ–æ–±—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        try:
            await callback.answer("–°–∫–æ–ø–∏—Ä—É–π—Ç–µ —Å—Å—ã–ª–∫—É", show_alert=False)
        except Exception:
            pass
    except Exception:
        try:
            await callback.answer("–û—à–∏–±–∫–∞", show_alert=True)
        except Exception:
            pass

@router.callback_query(F.data == "delmsg")
async def delete_message_callback(callback: types.CallbackQuery):
    """–£–¥–∞–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ."""
    try:
        await callback.message.delete()
    except Exception:
        pass
    try:
        await callback.answer()
    except Exception:
        pass
