"""
–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥–∞–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
"""

import os
import time
import aiohttp
from aiogram import Router, F, types
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from keyboards import keyboard
from utils import should_throttle, acquire_action_lock, get_session
from database import db

router = Router()

AUTH_CODE = os.getenv("AUTH_CODE")

@router.message(F.text.in_({"–ú–æ–∏ –∫–æ–Ω—Ñ–∏–≥–∏", "üìÇ –ú–æ–∏ –∫–æ–Ω—Ñ–∏–≥–∏"}))
async def my_configs(message: types.Message):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    user_id = message.from_user.id
    throttled, retry_after = should_throttle(user_id, "my_configs", cooldown_seconds=3.0)
    if throttled:
        await message.answer(f"–°–ª–∏—à–∫–æ–º —á–∞—Å—Ç–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —á–µ—Ä–µ–∑ {int(retry_after)} —Å–µ–∫.")
        return
    url = f"http://fastapi:8080/usercodes/{user_id}"
    headers = {"X-API-Key": AUTH_CODE}

    try:
        session = await get_session()
        async with acquire_action_lock(user_id, "my_configs"):
            async with session.get(url, timeout=10, headers=headers) as response:
                if response.status == 200:
                    response_data = await response.json()
                    if response_data:
                        def _parse_time_end(raw: object) -> int:
                            try:
                                val = int(raw)
                            except Exception:
                                return 0
                            # Heuristic: if value looks like milliseconds, convert to seconds
                            if val > 10**11:
                                val = val // 1000
                            return val
                        skew_tolerance = 5  # seconds
                        # –°–≤–æ–¥–∫–∞ –ø–æ —Å—Ç—Ä–∞–Ω–∞–º
                        now_ts = int(time.time())
                    
                        active_configs = []
                        # Map server code -> nice title and flag
                        server_titles = {
                            'fi': '–§–∏–Ω–ª—è–Ω–¥–∏—è',
                            'nl': '–ù–∏–¥–µ—Ä–ª–∞–Ω–¥—ã',
                            'ge': '–ì–µ—Ä–º–∞–Ω–∏—è',
                        }
                        server_flags = {
                            'fi': 'üá´üáÆ',
                            'nl': 'üá≥üá±',
                            'ge': 'üá©üá™',
                        }

                        def _fmt_duration(seconds: int) -> str:
                            seconds = max(0, int(seconds))
                            days = seconds // 86400
                            hours = (seconds % 86400) // 3600
                            minutes = (seconds % 3600) // 60
                            if days > 0:
                                return f"{days} –¥–Ω {hours} —á"
                            if hours > 0:
                                return f"{hours} —á {minutes} –º–∏–Ω"
                            return f"{minutes} –º–∏–Ω"

                        for user in response_data:
                            time_end = _parse_time_end(user.get('time_end', 0))
                            if time_end >= (now_ts - skew_tolerance):
                                srv = str(user.get('server', ''))
                                title = server_titles.get(srv, srv.upper())
                                flag = server_flags.get(srv, '')
                                remaining_secs = time_end - now_ts
                                active_configs.append(f"- {flag} {title}: {_fmt_duration(remaining_secs)}")

                        if not active_configs:
                            await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π", reply_markup=keyboard.create_profile_keyboard())
                            return

                        text = "–í–∞—à–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏:\n" + "\n".join(active_configs)

                        # –ü–æ—Å—Ç–æ—è–Ω–Ω–∞—è —Å—Å—ã–ª–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ sub_key
                        sub_url = f"http://fastapi:8080/sub/{user_id}"
                        try:
                            async with session.get(sub_url, timeout=10, headers=headers) as resp:
                                if resp.status != 200:
                                    await message.answer("–û—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", reply_markup=keyboard.create_profile_keyboard())
                                    return
                                data = await resp.json()
                        except aiohttp.ClientError as e:
                            await message.answer(f"–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: {str(e)}", reply_markup=keyboard.create_profile_keyboard())
                            return
                        except Exception:
                            await message.answer("–û—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", reply_markup=keyboard.create_profile_keyboard())
                            return

                        sub_key = data.get("sub_key")
                        if not sub_key:
                            # –ü—ã—Ç–∞–µ–º—Å—è —Å–æ–∑–¥–∞—Ç—å sub_key –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ
                            try:
                                sub_key = await db.get_or_create_sub_key(str(user_id))
                            except Exception:
                                await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å sub_key.", reply_markup=keyboard.create_profile_keyboard())
                                return

                        web_url = f"https://swaga.space/subscription/{sub_key}"
                        inline_kb = InlineKeyboardMarkup(inline_keyboard=[
                            [InlineKeyboardButton(text="üì≤ –î–æ–±–∞–≤–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É –≤ V2rayTun", url=web_url)],
                            [InlineKeyboardButton(text="üìã –°–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å —Å—Å—ã–ª–∫—É", callback_data="copy_sub")],
                        ])
                        await message.answer(text, reply_markup=inline_kb, disable_web_page_preview=True)
                        await message.answer("–ü–æ–¥–ø–∏—Å–∫–∞ –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∞ —Å–∞–π—Ç–µ, –≤ —ç—Ç–æ–º —Å–ª—É—á–∞–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å —Å—Å—ã–ª–∫—É –Ω–∞ –ø–æ–¥–ø–∏—Å–∫—É –∏ –≤—Å—Ç–∞–≤–∏—Ç—å –≤ V2rayTun –≤—Ä—É—á–Ω—É—é.")
                        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=keyboard.create_profile_keyboard())
                    else:
                        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –∫–æ–Ω—Ñ–∏–≥–æ–≤", reply_markup=keyboard.create_profile_keyboard())
                else:
                    error_message = await response.json()
                    error_detail = error_message.get('detail', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')
                    if "404" in str(error_detail) or "not found" in str(error_detail).lower():
                        await message.answer("üîç –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –í–æ–∑–º–æ–∂–Ω–æ, —É –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫.", reply_markup=keyboard.create_profile_keyboard())
                    elif "timeout" in str(error_detail).lower():
                        await message.answer("‚è±Ô∏è –°–µ—Ä–≤–µ—Ä—ã –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —á–µ—Ä–µ–∑ 2-3 –º–∏–Ω—É—Ç—ã.", reply_markup=keyboard.create_profile_keyboard())
                    else:
                        await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.", reply_markup=keyboard.create_profile_keyboard())
    except aiohttp.ClientError as e:
        if "timeout" in str(e).lower():
            await message.answer("‚è±Ô∏è –°–µ—Ä–≤–µ—Ä—ã –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —á–µ—Ä–µ–∑ 2-3 –º–∏–Ω—É—Ç—ã.", reply_markup=keyboard.create_profile_keyboard())
        elif "connection" in str(e).lower():
            await message.answer("üåê –ü—Ä–æ–±–ª–µ–º—ã —Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", reply_markup=keyboard.create_profile_keyboard())
        else:
            await message.answer("‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ç–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.", reply_markup=keyboard.create_profile_keyboard())
    except Exception as e:
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.", reply_markup=keyboard.create_profile_keyboard())
