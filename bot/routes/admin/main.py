from aiogram import Router, F, types
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
import logging
import time
from datetime import datetime
import aiohttp
import os
import asyncio
from keyboards import keyboard

logger = logging.getLogger(__name__)

router = Router()

# ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
ADMIN_ID = 746560409

# API –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
API_BASE_URL = "http://fastapi:8080"
AUTH_CODE = os.getenv("AUTH_CODE")

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ AUTH_CODE (—Ç–æ–ª—å–∫–æ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ, –Ω–µ –æ—à–∏–±–∫–∞)
if not AUTH_CODE:
    logger.warning("AUTH_CODE environment variable is not set!")

class AdminStates(StatesGroup):
    waiting_for_message = State()
    waiting_for_notification_type = State()
    waiting_for_user_search = State()
    waiting_for_config_uid = State()
    waiting_for_promo_message = State()

def is_admin(user_id: int) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º."""
    return user_id == ADMIN_ID

@router.message(F.text == "üîß –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å")
async def admin_panel(message: types.Message):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞."""
    try:
        if not is_admin(message.from_user.id):
            await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏.", reply_markup=keyboard.create_keyboard())
            return
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üì¢ –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—Å–µ–º", callback_data="admin_broadcast")],
            [InlineKeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="admin_stats")],
            [InlineKeyboardButton(text="üíµ –î–æ—Ö–æ–¥ (—Ä—É–± / –∑–≤–µ–∑–¥—ã)", callback_data="admin_revenue")],
            [InlineKeyboardButton(text="üîç –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", callback_data="admin_search_user")],
            [InlineKeyboardButton(text="‚öôÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥–∞–º–∏", callback_data="admin_configs")],
            [InlineKeyboardButton(text="üìà –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="admin_detailed_stats")],
            [InlineKeyboardButton(text="üîß –°–∏—Å—Ç–µ–º–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏", callback_data="admin_system")],
            [InlineKeyboardButton(text="üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø–æ–¥–ø–∏—Å–∫–µ", callback_data="admin_notifications")],
        ])
        
        await message.answer(
            "üîß <b>–ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å</b>\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=keyboard,
            parse_mode="HTML"
        )
    except Exception as e:
        logger.error(f"Error in admin_panel: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏.", reply_markup=keyboard.create_keyboard())

@router.callback_query(F.data == "back_to_admin_panel")
async def back_to_admin_panel(callback: types.CallbackQuery):
    """–í–æ–∑–≤—Ä–∞—Ç –∫ –≥–ª–∞–≤–Ω–æ–º—É –º–µ–Ω—é –∞–¥–º–∏–Ω–∫–∏."""
    try:
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üì¢ –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—Å–µ–º", callback_data="admin_broadcast")],
            [InlineKeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="admin_stats")],
            [InlineKeyboardButton(text="üíµ –î–æ—Ö–æ–¥ (—Ä—É–± / –∑–≤–µ–∑–¥—ã)", callback_data="admin_revenue")],
            [InlineKeyboardButton(text="üîç –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", callback_data="admin_search_user")],
            [InlineKeyboardButton(text="‚öôÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥–∞–º–∏", callback_data="admin_configs")],
            [InlineKeyboardButton(text="üìà –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="admin_detailed_stats")],
            [InlineKeyboardButton(text="üîß –°–∏—Å—Ç–µ–º–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏", callback_data="admin_system")],
            [InlineKeyboardButton(text="üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø–æ–¥–ø–∏—Å–∫–µ", callback_data="admin_notifications")],
        ])
        
        await callback.message.edit_text(
            "üîß <b>–ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å</b>\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=keyboard,
            parse_mode="HTML"
        )
        await callback.answer()
    except Exception as e:
        logger.error(f"Error in back_to_admin_panel: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ –∫ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏.")

@router.callback_query(F.data == "back_to_main_admin")
async def back_to_main_admin(callback: types.CallbackQuery):
    """–í–æ–∑–≤—Ä–∞—Ç –∫ –≥–ª–∞–≤–Ω–æ–º—É –º–µ–Ω—é –∞–¥–º–∏–Ω–∫–∏."""
    try:
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üì¢ –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—Å–µ–º", callback_data="admin_broadcast")],
            [InlineKeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="admin_stats")],
            [InlineKeyboardButton(text="üíµ –î–æ—Ö–æ–¥ (—Ä—É–± / –∑–≤–µ–∑–¥—ã)", callback_data="admin_revenue")],
            [InlineKeyboardButton(text="üîç –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", callback_data="admin_search_user")],
            [InlineKeyboardButton(text="‚öôÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥–∞–º–∏", callback_data="admin_configs")],
            [InlineKeyboardButton(text="üìà –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="admin_detailed_stats")],
            [InlineKeyboardButton(text="üîß –°–∏—Å—Ç–µ–º–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏", callback_data="admin_system")],
            [InlineKeyboardButton(text="üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø–æ–¥–ø–∏—Å–∫–µ", callback_data="admin_notifications")],
        ])
        
        await callback.message.edit_text(
            "üîß <b>–ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å</b>\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=keyboard,
            parse_mode="HTML"
        )
        await callback.answer()
    except Exception as e:
        logger.error(f"Error in back_to_main_admin: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ –∫ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏.")

@router.callback_query(F.data == "admin_back_to_main")
async def admin_back_to_main(callback: types.CallbackQuery):
    """–í–æ–∑–≤—Ä–∞—Ç –∫ –≥–ª–∞–≤–Ω–æ–º—É –º–µ–Ω—é –∞–¥–º–∏–Ω–∫–∏."""
    try:
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üì¢ –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—Å–µ–º", callback_data="admin_broadcast")],
            [InlineKeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="admin_stats")],
            [InlineKeyboardButton(text="üíµ –î–æ—Ö–æ–¥ (—Ä—É–± / –∑–≤–µ–∑–¥—ã)", callback_data="admin_revenue")],
            [InlineKeyboardButton(text="üîç –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", callback_data="admin_search_user")],
            [InlineKeyboardButton(text="‚öôÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥–∞–º–∏", callback_data="admin_configs")],
            [InlineKeyboardButton(text="üìà –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="admin_detailed_stats")],
            [InlineKeyboardButton(text="üîß –°–∏—Å—Ç–µ–º–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏", callback_data="admin_system")],
            [InlineKeyboardButton(text="üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø–æ–¥–ø–∏—Å–∫–µ", callback_data="admin_notifications")],
        ])
        
        await callback.message.edit_text(
            "üîß <b>–ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å</b>\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=keyboard,
            parse_mode="HTML"
        )
        await callback.answer()
    except Exception as e:
        logger.error(f"Error in admin_back_to_main: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ –∫ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏.")

@router.callback_query(F.data == "admin_panel")
async def admin_panel_callback(callback: types.CallbackQuery):
    """–í–æ–∑–≤—Ä–∞—Ç –∫ –≥–ª–∞–≤–Ω–æ–º—É –º–µ–Ω—é –∞–¥–º–∏–Ω–∫–∏ —á–µ—Ä–µ–∑ callback."""
    try:
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üì¢ –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—Å–µ–º", callback_data="admin_broadcast")],
            [InlineKeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="admin_stats")],
            [InlineKeyboardButton(text="üíµ –î–æ—Ö–æ–¥ (—Ä—É–± / –∑–≤–µ–∑–¥—ã)", callback_data="admin_revenue")],
            [InlineKeyboardButton(text="üîç –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", callback_data="admin_search_user")],
            [InlineKeyboardButton(text="‚öôÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥–∞–º–∏", callback_data="admin_configs")],
            [InlineKeyboardButton(text="üìà –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="admin_detailed_stats")],
            [InlineKeyboardButton(text="üîß –°–∏—Å—Ç–µ–º–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏", callback_data="admin_system")],
            [InlineKeyboardButton(text="üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø–æ–¥–ø–∏—Å–∫–µ", callback_data="admin_notifications")],
        ])
        
        await callback.message.edit_text(
            "üîß <b>–ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å</b>\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=keyboard,
            parse_mode="HTML"
        )
        await callback.answer()
    except Exception as e:
        logger.error(f"Error in admin_panel_callback: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ –∫ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏.")
