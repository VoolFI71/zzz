from aiogram import Router, F, types
from aiogram.fsm.context import FSMContext
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
import logging
import time
import aiohttp
import asyncio
import os

logger = logging.getLogger(__name__)

router = Router()

# API –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
API_BASE_URL = "http://fastapi:8080"
AUTH_CODE = os.getenv("AUTH_CODE")

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º is_admin –∏–∑ main –º–æ–¥—É–ª—è
from .main import is_admin

@router.callback_query(F.data == "notif")
async def send_notif(callback: types.CallbackQuery, bot):
    if not is_admin(callback.from_user.id):
        await callback.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
        return

    await callback.answer()  # —É–±—Ä–∞—Ç—å "—á–∞—Å–∏–∫–∏" —É –∫–ª–∏–µ–Ω—Ç–∞

    url = f"{API_BASE_URL}/expiring-users"
    headers = {"X-API-Key": AUTH_CODE}
            
    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –∏—Å—Ç–µ–∫–∞—é—â–∏–º–∏ –ø–æ–¥–ø–∏—Å–∫–∞–º–∏
    try:
        async with aiohttp.ClientSession() as session:
            async with session.get(url, headers=headers, timeout=15) as resp:
                if resp.status != 200:
                    text = await resp.text()
                    logger.error(f"/expiring-users returned {resp.status}: {text}")
                    await callback.message.answer(f"–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {resp.status}")
                    return
                data = await resp.json()
    except Exception as e:
        logger.error(f"Error fetching /expiring-users: {e}")
        await callback.message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –∫ —Å–µ—Ä–≤–µ—Ä—É: {e}")
        return

    if not data:
        await callback.message.answer("–ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –ø–æ–¥–ø–∏—Å–∫–æ–π, –∏—Å—Ç–µ–∫–∞—é—â–µ–π –≤ –±–ª–∏–∂–∞–π—à–∏–µ 8 —á–∞—Å–æ–≤.")
        return

    sent = 0
    failed = 0
    invalid = 0

    now = int(time.time())

    for item in data:
        tg = item.get("tg_id")
        te = item.get("time_end")
        if not tg or te is None:
            invalid += 1
            continue

        try:
            te = int(te)
        except (TypeError, ValueError):
            invalid += 1
            continue

        # –≤—ã—á–∏—Å–ª—è–µ–º –æ—Å—Ç–∞–≤—à–∏–µ—Å—è —Å–µ–∫—É–Ω–¥—ã/–º–∏–Ω—É—Ç—ã
        remaining_sec = te - now
        if remaining_sec < 0:
            # –µ—Å–ª–∏ —É–∂–µ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–æ ‚Äî –º–æ–∂–Ω–æ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å –∏–ª–∏ —É–≤–µ–¥–æ–º–∏—Ç—å –∫–∞–∫ "—É–∂–µ –∏—Å—Ç–µ–∫–ª–æ"
            text = "–í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –∫–æ–Ω—Ñ–∏–≥ —É–∂–µ –∏—Å—Ç–µ–∫–ª–∞."
        else:
            minutes = remaining_sec // 60
            # –æ–∫—Ä—É–≥–ª–µ–Ω–∏–µ –≤–≤–µ—Ä—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è "–æ—Å—Ç–∞–ª–æ—Å—å N –º–∏–Ω—É—Ç"
            if remaining_sec % 60:
                minutes += 1
            text = f"üîî –í–Ω–∏–º–∞–Ω–∏–µ! –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –≤–∞—à –∫–æ–Ω—Ñ–∏–≥ –∏—Å—Ç–µ–∫–∞–µ—Ç —á–µ—Ä–µ–∑ {minutes} –º–∏–Ω—É—Ç."

        try:
            await bot.send_message(int(tg), text)
            sent += 1
        except Exception as e:
            logger.warning(f"Failed to send notif to {tg}: {e}")
            failed += 1

        # –Ω–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞, —á—Ç–æ–±—ã –Ω–µ –ø—Ä–µ–≤—ã—à–∞—Ç—å –ª–∏–º–∏—Ç—ã
        await asyncio.sleep(0.05)  # 50ms, —É–≤–µ–ª–∏—á—å—Ç–µ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏

    summary = (
        f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã.\n\n"
        f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {sent}\n"
        f"–ù–µ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ (–æ—à–∏–±–∫–∏): {failed}\n"
        f"–ü—Ä–æ–ø—É—â–µ–Ω–æ (–Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –∑–∞–ø–∏—Å–∏): {invalid}\n"
        f"–í—Å–µ–≥–æ –ø—Ä–æ–≤–µ—Ä–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π: {len(data)}"
    )
    await callback.message.answer(summary)

@router.callback_query(F.data == "admin_notifications")
async def notifications_menu(callback: types.CallbackQuery):
    """–ú–µ–Ω—é —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ç–∏–ø–æ–≤ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –¥–ª—è —É–≤–µ–ª–∏—á–µ–Ω–∏—è –ø—Ä–æ–¥–∞–∂."""
    if not is_admin(callback.from_user.id):
        await callback.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
        return
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚è∞ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ–∫–æ–Ω—á–∞–Ω–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏", callback_data="notif")],
        [InlineKeyboardButton(text="üéØ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –±–µ–∑ –ø–æ–¥–ø–∏—Å–∫–∏ (–ø—Ä–∏–≤–ª–µ—á–µ–Ω–∏–µ)", callback_data="notif_no_sub")],
        [InlineKeyboardButton(text="üß™ –¢–æ–ª—å–∫–æ –ø—Ä–æ–±–Ω–∞—è, –±–µ–∑ –ø–æ–∫—É–ø–æ–∫", callback_data="notif_trial_only")],
        [InlineKeyboardButton(text="üíé –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å –∏—Å—Ç–µ–∫—à–µ–π –ø–æ–¥–ø–∏—Å–∫–æ–π (–≤–æ–∑–≤—Ä–∞—Ç)", callback_data="notif_expired")],
        [InlineKeyboardButton(text="üî• –ê–∫—Ü–∏—è/—Å–∫–∏–¥–∫–∞", callback_data="notif_promo")],
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å", callback_data="admin_panel")],
    ])
    
    await callback.message.edit_text(
        "üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è —É–≤–µ–ª–∏—á–µ–Ω–∏—è –ø—Ä–æ–¥–∞–∂\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Ä–∞—Å—Å—ã–ª–∫–∏:",
        reply_markup=keyboard
    )
    await callback.answer()

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –∏–∑ –¥—Ä—É–≥–∏—Ö –º–æ–¥—É–ª–µ–π
from .statistics import (
    get_users_without_any_subscription,
    get_users_with_expired_subscription,
    get_users_trial_only_no_payments
)

@router.callback_query(F.data == "notif_no_sub")
async def send_no_sub_notification(callback: types.CallbackQuery, bot):
    """–†–∞—Å—Å—ã–ª–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –±–µ–∑ –ø–æ–¥–ø–∏—Å–∫–∏ –¥–ª—è –ø—Ä–∏–≤–ª–µ—á–µ–Ω–∏—è."""
    if not is_admin(callback.from_user.id):
        await callback.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
        return

    await callback.answer()

    try:
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –±–µ–∑ –ø–æ–¥–ø–∏—Å–∫–∏
        user_ids = await get_users_without_any_subscription()
        if not user_ids:
            await callback.message.answer("–ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –±–µ–∑ –ø–æ–¥–ø–∏—Å–∫–∏.")
            return

        message_text = (
            "üëã –ü—Ä–∏–≤–µ—Ç! –ú—ã –∑–∞–º–µ—Ç–∏–ª–∏, —á—Ç–æ –≤—ã –µ—â—ë –Ω–µ –ø–æ–ø—Ä–æ–±–æ–≤–∞–ª–∏ –Ω–∞—à VPN.\n\n"
            "‚ö° –°–µ–π—á–∞—Å —ç—Ç–æ –æ—Å–æ–±–µ–Ω–Ω–æ –∞–∫—Ç—É–∞–ª—å–Ω–æ: –Ω–∞—à VPN –ø–æ–º–æ–≥–∞–µ—Ç –æ–±—Ö–æ–¥–∏—Ç—å –æ—Ç–∫–ª—é—á–µ–Ω–∏—è –º–æ–±–∏–ª—å–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞ —É –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤ –¢–µ–ª–µ2, –ú–¢–° –∏ –ô–û–¢–ê.\n"
            "–î–∞–∂–µ –∫–æ–≥–¥–∞ —Å–≤—è–∑—å —Ä–µ–∂—É—Ç, –≤—ã —Å–º–æ–∂–µ—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–æ–º.\n\n"
            "üéÅ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –±–µ—Å–ø–ª–∞—Ç–Ω–æ 3 –¥–Ω—è ‚Äî –Ω–∏–∫–∞–∫–∏—Ö –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π!\n\n"
            "–° –ø–æ–¥–ø–∏—Å–∫–æ–π –≤—ã –ø–æ–ª—É—á–∞–µ—Ç–µ:\n"
            "‚Ä¢ üîê –ö–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å –∏ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ —Ç—Ä–∞—Ñ–∏–∫–∞\n"
            "‚Ä¢ ‚ôæÔ∏è –ë–µ–∑–ª–∏–º–∏—Ç–Ω—ã–π —Ç—Ä–∞—Ñ–∏–∫\n"
            "‚Ä¢ üöÄ –°—Ç–∞–±–∏–ª—å–Ω–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å –∏ –±—ã—Å—Ç—Ä—ã–µ —Å–µ—Ä–≤–µ—Ä–∞\n"
            "‚Ä¢ üõü –ü–æ–¥–¥–µ—Ä–∂–∫–∞, –µ—Å–ª–∏ —á—Ç–æ-—Ç–æ –ø–æ–π–¥—ë—Ç –Ω–µ —Ç–∞–∫\n\n"
            "–ì–æ—Ç–æ–≤—ã –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å? –û—Ç–∫—Ä–æ–π—Ç–µ /start –∏ –∞–∫—Ç–∏–≤–∏—Ä—É–π—Ç–µ –ø—Ä–æ–±–Ω—É—é –ø–æ–¥–ø–∏—Å–∫—É. –ï—Å–ª–∏ –æ—Å—Ç–∞–ª–∏—Å—å –≤–æ–ø—Ä–æ—Å—ã ‚Äî –Ω–∞–ø–∏—à–∏—Ç–µ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É, –ø–æ–º–æ–∂–µ–º."
        )

        sent = 0
        failed = 0
        for uid in user_ids:
            try:
                await bot.send_message(uid, message_text, disable_web_page_preview=True)
                sent += 1
                await asyncio.sleep(0.1)  # –ü–∞—É–∑–∞ –º–µ–∂–¥—É –æ—Ç–ø—Ä–∞–≤–∫–∞–º–∏
            except Exception as e:
                logger.warning(f"Failed to send to {uid}: {e}")
                failed += 1

        await callback.message.answer(
            f"‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n\n"
            f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {sent}\n"
            f"–ù–µ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ: {failed}\n"
            f"–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(user_ids)}"
        )

    except Exception as e:
        logger.error(f"Error in send_no_sub_notification: {e}")
        await callback.message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—Å—ã–ª–∫–µ: {e}")

@router.callback_query(F.data == "notif_expired")
async def send_expired_notification(callback: types.CallbackQuery, bot):
    """–†–∞—Å—Å—ã–ª–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º —Å –∏—Å—Ç–µ–∫—à–µ–π –ø–æ–¥–ø–∏—Å–∫–æ–π –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞."""
    if not is_admin(callback.from_user.id):
        await callback.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
        return

    await callback.answer()

    try:
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –∏—Å—Ç–µ–∫—à–µ–π –ø–æ–¥–ø–∏—Å–∫–æ–π
        user_ids = await get_users_with_expired_subscription()
        if not user_ids:
            await callback.message.answer("–ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –∏—Å—Ç–µ–∫—à–µ–π –ø–æ–¥–ø–∏—Å–∫–æ–π.")
            return

        message_text = (
            "üëã –ü—Ä–∏–≤–µ—Ç! –ú—ã –∑–∞–º–µ—Ç–∏–ª–∏, —á—Ç–æ –≤–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –∏—Å—Ç–µ–∫–ª–∞.\n\n"
            "‚ö° –°–µ–π—á–∞—Å –Ω–∞—à VPN –æ—Å–æ–±–µ–Ω–Ω–æ –∞–∫—Ç—É–∞–ª–µ–Ω: –ø–æ–º–æ–≥–∞–µ—Ç –æ–±—Ö–æ–¥–∏—Ç—å –æ—Ç–∫–ª—é—á–µ–Ω–∏—è –º–æ–±–∏–ª—å–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞ —É –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤ –¢–µ–ª–µ2, –ú–¢–° –∏ –ô–û–¢–ê.\n"
            "–î–∞–∂–µ –∫–æ–≥–¥–∞ —Å–≤—è–∑—å —Ä–µ–∂—É—Ç, –≤—ã —Å–º–æ–∂–µ—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–æ–º.\n\n"
            "üî• –°–ø–µ—Ü–∏–∞–ª—å–Ω–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞:\n"
            "‚Ä¢ üéÅ –°–∫–∏–¥–∫–∞ 20% –Ω–∞ –ø–µ—Ä–≤—ã–π –º–µ—Å—è—Ü\n"
            "‚Ä¢ üöÄ –£–ª—É—á—à–µ–Ω–Ω–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å –∏ —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å\n"
            "‚Ä¢ üõü –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞\n\n"
            "–ì–æ—Ç–æ–≤—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è? –û—Ç–∫—Ä–æ–π—Ç–µ /start –∏ –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–∞—Ä–∏—Ñ. –ï—Å–ª–∏ –æ—Å—Ç–∞–ª–∏—Å—å –≤–æ–ø—Ä–æ—Å—ã ‚Äî –Ω–∞–ø–∏—à–∏—Ç–µ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É, –ø–æ–º–æ–∂–µ–º."
        )

        sent = 0
        failed = 0
        for uid in user_ids:
            try:
                await bot.send_message(uid, message_text, disable_web_page_preview=True)
                sent += 1
                await asyncio.sleep(0.1)  # –ü–∞—É–∑–∞ –º–µ–∂–¥—É –æ—Ç–ø—Ä–∞–≤–∫–∞–º–∏
            except Exception as e:
                logger.warning(f"Failed to send to {uid}: {e}")
                failed += 1

        await callback.message.answer(
            f"‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n\n"
            f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {sent}\n"
            f"–ù–µ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ: {failed}\n"
            f"–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(user_ids)}"
        )

    except Exception as e:
        logger.error(f"Error in send_expired_notification: {e}")
        await callback.message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—Å—ã–ª–∫–µ: {e}")

@router.callback_query(F.data == "notif_promo")
async def send_promo_notification(callback: types.CallbackQuery, state: FSMContext):
    """–†–∞—Å—Å—ã–ª–∫–∞ –ø—Ä–æ–º–æ-—Å–æ–æ–±—â–µ–Ω–∏—è."""
    if not is_admin(callback.from_user.id):
        await callback.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
        return

    await callback.answer()
    await state.set_state("waiting_for_promo_message")
    await callback.message.edit_text(
        "üìù –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –ø—Ä–æ–º–æ-—Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏:"
    )

@router.callback_query(F.data == "notif_trial_only")
async def send_trial_only_notification(callback: types.CallbackQuery, bot):
    """–†–∞—Å—Å—ã–ª–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º, –∫—Ç–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–ª –ø—Ä–æ–±–Ω—É—é, –Ω–æ –Ω–µ —Å–æ–≤–µ—Ä—à–∞–ª –æ–ø–ª–∞—Ç—É.

    –¢–µ–∫—Å—Ç –≤–∫–ª—é—á–∞–µ—Ç: –æ–±—Ö–æ–¥ –æ—Ç–∫–ª—é—á–µ–Ω–∏–π –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞ –Ω–∞ –¢–µ–ª–µ2/–ú–¢–°/–ô–æ—Ç–∞ + –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞.
    """
    if not is_admin(callback.from_user.id):
        await callback.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
        return

    await callback.answer()

    try:
        user_ids = await get_users_trial_only_no_payments()
        if not user_ids:
            await callback.message.answer("–ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∫–æ—Ç–æ—Ä—ã–µ —Ç–æ–ª—å–∫–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–ª–∏ –ø—Ä–æ–±–Ω—É—é, –Ω–æ –Ω–µ –ø–æ–∫—É–ø–∞–ª–∏.")
            return

        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞: –∏—Å–∫–ª—é—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –∞–∫—Ç–∏–≤–Ω—ã–º–∏ –ø–æ–¥–ø–∏—Å–∫–∞–º–∏
        from .statistics import get_users_with_active_subscription
        active_users = await get_users_with_active_subscription()
        active_user_ids = set(active_users)
        
        # –§–∏–ª—å—Ç—Ä—É–µ–º —Å–ø–∏—Å–æ–∫, –∏—Å–∫–ª—é—á–∞—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –∞–∫—Ç–∏–≤–Ω—ã–º–∏ –ø–æ–¥–ø–∏—Å–∫–∞–º–∏
        filtered_user_ids = [uid for uid in user_ids if str(uid) not in active_user_ids]
        
        if not filtered_user_ids:
            await callback.message.answer("–ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ (–≤—Å–µ –∏–º–µ—é—Ç –∞–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–¥–ø–∏—Å–∫–∏).")
            return

        message_text = (
            "üëã –ü—Ä–∏–≤–µ—Ç! –ù–∞–ø–æ–º–∏–Ω–∞–µ–º, —á—Ç–æ –ø–æ—Å–ª–µ –ø—Ä–æ–±–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏ –≤—ã –µ—â—ë –Ω–µ –æ—Ñ–æ—Ä–º–∏–ª–∏ –ø–æ–ª–Ω—ã–π –¥–æ—Å—Ç—É–ø.\n\n"
            "‚ö° –í–∞–∂–Ω–æ–µ —Å–µ–π—á–∞—Å: –Ω–∞—à VPN –ø–æ–º–æ–≥–∞–µ—Ç –æ–±—Ö–æ–¥–∏—Ç—å –æ—Ç–∫–ª—é—á–µ–Ω–∏—è –º–æ–±–∏–ª—å–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞ —É –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤ –¢–µ–ª–µ2, –ú–¢–° –∏ –ô–û–¢–ê.\n"
            "–î–∞–∂–µ –∫–æ–≥–¥–∞ —Å–≤—è–∑—å —Ä–µ–∂—É—Ç, –≤—ã —Å–º–æ–∂–µ—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–æ–º.\n\n"
            "–° –ø–æ–¥–ø–∏—Å–∫–æ–π –≤—ã –ø–æ–ª—É—á–∞–µ—Ç–µ:\n"
            "‚Ä¢ üîê –ö–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å –∏ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ —Ç—Ä–∞—Ñ–∏–∫–∞\n"
            "‚Ä¢ ‚ôæÔ∏è –ë–µ–∑–ª–∏–º–∏—Ç–Ω—ã–π —Ç—Ä–∞—Ñ–∏–∫\n"
            "‚Ä¢ üöÄ –°—Ç–∞–±–∏–ª—å–Ω–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å –∏ –±—ã—Å—Ç—Ä—ã–µ —Å–µ—Ä–≤–µ—Ä–∞\n"
            "‚Ä¢ üõü –ü–æ–¥–¥–µ—Ä–∂–∫–∞, –µ—Å–ª–∏ —á—Ç–æ-—Ç–æ –ø–æ–π–¥—ë—Ç –Ω–µ —Ç–∞–∫\n\n"
            "–ì–æ—Ç–æ–≤—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å? –û—Ç–∫—Ä–æ–π—Ç–µ /start –∏ –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–∞—Ä–∏—Ñ. –ï—Å–ª–∏ –æ—Å—Ç–∞–ª–∏—Å—å –≤–æ–ø—Ä–æ—Å—ã ‚Äî –Ω–∞–ø–∏—à–∏—Ç–µ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É, –ø–æ–º–æ–∂–µ–º."
        )

        sent = 0
        failed = 0
        for uid in filtered_user_ids:
            try:
                await bot.send_message(uid, message_text, disable_web_page_preview=True)
                sent += 1
                await asyncio.sleep(0.1)  # –ü–∞—É–∑–∞ –º–µ–∂–¥—É –æ—Ç–ø—Ä–∞–≤–∫–∞–º–∏
            except Exception as e:
                logger.warning(f"Failed to send to {uid}: {e}")
                failed += 1

        await callback.message.answer(
            f"‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n\n"
            f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {sent}\n"
            f"–ù–µ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ: {failed}\n"
            f"–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(filtered_user_ids)}"
        )

    except Exception as e:
        logger.error(f"Error in send_trial_only_notification: {e}")
        await callback.message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—Å—ã–ª–∫–µ: {e}")
