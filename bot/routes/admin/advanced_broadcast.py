"""
–ü—Ä–æ–¥–≤–∏–Ω—É—Ç–∞—è —Å–∏—Å—Ç–µ–º–∞ —Ä–∞—Å—Å—ã–ª–æ–∫ –¥–ª—è –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏
"""
from aiogram import Router, F, types
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
import logging
from services.broadcast_service import BroadcastService, BroadcastStatus

logger = logging.getLogger(__name__)
router = Router()

class AdvancedBroadcastStates(StatesGroup):
    waiting_for_campaign_name = State()
    waiting_for_campaign_text = State()
    waiting_for_segment_selection = State()
    waiting_for_parse_mode = State()
    waiting_for_reply_markup = State()

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º is_admin –∏–∑ main –º–æ–¥—É–ª—è
from .main import is_admin

# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Å–µ—Ä–≤–∏—Å–∞ —Ä–∞—Å—Å—ã–ª–æ–∫
broadcast_service: BroadcastService = None

def init_broadcast_service(bot):
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–∞ —Ä–∞—Å—Å—ã–ª–æ–∫"""
    global broadcast_service
    broadcast_service = BroadcastService(bot)
    return broadcast_service

@router.callback_query(F.data == "admin_advanced_broadcast")
async def advanced_broadcast_menu(callback: types.CallbackQuery):
    """–ú–µ–Ω—é –ø—Ä–æ–¥–≤–∏–Ω—É—Ç–æ–π —Å–∏—Å—Ç–µ–º—ã —Ä–∞—Å—Å—ã–ª–æ–∫"""
    if not is_admin(callback.from_user.id):
        await callback.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
        return
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üìù –°–æ–∑–¥–∞—Ç—å –∫–∞–º–ø–∞–Ω–∏—é", callback_data="create_campaign")],
        [InlineKeyboardButton(text="üìä –ê–∫—Ç–∏–≤–Ω—ã–µ –∫–∞–º–ø–∞–Ω–∏–∏", callback_data="active_campaigns")],
        [InlineKeyboardButton(text="üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–∞–º–ø–∞–Ω–∏–π", callback_data="campaign_stats")],
        [InlineKeyboardButton(text="üéØ –°–µ–≥–º–µ–Ω—Ç–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", callback_data="user_segments")],
        [InlineKeyboardButton(text="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–∞—Å—Å—ã–ª–æ–∫", callback_data="broadcast_settings")],
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_admin_panel")]
    ])
    
    await callback.message.edit_text(
        "üì¢ <b>–ü—Ä–æ–¥–≤–∏–Ω—É—Ç–∞—è —Å–∏—Å—Ç–µ–º–∞ —Ä–∞—Å—Å—ã–ª–æ–∫</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=keyboard,
        parse_mode="HTML"
    )
    await callback.answer()

@router.callback_query(F.data == "create_campaign")
async def create_campaign_start(callback: types.CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞–ª–æ —Å–æ–∑–¥–∞–Ω–∏—è –∫–∞–º–ø–∞–Ω–∏–∏"""
    if not is_admin(callback.from_user.id):
        await callback.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
        return
    
    await callback.message.edit_text(
        "üìù <b>–°–æ–∑–¥–∞–Ω–∏–µ –∫–∞–º–ø–∞–Ω–∏–∏ —Ä–∞—Å—Å—ã–ª–∫–∏</b>\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞–º–ø–∞–Ω–∏–∏:",
        parse_mode="HTML"
    )
    await state.set_state(AdvancedBroadcastStates.waiting_for_campaign_name)
    await callback.answer()

@router.message(AdvancedBroadcastStates.waiting_for_campaign_name)
async def process_campaign_name(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∑–≤–∞–Ω–∏—è –∫–∞–º–ø–∞–Ω–∏–∏"""
    if not is_admin(message.from_user.id):
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
        await state.clear()
        return
    
    campaign_name = message.text.strip()
    if not campaign_name:
        await message.answer("–ù–∞–∑–≤–∞–Ω–∏–µ –∫–∞–º–ø–∞–Ω–∏–∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:")
        return
    
    await state.update_data(campaign_name=campaign_name)
    await message.answer(
        "üìù <b>–°–æ–∑–¥–∞–Ω–∏–µ –∫–∞–º–ø–∞–Ω–∏–∏ —Ä–∞—Å—Å—ã–ª–∫–∏</b>\n\n"
        f"–ù–∞–∑–≤–∞–Ω–∏–µ: <b>{campaign_name}</b>\n\n"
        "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏:",
        parse_mode="HTML"
    )
    await state.set_state(AdvancedBroadcastStates.waiting_for_campaign_text)

@router.message(AdvancedBroadcastStates.waiting_for_campaign_text)
async def process_campaign_text(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞ –∫–∞–º–ø–∞–Ω–∏–∏"""
    if not is_admin(message.from_user.id):
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
        await state.clear()
        return
    
    campaign_text = message.text.strip()
    if not campaign_text:
        await message.answer("–¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:")
        return
    
    await state.update_data(campaign_text=campaign_text)
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–µ–≥–º–µ–Ω—Ç—ã –¥–ª—è –≤—ã–±–æ—Ä–∞
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üë• –í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏", callback_data="segment_all")],
        [InlineKeyboardButton(text="‚úÖ –ê–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–¥–ø–∏—Å—á–∏–∫–∏", callback_data="segment_active")],
        [InlineKeyboardButton(text="üß™ –¢–æ–ª—å–∫–æ –ø—Ä–æ–±–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞", callback_data="segment_trial_only")],
        [InlineKeyboardButton(text="‚è∞ –ò—Å—Ç–µ–∫—à–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏", callback_data="segment_expired")],
        [InlineKeyboardButton(text="‚ùå –ë–µ–∑ –ø–æ–¥–ø–∏—Å–∫–∏", callback_data="segment_no_subscription")],
        [InlineKeyboardButton(text="ü§ù –° —Ä–µ—Ñ–µ—Ä–∞–ª–∞–º–∏", callback_data="segment_with_referrals")],
        [InlineKeyboardButton(text="üíé VIP –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏", callback_data="segment_vip")],
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="admin_advanced_broadcast")]
    ])
    
    await message.answer(
        "üìù <b>–°–æ–∑–¥–∞–Ω–∏–µ –∫–∞–º–ø–∞–Ω–∏–∏ —Ä–∞—Å—Å—ã–ª–∫–∏</b>\n\n"
        f"–ù–∞–∑–≤–∞–Ω–∏–µ: <b>{message.text[:50]}{'...' if len(message.text) > 50 else ''}</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —Å–µ–≥–º–µ–Ω—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏:",
        reply_markup=keyboard,
        parse_mode="HTML"
    )

@router.callback_query(F.data.startswith("segment_"))
async def process_segment_selection(callback: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Å–µ–≥–º–µ–Ω—Ç–∞"""
    if not is_admin(callback.from_user.id):
        await callback.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
        return
    
    segment = callback.data.replace("segment_", "")
    segment_names = {
        "all": "–í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏",
        "active": "–ê–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–¥–ø–∏—Å—á–∏–∫–∏", 
        "trial_only": "–¢–æ–ª—å–∫–æ –ø—Ä–æ–±–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞",
        "expired": "–ò—Å—Ç–µ–∫—à–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏",
        "no_subscription": "–ë–µ–∑ –ø–æ–¥–ø–∏—Å–∫–∏",
        "with_referrals": "–° —Ä–µ—Ñ–µ—Ä–∞–ª–∞–º–∏",
        "vip": "VIP –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏"
    }
    
    await state.update_data(target_segment=segment)
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üìù –û–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç", callback_data="parse_mode_none")],
        [InlineKeyboardButton(text="üî§ Markdown", callback_data="parse_mode_markdown")],
        [InlineKeyboardButton(text="üìÑ HTML", callback_data="parse_mode_html")],
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="create_campaign")]
    ])
    
    await callback.message.edit_text(
        "üìù <b>–°–æ–∑–¥–∞–Ω–∏–µ –∫–∞–º–ø–∞–Ω–∏–∏ —Ä–∞—Å—Å—ã–ª–∫–∏</b>\n\n"
        f"–°–µ–≥–º–µ–Ω—Ç: <b>{segment_names.get(segment, segment)}</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–∞:",
        reply_markup=keyboard,
        parse_mode="HTML"
    )

@router.callback_query(F.data.startswith("parse_mode_"))
async def process_parse_mode(callback: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ä–µ–∂–∏–º–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    if not is_admin(callback.from_user.id):
        await callback.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
        return
    
    parse_mode = callback.data.replace("parse_mode_", "")
    if parse_mode == "none":
        parse_mode = None
    
    await state.update_data(parse_mode=parse_mode)
    
    # –°–æ–∑–¥–∞–µ–º –∫–∞–º–ø–∞–Ω–∏—é
    user_data = await state.get_data()
    
    try:
        campaign_id = await broadcast_service.create_campaign(
            name=user_data["campaign_name"],
            text=user_data["campaign_text"],
            target_segment=user_data["target_segment"],
            parse_mode=parse_mode
        )
        
        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ —Å–µ–≥–º–µ–Ω—Ç–µ
        user_ids = await broadcast_service.get_users_by_segment(user_data["target_segment"])
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å –∫–∞–º–ø–∞–Ω–∏—é", callback_data=f"start_campaign_{campaign_id}")],
            [InlineKeyboardButton(text="‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data=f"edit_campaign_{campaign_id}")],
            [InlineKeyboardButton(text="‚ùå –£–¥–∞–ª–∏—Ç—å", callback_data=f"delete_campaign_{campaign_id}")],
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="admin_advanced_broadcast")]
        ])
        
        await callback.message.edit_text(
            "‚úÖ <b>–ö–∞–º–ø–∞–Ω–∏—è —Å–æ–∑–¥–∞–Ω–∞!</b>\n\n"
            f"üìù –ù–∞–∑–≤–∞–Ω–∏–µ: <b>{user_data['campaign_name']}</b>\n"
            f"üë• –°–µ–≥–º–µ–Ω—Ç: <b>{user_data['target_segment']}</b>\n"
            f"üìä –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: <b>{len(user_ids)}</b>\n"
            f"üìù –§–æ—Ä–º–∞—Ç: <b>{parse_mode or '–û–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç'}</b>\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=keyboard,
            parse_mode="HTML"
        )
        
    except Exception as e:
        logger.error(f"Error creating campaign: {e}")
        await callback.message.edit_text(
            f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–∞–º–ø–∞–Ω–∏–∏: {str(e)}"
        )
    
    await state.clear()
    await callback.answer()

@router.callback_query(F.data.startswith("start_campaign_"))
async def start_campaign(callback: types.CallbackQuery):
    """–ó–∞–ø—É—Å–∫ –∫–∞–º–ø–∞–Ω–∏–∏"""
    if not is_admin(callback.from_user.id):
        await callback.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
        return
    
    campaign_id = callback.data.replace("start_campaign_", "")
    
    try:
        success = await broadcast_service.start_campaign(campaign_id)
        if success:
            await callback.message.edit_text(
                "üöÄ <b>–ö–∞–º–ø–∞–Ω–∏—è –∑–∞–ø—É—â–µ–Ω–∞!</b>\n\n"
                "–†–∞—Å—Å—ã–ª–∫–∞ –Ω–∞—á–∞–ª–∞—Å—å. –í—ã –º–æ–∂–µ—Ç–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å –≤ —Ä–∞–∑–¥–µ–ª–µ '–ê–∫—Ç–∏–≤–Ω—ã–µ –∫–∞–º–ø–∞–Ω–∏–∏'.",
                parse_mode="HTML"
            )
        else:
            await callback.message.edit_text(
                "‚ùå <b>–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –∫–∞–º–ø–∞–Ω–∏–∏</b>\n\n"
                "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –∫–∞–º–ø–∞–Ω–∏—é. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏.",
                parse_mode="HTML"
            )
    except Exception as e:
        logger.error(f"Error starting campaign: {e}")
        await callback.message.edit_text(
            f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –∫–∞–º–ø–∞–Ω–∏–∏: {str(e)}"
        )
    
    await callback.answer()

@router.callback_query(F.data == "active_campaigns")
async def show_active_campaigns(callback: types.CallbackQuery):
    """–ü–æ–∫–∞–∑ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–∞–º–ø–∞–Ω–∏–π"""
    if not is_admin(callback.from_user.id):
        await callback.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
        return
    
    try:
        campaigns = []
        for campaign_id, campaign in broadcast_service.active_campaigns.items():
            if campaign.status == BroadcastStatus.SENDING:
                stats = await broadcast_service.get_campaign_stats(campaign_id)
                campaigns.append(stats)
        
        if not campaigns:
            await callback.message.edit_text(
                "üìä <b>–ê–∫—Ç–∏–≤–Ω—ã–µ –∫–∞–º–ø–∞–Ω–∏–∏</b>\n\n"
                "–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–∞–º–ø–∞–Ω–∏–π.",
                parse_mode="HTML"
            )
            return
        
        text = "üìä <b>–ê–∫—Ç–∏–≤–Ω—ã–µ –∫–∞–º–ø–∞–Ω–∏–∏</b>\n\n"
        keyboard_buttons = []
        
        for campaign in campaigns:
            progress = campaign["progress"]
            text += (
                f"üìù <b>{campaign['name']}</b>\n"
                f"üìä –ü—Ä–æ–≥—Ä–µ—Å—Å: {progress:.1f}%\n"
                f"‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {campaign['sent_count']}\n"
                f"‚ùå –û—à–∏–±–æ–∫: {campaign['failed_count']}\n"
                f"üö´ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ: {campaign['blocked_count']}\n\n"
            )
            
            keyboard_buttons.append([
                InlineKeyboardButton(
                    text=f"‚èπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å {campaign['name'][:20]}", 
                    callback_data=f"stop_campaign_{campaign['id']}"
                )
            ])
        
        keyboard_buttons.append([InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="admin_advanced_broadcast")])
        keyboard = InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)
        
        await callback.message.edit_text(text, reply_markup=keyboard, parse_mode="HTML")
        
    except Exception as e:
        logger.error(f"Error showing active campaigns: {e}")
        await callback.message.edit_text(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
    
    await callback.answer()

@router.callback_query(F.data.startswith("stop_campaign_"))
async def stop_campaign(callback: types.CallbackQuery):
    """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–∞–º–ø–∞–Ω–∏–∏"""
    if not is_admin(callback.from_user.id):
        await callback.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
        return
    
    campaign_id = callback.data.replace("stop_campaign_", "")
    
    try:
        success = await broadcast_service.stop_campaign(campaign_id)
        if success:
            await callback.message.edit_text(
                "‚èπÔ∏è <b>–ö–∞–º–ø–∞–Ω–∏—è –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞</b>\n\n"
                "–†–∞—Å—Å—ã–ª–∫–∞ –±—ã–ª–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞.",
                parse_mode="HTML"
            )
        else:
            await callback.message.edit_text(
                "‚ùå <b>–û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –∫–∞–º–ø–∞–Ω–∏–∏</b>\n\n"
                "–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∫–∞–º–ø–∞–Ω–∏—é.",
                parse_mode="HTML"
            )
    except Exception as e:
        logger.error(f"Error stopping campaign: {e}")
        await callback.message.edit_text(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
    
    await callback.answer()

@router.callback_query(F.data == "campaign_stats")
async def show_campaign_stats(callback: types.CallbackQuery):
    """–ü–æ–∫–∞–∑ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫–∞–º–ø–∞–Ω–∏–π"""
    if not is_admin(callback.from_user.id):
        await callback.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
        return
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–∑ –ë–î
        import aiosqlite
        async with aiosqlite.connect("users.db") as conn:
            async with conn.cursor() as cursor:
                await cursor.execute("""
                    SELECT name, status, total_users, sent_count, failed_count, blocked_count, 
                           created_at, started_at, completed_at
                    FROM broadcast_campaigns 
                    ORDER BY created_at DESC 
                    LIMIT 10
                """)
                campaigns = await cursor.fetchall()
        
        if not campaigns:
            await callback.message.edit_text(
                "üìà <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–∞–º–ø–∞–Ω–∏–π</b>\n\n"
                "–ù–µ—Ç —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –∫–∞–º–ø–∞–Ω–∏–π.",
                parse_mode="HTML"
            )
            return
        
        text = "üìà <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–∞–º–ø–∞–Ω–∏–π</b>\n\n"
        
        for campaign in campaigns:
            name, status, total, sent, failed, blocked, created, started, completed = campaign
            
            # –í—ã—á–∏—Å–ª—è–µ–º –∫–æ–Ω–≤–µ—Ä—Å–∏—é
            conversion = (sent / total * 100) if total > 0 else 0
            
            # –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
            duration = ""
            if started and completed:
                duration = f"{(completed - started) / 60:.1f} –º–∏–Ω"
            elif started:
                duration = "–í –ø—Ä–æ—Ü–µ—Å—Å–µ"
            
            text += (
                f"üìù <b>{name}</b>\n"
                f"üìä –°—Ç–∞—Ç—É—Å: {status}\n"
                f"üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total}\n"
                f"‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {sent} ({conversion:.1f}%)\n"
                f"‚ùå –û—à–∏–±–æ–∫: {failed}\n"
                f"üö´ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ: {blocked}\n"
                f"‚è±Ô∏è –í—Ä–µ–º—è: {duration}\n\n"
            )
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="admin_advanced_broadcast")]
        ])
        
        await callback.message.edit_text(text, reply_markup=keyboard, parse_mode="HTML")
        
    except Exception as e:
        logger.error(f"Error showing campaign stats: {e}")
        await callback.message.edit_text(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
    
    await callback.answer()

@router.callback_query(F.data == "user_segments")
async def show_user_segments(callback: types.CallbackQuery):
    """–ü–æ–∫–∞–∑ —Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    if not is_admin(callback.from_user.id):
        await callback.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
        return
    
    try:
        segments = {
            "all": "–í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏",
            "active": "–ê–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–¥–ø–∏—Å—á–∏–∫–∏",
            "trial_only": "–¢–æ–ª—å–∫–æ –ø—Ä–æ–±–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞", 
            "expired": "–ò—Å—Ç–µ–∫—à–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏",
            "no_subscription": "–ë–µ–∑ –ø–æ–¥–ø–∏—Å–∫–∏",
            "with_referrals": "–° —Ä–µ—Ñ–µ—Ä–∞–ª–∞–º–∏",
            "vip": "VIP –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏"
        }
        
        text = "üéØ <b>–°–µ–≥–º–µ–Ω—Ç–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π</b>\n\n"
        
        for segment_key, segment_name in segments.items():
            user_ids = await broadcast_service.get_users_by_segment(segment_key)
            text += f"üë• <b>{segment_name}</b>: {len(user_ids)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n"
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="admin_advanced_broadcast")]
        ])
        
        await callback.message.edit_text(text, reply_markup=keyboard, parse_mode="HTML")
        
    except Exception as e:
        logger.error(f"Error showing user segments: {e}")
        await callback.message.edit_text(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
    
    await callback.answer()

@router.callback_query(F.data == "broadcast_settings")
async def show_broadcast_settings(callback: types.CallbackQuery):
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–∏—Å—Ç–µ–º—ã —Ä–∞—Å—Å—ã–ª–æ–∫"""
    if not is_admin(callback.from_user.id):
        await callback.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
        return
    
    text = (
        "‚öôÔ∏è <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–∏—Å—Ç–µ–º—ã —Ä–∞—Å—Å—ã–ª–æ–∫</b>\n\n"
        f"üì¶ –†–∞–∑–º–µ—Ä –±–∞—Ç—á–∞: {broadcast_service.batch_size} —Å–æ–æ–±—â–µ–Ω–∏–π\n"
        f"‚è±Ô∏è –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –±–∞—Ç—á–∞–º–∏: {broadcast_service.delay_between_batches} —Å–µ–∫\n"
        f"üîÑ –ú–∞–∫—Å–∏–º—É–º –ø–æ–ø—ã—Ç–æ–∫: {broadcast_service.max_retries}\n"
        f"‚è≥ –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –ø–æ–ø—ã—Ç–∫–∞–º–∏: {broadcast_service.retry_delay} —Å–µ–∫\n"
        f"üîÑ –°—Ç–∞—Ç—É—Å –æ–±—Ä–∞–±–æ—Ç–∫–∏: {'–ê–∫—Ç–∏–≤–Ω–∞' if broadcast_service.is_running else '–û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞'}\n\n"
        "–≠—Ç–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –º–æ–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å –≤ –∫–æ–¥–µ —Å–µ—Ä–≤–∏—Å–∞ —Ä–∞—Å—Å—ã–ª–æ–∫."
    )
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="admin_advanced_broadcast")]
    ])
    
    await callback.message.edit_text(text, reply_markup=keyboard, parse_mode="HTML")
    await callback.answer()

