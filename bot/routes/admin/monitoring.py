"""
–ú–æ–¥—É–ª—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –¥–ª—è –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏
"""
from aiogram import Router, F, types
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
import logging
import time
from datetime import datetime, timedelta

logger = logging.getLogger(__name__)
router = Router()

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º is_admin –∏–∑ main –º–æ–¥—É–ª—è
from .main import is_admin

# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Å–µ—Ä–≤–∏—Å–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
monitoring_service = None

def init_monitoring_service(service):
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
    global monitoring_service
    monitoring_service = service
    return monitoring_service

@router.callback_query(F.data == "admin_monitoring")
async def monitoring_dashboard(callback: types.CallbackQuery):
    """–î–∞—à–±–æ—Ä–¥ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
    if not is_admin(callback.from_user.id):
        await callback.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
        return
    
    if not monitoring_service:
        await callback.message.edit_text(
            "‚ùå <b>–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω</b>\n\n"
            "–°–µ—Ä–≤–∏—Å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω.",
            parse_mode="HTML"
        )
        await callback.answer()
        return
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã
        system_status = await monitoring_service.get_system_status()
        bot_metrics = await monitoring_service.get_bot_metrics()
        alerts = await monitoring_service.get_alerts()
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç–∞—Ç—É—Å
        status_emoji = {
            "healthy": "‚úÖ",
            "warning": "‚ö†Ô∏è", 
            "critical": "üö®",
            "unknown": "‚ùì"
        }
        
        status_emoji_str = status_emoji.get(system_status["status"], "‚ùì")
        
        text = f"üìä <b>–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–∏—Å—Ç–µ–º—ã</b>\n\n"
        text += f"{status_emoji_str} <b>–°—Ç–∞—Ç—É—Å:</b> {system_status['status'].upper()}\n"
        text += f"üìù <b>–°–æ–æ–±—â–µ–Ω–∏–µ:</b> {system_status['message']}\n\n"
        
        # –°–∏—Å—Ç–µ–º–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
        if "system_metrics" in system_status:
            metrics = system_status["system_metrics"]
            text += f"üíª <b>–°–∏—Å—Ç–µ–º–Ω—ã–µ —Ä–µ—Å—É—Ä—Å—ã:</b>\n"
            text += f"‚Ä¢ CPU: {metrics['cpu_percent']:.1f}%\n"
            text += f"‚Ä¢ RAM: {metrics['memory_percent']:.1f}% ({metrics['memory_used_mb']:.1f} MB)\n"
            text += f"‚Ä¢ –î–∏—Å–∫: {metrics['disk_usage_percent']:.1f}%\n\n"
        
        # –ú–µ—Ç—Ä–∏–∫–∏ –±–æ—Ç–∞
        if bot_metrics.get("status") != "no_data":
            text += f"ü§ñ <b>–ú–µ—Ç—Ä–∏–∫–∏ –±–æ—Ç–∞:</b>\n"
            text += f"‚Ä¢ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {bot_metrics['total_users']}\n"
            text += f"‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö (24—á): {bot_metrics['active_users_24h']}\n"
            text += f"‚Ä¢ –ù–æ–≤—ã—Ö —Å–µ–≥–æ–¥–Ω—è: {bot_metrics['new_users_today']}\n"
            text += f"‚Ä¢ –ü–ª–∞—Ç–µ–∂–µ–π —Å–µ–≥–æ–¥–Ω—è: {bot_metrics['payments_today']}\n"
            text += f"‚Ä¢ –î–æ—Ö–æ–¥ —Å–µ–≥–æ–¥–Ω—è: {bot_metrics['revenue_today']:.0f} ‚ÇΩ\n\n"
        
        # –ê–ª–µ—Ä—Ç—ã
        if alerts:
            text += f"üö® <b>–ê–∫—Ç–∏–≤–Ω—ã–µ –∞–ª–µ—Ä—Ç—ã ({len(alerts)}):</b>\n"
            for alert in alerts[:3]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 3
                emoji = "üö®" if alert["type"] == "critical" else "‚ö†Ô∏è"
                text += f"{emoji} {alert['service']}: {alert['message'][:50]}...\n"
            if len(alerts) > 3:
                text += f"... –∏ –µ—â–µ {len(alerts) - 3} –∞–ª–µ—Ä—Ç–æ–≤\n"
        else:
            text += "‚úÖ <b>–ê–∫—Ç–∏–≤–Ω—ã—Ö –∞–ª–µ—Ä—Ç–æ–≤ –Ω–µ—Ç</b>\n"
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="admin_monitoring")],
            [InlineKeyboardButton(text="üìà –î–µ—Ç–∞–ª—å–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏", callback_data="admin_detailed_metrics")],
            [InlineKeyboardButton(text="üö® –ê–ª–µ—Ä—Ç—ã", callback_data="admin_alerts")],
            [InlineKeyboardButton(text="üìä –ò—Å—Ç–æ—Ä–∏—è", callback_data="admin_metrics_history")],
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_admin_panel")]
        ])
        
        await callback.message.edit_text(text, reply_markup=keyboard, parse_mode="HTML")
        
    except Exception as e:
        logger.error(f"Error in monitoring dashboard: {e}")
        await callback.message.edit_text(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –º–µ—Ç—Ä–∏–∫: {str(e)}")
    
    await callback.answer()

@router.callback_query(F.data == "admin_detailed_metrics")
async def detailed_metrics(callback: types.CallbackQuery):
    """–î–µ—Ç–∞–ª—å–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏"""
    if not is_admin(callback.from_user.id):
        await callback.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
        return
    
    try:
        system_status = await monitoring_service.get_system_status()
        bot_metrics = await monitoring_service.get_bot_metrics()
        
        text = "üìà <b>–î–µ—Ç–∞–ª—å–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏</b>\n\n"
        
        # –°–∏—Å—Ç–µ–º–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
        if "system_metrics" in system_status:
            metrics = system_status["system_metrics"]
            text += f"üíª <b>–°–∏—Å—Ç–µ–º–Ω—ã–µ —Ä–µ—Å—É—Ä—Å—ã:</b>\n"
            text += f"‚Ä¢ CPU: {metrics['cpu_percent']:.2f}%\n"
            text += f"‚Ä¢ RAM: {metrics['memory_percent']:.2f}% ({metrics['memory_used_mb']:.2f} MB)\n"
            text += f"‚Ä¢ –î–∏—Å–∫: {metrics['disk_usage_percent']:.2f}%\n\n"
        
        # Health checks
        if "health_checks" in system_status:
            text += f"üîç <b>–ü—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è:</b>\n"
            for check in system_status["health_checks"]:
                status_emoji = {
                    "healthy": "‚úÖ",
                    "warning": "‚ö†Ô∏è",
                    "critical": "üö®"
                }
                emoji = status_emoji.get(check["status"], "‚ùì")
                text += f"{emoji} {check['service']}: {check['message']}\n"
                if check.get("response_time"):
                    text += f"   ‚è±Ô∏è –í—Ä–µ–º—è –æ—Ç–∫–ª–∏–∫–∞: {check['response_time']:.3f}s\n"
            text += "\n"
        
        # –ú–µ—Ç—Ä–∏–∫–∏ –±–æ—Ç–∞
        if bot_metrics.get("status") != "no_data":
            text += f"ü§ñ <b>–ú–µ—Ç—Ä–∏–∫–∏ –±–æ—Ç–∞:</b>\n"
            text += f"‚Ä¢ –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {bot_metrics['total_users']}\n"
            text += f"‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞ 24—á: {bot_metrics['active_users_24h']}\n"
            text += f"‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞ 7–¥: {bot_metrics['active_users_7d']}\n"
            text += f"‚Ä¢ –ù–æ–≤—ã—Ö —Å–µ–≥–æ–¥–Ω—è: {bot_metrics['new_users_today']}\n"
            text += f"‚Ä¢ –ü–ª–∞—Ç–µ–∂–µ–π —Å–µ–≥–æ–¥–Ω—è: {bot_metrics['payments_today']}\n"
            text += f"‚Ä¢ –î–æ—Ö–æ–¥ —Å–µ–≥–æ–¥–Ω—è: {bot_metrics['revenue_today']:.2f} ‚ÇΩ\n"
            text += f"‚Ä¢ –†–æ—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {bot_metrics.get('user_growth', 0)}\n"
            text += f"‚Ä¢ –†–æ—Å—Ç –¥–æ—Ö–æ–¥–∞: {bot_metrics.get('revenue_growth', 0):.2f} ‚ÇΩ\n"
            text += f"‚Ä¢ –û—á–µ—Ä–µ–¥—å —Ä–∞—Å—Å—ã–ª–æ–∫: {bot_metrics['broadcast_queue_size']}\n\n"
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="admin_monitoring")]
        ])
        
        await callback.message.edit_text(text, reply_markup=keyboard, parse_mode="HTML")
        
    except Exception as e:
        logger.error(f"Error in detailed metrics: {e}")
        await callback.message.edit_text(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
    
    await callback.answer()

@router.callback_query(F.data == "admin_alerts")
async def show_alerts(callback: types.CallbackQuery):
    """–ü–æ–∫–∞–∑ –∞–ª–µ—Ä—Ç–æ–≤"""
    if not is_admin(callback.from_user.id):
        await callback.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
        return
    
    try:
        alerts = await monitoring_service.get_alerts()
        
        if not alerts:
            text = "‚úÖ <b>–ê–∫—Ç–∏–≤–Ω—ã–µ –∞–ª–µ—Ä—Ç—ã</b>\n\n–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∞–ª–µ—Ä—Ç–æ–≤. –í—Å–µ —Å–∏—Å—Ç–µ–º—ã —Ä–∞–±–æ—Ç–∞—é—Ç –Ω–æ—Ä–º–∞–ª—å–Ω–æ."
        else:
            text = f"üö® <b>–ê–∫—Ç–∏–≤–Ω—ã–µ –∞–ª–µ—Ä—Ç—ã ({len(alerts)})</b>\n\n"
            
            critical_alerts = [a for a in alerts if a["type"] == "critical"]
            warning_alerts = [a for a in alerts if a["type"] == "warning"]
            
            if critical_alerts:
                text += f"üö® <b>–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ ({len(critical_alerts)}):</b>\n"
                for alert in critical_alerts:
                    timestamp = datetime.fromtimestamp(alert["timestamp"])
                    text += f"‚Ä¢ {alert['service']}: {alert['message']}\n"
                    text += f"  ‚è∞ {timestamp.strftime('%H:%M:%S')}\n\n"
            
            if warning_alerts:
                text += f"‚ö†Ô∏è <b>–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è ({len(warning_alerts)}):</b>\n"
                for alert in warning_alerts:
                    timestamp = datetime.fromtimestamp(alert["timestamp"])
                    text += f"‚Ä¢ {alert['service']}: {alert['message']}\n"
                    text += f"  ‚è∞ {timestamp.strftime('%H:%M:%S')}\n\n"
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="admin_alerts")],
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="admin_monitoring")]
        ])
        
        await callback.message.edit_text(text, reply_markup=keyboard, parse_mode="HTML")
        
    except Exception as e:
        logger.error(f"Error showing alerts: {e}")
        await callback.message.edit_text(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
    
    await callback.answer()

@router.callback_query(F.data == "admin_metrics_history")
async def metrics_history(callback: types.CallbackQuery):
    """–ò—Å—Ç–æ—Ä–∏—è –º–µ—Ç—Ä–∏–∫"""
    if not is_admin(callback.from_user.id):
        await callback.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
        return
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 6 —á–∞—Å–æ–≤
        historical_data = await monitoring_service.get_historical_metrics(hours=6)
        
        text = "üìä <b>–ò—Å—Ç–æ—Ä–∏—è –º–µ—Ç—Ä–∏–∫ (6 —á–∞—Å–æ–≤)</b>\n\n"
        
        if historical_data["system_metrics"]:
            latest_system = historical_data["system_metrics"][-1]
            oldest_system = historical_data["system_metrics"][0]
            
            text += f"üíª <b>–°–∏—Å—Ç–µ–º–Ω—ã–µ —Ä–µ—Å—É—Ä—Å—ã:</b>\n"
            text += f"‚Ä¢ CPU: {oldest_system['cpu_percent']:.1f}% ‚Üí {latest_system['cpu_percent']:.1f}%\n"
            text += f"‚Ä¢ RAM: {oldest_system['memory_percent']:.1f}% ‚Üí {latest_system['memory_percent']:.1f}%\n"
            text += f"‚Ä¢ –î–∏—Å–∫: {oldest_system['disk_usage_percent']:.1f}% ‚Üí {latest_system['disk_usage_percent']:.1f}%\n\n"
        
        if historical_data["bot_metrics"]:
            latest_bot = historical_data["bot_metrics"][-1]
            oldest_bot = historical_data["bot_metrics"][0]
            
            text += f"ü§ñ <b>–ú–µ—Ç—Ä–∏–∫–∏ –±–æ—Ç–∞:</b>\n"
            text += f"‚Ä¢ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {oldest_bot['total_users']} ‚Üí {latest_bot['total_users']}\n"
            text += f"‚Ä¢ –ù–æ–≤—ã—Ö: {oldest_bot['new_users_today']} ‚Üí {latest_bot['new_users_today']}\n"
            text += f"‚Ä¢ –ü–ª–∞—Ç–µ–∂–µ–π: {oldest_bot['payments_today']} ‚Üí {latest_bot['payments_today']}\n"
            text += f"‚Ä¢ –î–æ—Ö–æ–¥: {oldest_bot['revenue_today']:.0f} ‚Üí {latest_bot['revenue_today']:.0f} ‚ÇΩ\n\n"
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç—Ä–µ–Ω–¥—ã
        if len(historical_data["system_metrics"]) > 1:
            cpu_values = [m["cpu_percent"] for m in historical_data["system_metrics"]]
            memory_values = [m["memory_percent"] for m in historical_data["system_metrics"]]
            
            cpu_avg = sum(cpu_values) / len(cpu_values)
            memory_avg = sum(memory_values) / len(memory_values)
            
            text += f"üìà <b>–°—Ä–µ–¥–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è:</b>\n"
            text += f"‚Ä¢ CPU: {cpu_avg:.1f}%\n"
            text += f"‚Ä¢ RAM: {memory_avg:.1f}%\n"
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="admin_metrics_history")],
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="admin_monitoring")]
        ])
        
        await callback.message.edit_text(text, reply_markup=keyboard, parse_mode="HTML")
        
    except Exception as e:
        logger.error(f"Error showing metrics history: {e}")
        await callback.message.edit_text(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
    
    await callback.answer()

