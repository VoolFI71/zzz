from aiogram import Router, F, types
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
import logging
import aiohttp
import time
import os

logger = logging.getLogger(__name__)

router = Router()

# API –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
API_BASE_URL = "http://fastapi:8080"
AUTH_CODE = os.getenv("AUTH_CODE")

class AdminStates(StatesGroup):
    waiting_for_user_search = State()

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º is_admin –∏–∑ main –º–æ–¥—É–ª—è
from .main import is_admin

@router.callback_query(F.data == "admin_search_user")
async def start_user_search(callback: types.CallbackQuery, state: FSMContext):
    """–ù–∞—á–∏–Ω–∞–µ—Ç –ø–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ Telegram ID."""
    try:
        if not is_admin(callback.from_user.id):
            await callback.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
            return
        
        await callback.message.edit_text(
            "üîç –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n\n"
            "–í–≤–µ–¥–∏—Ç–µ Telegram ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø–æ–∏—Å–∫–∞:"
        )
        await state.set_state(AdminStates.waiting_for_user_search)
        await callback.answer()
    except Exception as e:
        logger.error(f"Error in start_user_search: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –ø–æ–∏—Å–∫–∞", show_alert=True)

@router.message(AdminStates.waiting_for_user_search)
async def process_user_search(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    if not is_admin(message.from_user.id):
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
        await state.clear()
        return
    
    try:
        user_id = int(message.text.strip())
        user_info = await get_user_info(user_id)
        
        if user_info:
            info_text = (
                f"üë§ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ\n\n"
                f"üÜî Telegram ID: {user_info['tg_id']}\n"
                f"üéÅ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–ª –ø—Ä–æ–±–Ω—É—é –ø–æ–¥–ø–∏—Å–∫—É: {'–î–∞' if user_info['trial_used'] else '–ù–µ—Ç'}\n"
                f"üí∞ –ë–∞–ª–∞–Ω—Å –¥–Ω–µ–π: {user_info['balance']}\n"
                f"ü§ù –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤: {user_info['referral_count']}\n"
                f"üîó –†–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥: {user_info['referral_code']}\n"
                f"üìÖ –î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {user_info['created_at']}\n"
                f"‚öôÔ∏è –ê–∫—Ç–∏–≤–Ω—ã—Ö –∫–æ–Ω—Ñ–∏–≥–æ–≤: {user_info['active_configs']}"
            )
            await message.answer(info_text)
        else:
            await message.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")
            
    except ValueError:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–π ID.")
        return
    except Exception as e:
        logger.error(f"Error searching user: {e}")
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ: {str(e)}")
    
    await state.clear()

async def get_user_info(tg_id: int) -> dict | None:
    """–ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –∏–∑ bot –ë–î."""
    try:
        import aiosqlite
        
        async with aiosqlite.connect("users.db") as conn:
            async with conn.cursor() as cursor:
                await cursor.execute(
                    "SELECT tg_id, trial_3d_used, balance, referral_count, referral_code, created_at FROM users WHERE tg_id = ?",
                    (str(tg_id),)
                )
                row = await cursor.fetchone()
                
                if not row:
                    return None
                
                # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–æ–Ω—Ñ–∏–≥–æ–≤ —á–µ—Ä–µ–∑ API
                active_configs = 0
                try:
                    async with aiohttp.ClientSession() as session:
                        url = f"{API_BASE_URL}/usercodes/{tg_id}"
                        headers = {"X-API-Key": AUTH_CODE}
                        async with session.get(url, headers=headers, timeout=10) as resp:
                            if resp.status == 200:
                                data = await resp.json()
                                current_time = int(time.time())
                                active_configs = len([
                                    item for item in data 
                                    if item.get("time_end", 0) > current_time
                                ])
                except Exception as e:
                    logger.warning(f"Error getting active configs for user {tg_id}: {e}")
                
                return {
                    'tg_id': row[0],
                    'trial_used': bool(row[1]),
                    'balance': row[2] or 0,
                    'referral_count': row[3] or 0,
                    'referral_code': row[4] or "–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω",
                    'created_at': row[5] or "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ",
                    'active_configs': active_configs
                }
    except Exception as e:
        logger.error(f"Error getting user info: {e}")
        return None
