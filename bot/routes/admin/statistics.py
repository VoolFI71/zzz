from aiogram import Router, F, types
from aiogram.fsm.context import FSMContext
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
import logging
import time
import aiohttp
import aiosqlite
import os

logger = logging.getLogger(__name__)

router = Router()

# API –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
API_BASE_URL = "http://fastapi:8080"
AUTH_CODE = os.getenv("AUTH_CODE")

def is_admin(user_id: int) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º."""
    return user_id == 746560409

@router.callback_query(F.data == "admin_stats")
async def show_admin_stats(callback: types.CallbackQuery):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π."""
    if not is_admin(callback.from_user.id):
        await callback.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
        return
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –≤–∏–¥—ã —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        user_stats = await get_user_stats()
        payment_stats = await get_payment_stats()
        subscription_stats = await get_subscription_stats()
        activity_stats = await get_activity_stats()
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        stats_text = (
            f"üìä **–î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞**\n\n"
            f"üë• **–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:**\n"
            f"‚Ä¢ –í—Å–µ–≥–æ: {user_stats['total_users']}\n"
            f"‚Ä¢ –° –ø–ª–∞—Ç–µ–∂–∞–º–∏: {user_stats['paid_users']}\n"
            f"‚Ä¢ –¢–æ–ª—å–∫–æ –ø—Ä–æ–±–Ω–∞—è: {user_stats['trial_only_users']}\n"
            f"‚Ä¢ –° –±–∞–ª–∞–Ω—Å–æ–º: {user_stats['with_balance']}\n\n"
            f"üìà **–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å:**\n"
            f"‚Ä¢ –ü—Ä–æ–±–Ω—ã–µ –ø–æ–¥–ø–∏—Å–∫–∏: {user_stats['new_users_week']}\n"
            f"‚Ä¢ –ü–ª–∞—Ç–µ–∂–∏ –∑–∞ 24—á: {activity_stats['active_24h']}\n"
            f"‚Ä¢ –ü–ª–∞—Ç–µ–∂–∏ –∑–∞ 7–¥: {activity_stats['active_7d']}\n"
            f"‚Ä¢ –ü–ª–∞—Ç–µ–∂–∏ –∑–∞ 30–¥: {activity_stats['active_30d']}\n"
            f"‚Ä¢ –ö–æ–Ω–≤–µ—Ä—Å–∏—è –ø—Ä–æ–±–Ω–∞—è‚Üí–ø–ª–∞—Ç–Ω–∞—è: {activity_stats['conversion_rate']:.1f}%\n\n"
            f"üîî **–ü–æ–¥–ø–∏—Å–∫–∏:**\n"
            f"‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã–µ: {subscription_stats['active_subscriptions']}\n"
            f"‚Ä¢ –ë–µ–∑ –ø–æ–¥–ø–∏—Å–∫–∏: {subscription_stats['no_subscriptions']}\n"
            f"‚Ä¢ –ò—Å—Ç–µ–∫—à–∏–µ: {subscription_stats['expired_subscriptions']}\n"
            f"‚Ä¢ –¢–æ–ª—å–∫–æ –ø—Ä–æ–±–Ω—ã–µ: {subscription_stats['trial_only_users']}\n\n"
            f"ü§ù **–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞:**\n"
            f"‚Ä¢ –í—Å–µ–≥–æ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤: {user_stats['total_referrals']}\n"
            f"‚Ä¢ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å —Ä–µ—Ñ–µ—Ä–∞–ª–∞–º–∏: {user_stats['users_with_referrals']}\n"
        )
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–ø —Ä–µ—Ñ–µ—Ä–µ—Ä–∞, –µ—Å–ª–∏ –µ—Å—Ç—å
        if user_stats['top_referrer']:
            tg_id, count = user_stats['top_referrer']
            stats_text += f"‚Ä¢ –¢–æ–ø —Ä–µ—Ñ–µ—Ä–µ—Ä: {tg_id} ({count} –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–π)\n\n"
        else:
            stats_text += "\n"
            
        # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–ª–∞—Ç–µ–∂–µ–π
        stats_text += (
            f"üí≥ **–ü–ª–∞—Ç–µ–∂–∏:**\n"
            f"‚Ä¢ –†—É–±–ª–∏: {payment_stats['total_rub']:,} ‚ÇΩ ({payment_stats['count_rub']} —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π)\n"
            f"‚Ä¢ –ó–≤–µ–∑–¥—ã: {payment_stats['total_stars']:,} ‚≠ê ({payment_stats['count_stars']} —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π)\n"
            f"‚Ä¢ –°—Ä–µ–¥–Ω–∏–π —á–µ–∫ (—Ä—É–±–ª–∏): {payment_stats['avg_rub']:.0f} ‚ÇΩ\n"
            f"‚Ä¢ –°—Ä–µ–¥–Ω–∏–π —á–µ–∫ (–∑–≤–µ–∑–¥—ã): {payment_stats['avg_stars']:.0f} ‚≠ê"
        )
        
        await callback.message.edit_text(stats_text, parse_mode="Markdown")
        
    except Exception as e:
        logger.error(f"Error getting stats: {e}")
        await callback.message.edit_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {str(e)}")
    
    await callback.answer()

async def get_all_user_ids() -> list[str]:
    """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö tg_id –∏–∑ bot –ë–î."""
    try:
        async with aiosqlite.connect("users.db") as conn:
            async with conn.cursor() as cursor:
                await cursor.execute("SELECT tg_id FROM users")
                rows = await cursor.fetchall()
                return [row[0] for row in rows if row[0]]
    except Exception as e:
        logger.error(f"Error getting user IDs: {e}")
        return []

async def get_users_without_subscription() -> list[str]:
    """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –±–µ–∑ –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏."""
    try:
        async with aiosqlite.connect("users.db") as conn:
            async with conn.cursor() as cursor:
                # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –±–µ–∑ –±–∞–ª–∞–Ω—Å–∞ (–±–µ–∑ –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏)
                await cursor.execute("SELECT tg_id FROM users WHERE balance <= 0")
                rows = await cursor.fetchall()
                return [row[0] for row in rows if row[0]]
    except Exception as e:
        logger.error(f"Error getting users without subscription: {e}")
        return []

async def get_users_with_expired_subscription() -> list[str]:
    """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –∏—Å—Ç–µ–∫—à–µ–π –ø–æ–¥–ø–∏—Å–∫–æ–π."""
    try:
        async with aiosqlite.connect("users.db") as conn:
            async with conn.cursor() as cursor:
                # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏, –∫–æ—Ç–æ—Ä—ã–µ –∫–æ–≥–¥–∞-—Ç–æ –∏–º–µ–ª–∏ –ø–æ–¥–ø–∏—Å–∫—É, –Ω–æ —Å–µ–π—á–∞—Å –±–µ–∑ –±–∞–ª–∞–Ω—Å–∞
                # (–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ –ø—Ä–æ–±–Ω—É—é –ø–æ–¥–ø–∏—Å–∫—É –∏–ª–∏ –∏–º–µ–ª–∏ –ø–ª–∞—Ç–Ω—É—é, –Ω–æ –æ–Ω–∞ –∏—Å—Ç–µ–∫–ª–∞)
                await cursor.execute(
                    "SELECT tg_id FROM users WHERE balance <= 0 AND (trial_3d_used = 1 OR paid_count > 0)"
                )
                rows = await cursor.fetchall()
                return [row[0] for row in rows if row[0]]
    except Exception as e:
        logger.error(f"Error getting users with expired subscription: {e}")
        return []

async def get_users_with_active_subscription() -> list[str]:
    """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–æ–π —á–µ—Ä–µ–∑ FastAPI API."""
    try:
        # –ü–æ—Å–∫–æ–ª—å–∫—É /getids –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–æ–ª—å–∫–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –∏—Å—Ç–µ–∫–∞—é—â–∏–º–∏ –ø–æ–¥–ø–∏—Å–∫–∞–º–∏,
        # –∞ –Ω–∞–º –Ω—É–∂–Ω—ã –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ—Å—Ç–æ–π –ø–æ–¥—Ö–æ–¥:
        # –ø–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ bot –ë–î –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º –∏—Ö —á–µ—Ä–µ–∑ /usercodes
        all_bot_users = await get_all_user_ids()
        active_users = []
        
        async with aiohttp.ClientSession() as session:
            for user_id in all_bot_users:
                try:
                    url = f"{API_BASE_URL}/usercodes/{user_id}"
                    headers = {"X-API-Key": AUTH_CODE}
                    async with session.get(url, headers=headers, timeout=15) as resp:
                        if resp.status == 200:
                            # –†–∞–∑–±–∏—Ä–∞–µ–º –∫–æ–Ω—Ñ–∏–≥–∏ –∏ –∏—â–µ–º –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –ê–ö–¢–ò–í–ù–´–ï (time_end > now)
                            try:
                                data = await resp.json()
                            except Exception:
                                # –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ ‚Äî –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–Ω–µ —Ä–∞—Å—Å—ã–ª–∞–µ–º)
                                active_users.append(user_id)
                                continue
                            now_ts = int(time.time())
                            def _parse_time_end(raw: object) -> int:
                                try:
                                    val = int(raw)
                                except Exception:
                                    return 0
                                # –ó–∞—â–∏—Ç–∞ –æ—Ç –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥
                                if val > 10**11:
                                    val = val // 1000
                                return val
                            has_active = any(_parse_time_end(item.get("time_end", 0)) > now_ts for item in data)
                            if has_active:
                                active_users.append(user_id)
                        else:
                            # 404 ‚Äî –Ω–µ—Ç –∫–æ–Ω—Ñ–∏–≥–æ–≤ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Ç–æ—á–Ω–æ –Ω–µ –∞–∫—Ç–∏–≤–Ω—ã–π)
                            if resp.status == 404:
                                pass
                            else:
                                # –õ—é–±–∞—è –∏–Ω–∞—è –æ—à–∏–±–∫–∞ API ‚Äî –ø–æ–¥—Å—Ç—Ä–∞—Ö–æ–≤–∫–∞: –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Ç–∞–∫–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                                active_users.append(user_id)
                except Exception:
                    # –°–µ—Ç–µ–≤–∞—è –æ—à–∏–±–∫–∞ ‚Äî –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Ç–∞–∫–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–Ω–µ —Ä–∞—Å—Å—ã–ª–∞–µ–º)
                    active_users.append(user_id)
                    continue
        return active_users
    except Exception as e:
        logger.error(f"Error getting users with active subscription: {e}")
        return []

async def get_users_without_any_subscription() -> list[str]:
    """–ü–æ–ª—É—á–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –±–µ–∑ –ø–æ–¥–ø–∏—Å–∫–∏ (–Ω–µ –≤ FastAPI –ë–î)."""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ bot –ë–î
        all_bot_users = await get_all_user_ids()
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–æ–π –∏–∑ FastAPI
        active_sub_users = await get_users_with_active_subscription()
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∫–æ—Ç–æ—Ä—ã—Ö –Ω–µ—Ç –≤ —Å–ø–∏—Å–∫–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫
        return [user_id for user_id in all_bot_users if user_id not in active_sub_users]
    except Exception as e:
        logger.error(f"Error getting users without any subscription: {e}")
        return []

async def get_users_trial_only_no_payments() -> list[int]:
    """–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏, –∫—Ç–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–ª –ø—Ä–æ–±–Ω—É—é (trial_3d_used=1), –Ω–æ –µ—â—ë –Ω–∏ —Ä–∞–∑—É –Ω–µ –ø–æ–∫—É–ø–∞–ª (paid_count=0).

    –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–ø–∏—Å–æ–∫ tg_id –∫–∞–∫ int.
    """
    try:
        async with aiosqlite.connect("users.db") as conn:
            async with conn.cursor() as cursor:
                await cursor.execute(
                    "SELECT tg_id FROM users WHERE trial_3d_used = 1 AND (paid_count IS NULL OR paid_count = 0)"
                )
                rows = await cursor.fetchall()
                res: list[int] = []
                for row in rows:
                    try:
                        res.append(int(row[0]))
                    except Exception:
                        continue
                return res
    except Exception as e:
        logger.error(f"Error getting users trial-only: {e}")
        return []

async def get_user_stats() -> dict:
    """–ü–æ–ª—É—á–∞–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ bot –ë–î."""
    try:
        async with aiosqlite.connect("users.db") as conn:
            async with conn.cursor() as cursor:
                # –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
                await cursor.execute("SELECT COUNT(*) FROM users")
                total_users = (await cursor.fetchone())[0]
                
                # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏, –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–≤—à–∏–µ –ø—Ä–æ–±–Ω—É—é –ø–æ–¥–ø–∏—Å–∫—É
                await cursor.execute("SELECT COUNT(*) FROM users WHERE trial_3d_used = 1")
                trial_used = (await cursor.fetchone())[0]
                
                # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å –±–∞–ª–∞–Ω—Å–æ–º –¥–Ω–µ–π
                await cursor.execute("SELECT COUNT(*) FROM users WHERE balance > 0")
                with_balance = (await cursor.fetchone())[0]
                
                # –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤
                await cursor.execute("SELECT SUM(referral_count) FROM users WHERE referral_count IS NOT NULL")
                total_referrals = (await cursor.fetchone())[0] or 0
                
                # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å –ø–ª–∞—Ç–µ–∂–∞–º–∏
                await cursor.execute("SELECT COUNT(*) FROM users WHERE paid_count > 0")
                paid_users = (await cursor.fetchone())[0]
                
                # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Ç–æ–ª—å–∫–æ —Å –ø—Ä–æ–±–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–æ–π (–±–µ–∑ –ø–ª–∞—Ç–µ–∂–µ–π)
                await cursor.execute("SELECT COUNT(*) FROM users WHERE trial_3d_used = 1 AND (paid_count IS NULL OR paid_count = 0)")
                trial_only_users = (await cursor.fetchone())[0]
                
                # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å —Ä–µ—Ñ–µ—Ä–∞–ª–∞–º–∏
                await cursor.execute("SELECT COUNT(*) FROM users WHERE referral_count > 0")
                users_with_referrals = (await cursor.fetchone())[0]
                
                # –¢–æ–ø —Ä–µ—Ñ–µ—Ä–µ—Ä
                await cursor.execute("SELECT tg_id, referral_count FROM users WHERE referral_count > 0 ORDER BY referral_count DESC LIMIT 1")
                top_referrer = await cursor.fetchone()
                
                # –ü—Ä–æ–±–Ω—ã–µ –ø–æ–¥–ø–∏—Å–∫–∏ (–ø—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω—ã–π –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π)
                # –ü–æ—Å–∫–æ–ª—å–∫—É —É –Ω–∞—Å –Ω–µ—Ç –ø–æ–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏, –∏—Å–ø–æ–ª—å–∑—É–µ–º trial_3d_used –∫–∞–∫ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä
                await cursor.execute("SELECT COUNT(*) FROM users WHERE trial_3d_used = 1")
                trial_users_count = (await cursor.fetchone())[0]
                
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ–¥–Ω–æ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –æ–±–µ–∏—Ö –º–µ—Ç—Ä–∏–∫, —Ç–∞–∫ –∫–∞–∫ —É –Ω–∞—Å –Ω–µ—Ç –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
                new_users_week = trial_users_count
                new_users_month = trial_users_count
                
                return {
                    'total_users': total_users,
                    'trial_used': trial_used,
                    'with_balance': with_balance,
                    'total_referrals': total_referrals,
                    'paid_users': paid_users,
                    'trial_only_users': trial_only_users,
                    'users_with_referrals': users_with_referrals,
                    'top_referrer': top_referrer,
                    'new_users_week': new_users_week,
                    'new_users_month': new_users_month
                }
    except Exception as e:
        logger.error(f"Error getting user stats: {e}")
        return {
            'total_users': 0,
            'trial_used': 0,
            'with_balance': 0,
            'total_referrals': 0,
            'paid_users': 0,
            'trial_only_users': 0,
            'users_with_referrals': 0,
            'top_referrer': None,
            'new_users_week': 0,
            'new_users_month': 0
        }

async def get_payment_stats() -> dict:
    """–ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–ª–∞—Ç–µ–∂–µ–π –∏–∑ bot –ë–î."""
    try:
        async with aiosqlite.connect("users.db") as conn:
            async with conn.cursor() as cursor:
                # –ê–≥—Ä–µ–≥–∞—Ç—ã –ø–ª–∞—Ç–µ–∂–µ–π
                await cursor.execute("SELECT total_rub, total_stars, count_rub, count_stars FROM payments_agg WHERE id = 1")
                payment_agg = await cursor.fetchone()
                
                if payment_agg:
                    total_rub, total_stars, count_rub, count_stars = payment_agg
                else:
                    total_rub = total_stars = count_rub = count_stars = 0
                
                # –°—Ä–µ–¥–Ω–∏–π —á–µ–∫ –≤ —Ä—É–±–ª—è—Ö
                avg_rub = total_rub / count_rub if count_rub > 0 else 0
                
                # –°—Ä–µ–¥–Ω–∏–π —á–µ–∫ –≤ –∑–≤–µ–∑–¥–∞—Ö
                avg_stars = total_stars / count_stars if count_stars > 0 else 0
                
                return {
                    'total_rub': total_rub,
                    'total_stars': total_stars,
                    'count_rub': count_rub,
                    'count_stars': count_stars,
                    'avg_rub': avg_rub,
                    'avg_stars': avg_stars
                }
    except Exception as e:
        logger.error(f"Error getting payment stats: {e}")
        return {
            'total_rub': 0,
            'total_stars': 0,
            'count_rub': 0,
            'count_stars': 0,
            'avg_rub': 0,
            'avg_stars': 0
        }

async def get_subscription_stats() -> dict:
    """–ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–¥–ø–∏—Å–æ–∫ —á–µ—Ä–µ–∑ API."""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –∞–∫—Ç–∏–≤–Ω—ã–º–∏ –ø–æ–¥–ø–∏—Å–∫–∞–º–∏
        active_users = await get_users_with_active_subscription()
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –±–µ–∑ –ø–æ–¥–ø–∏—Å–æ–∫
        no_sub_users = await get_users_without_any_subscription()
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –∏—Å—Ç–µ–∫—à–∏–º–∏ –ø–æ–¥–ø–∏—Å–∫–∞–º–∏
        expired_users = await get_users_with_expired_subscription()
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Ç–æ–ª—å–∫–æ —Å –ø—Ä–æ–±–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–æ–π
        trial_only_users = await get_users_trial_only_no_payments()
        
        return {
            'active_subscriptions': len(active_users),
            'no_subscriptions': len(no_sub_users),
            'expired_subscriptions': len(expired_users),
            'trial_only_users': len(trial_only_users)
        }
    except Exception as e:
        logger.error(f"Error getting subscription stats: {e}")
        return {
            'active_subscriptions': 0,
            'no_subscriptions': 0,
            'expired_subscriptions': 0,
            'trial_only_users': 0
        }

async def get_activity_stats() -> dict:
    """–ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π."""
    try:
        async with aiosqlite.connect("users.db") as conn:
            async with conn.cursor() as cursor:
                # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å –ø–ª–∞—Ç–µ–∂–∞–º–∏ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞
                day_ago = int(time.time()) - (24 * 60 * 60)
                await cursor.execute("SELECT COUNT(*) FROM users WHERE last_payment_at > ?", (day_ago,))
                active_24h = (await cursor.fetchone())[0]
                
                # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å –ø–ª–∞—Ç–µ–∂–∞–º–∏ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π
                week_ago = int(time.time()) - (7 * 24 * 60 * 60)
                await cursor.execute("SELECT COUNT(*) FROM users WHERE last_payment_at > ?", (week_ago,))
                active_7d = (await cursor.fetchone())[0]
                
                # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å –ø–ª–∞—Ç–µ–∂–∞–º–∏ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π
                month_ago = int(time.time()) - (30 * 24 * 60 * 60)
                await cursor.execute("SELECT COUNT(*) FROM users WHERE last_payment_at > ?", (month_ago,))
                active_30d = (await cursor.fetchone())[0]
                
                # –ö–æ–Ω–≤–µ—Ä—Å–∏—è –∏–∑ –ø—Ä–æ–±–Ω–æ–π –≤ –ø–ª–∞—Ç–Ω—É—é
                await cursor.execute("SELECT COUNT(*) FROM users WHERE trial_3d_used = 1 AND paid_count > 0")
                converted_users = (await cursor.fetchone())[0]
                
                await cursor.execute("SELECT COUNT(*) FROM users WHERE trial_3d_used = 1")
                total_trial_users = (await cursor.fetchone())[0]
                
                conversion_rate = (converted_users / total_trial_users * 100) if total_trial_users > 0 else 0
                
                return {
                    'active_24h': active_24h,
                    'active_7d': active_7d,
                    'active_30d': active_30d,
                    'converted_users': converted_users,
                    'conversion_rate': conversion_rate
                }
    except Exception as e:
        logger.error(f"Error getting activity stats: {e}")
        return {
            'active_24h': 0,
            'active_7d': 0,
            'active_30d': 0,
            'converted_users': 0,
            'conversion_rate': 0
        }
