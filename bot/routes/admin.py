from aiogram import Router, F, types
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
import logging
import time
import aiohttp
import os

logger = logging.getLogger(__name__)

router = Router()

# ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
ADMIN_ID = 746560409

# API –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
API_BASE_URL = "http://fastapi:8080"
AUTH_CODE = os.getenv("AUTH_CODE")

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ AUTH_CODE
if not AUTH_CODE:
    logger.error("AUTH_CODE environment variable is not set!")
    raise ValueError("AUTH_CODE environment variable is required")

class AdminStates(StatesGroup):
    waiting_for_message = State()
    waiting_for_user_search = State()
    waiting_for_config_uid = State()

def is_admin(user_id: int) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º."""
    return user_id == ADMIN_ID

@router.message(F.text == "üîß –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å")
async def admin_panel(message: types.Message):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞."""
    try:
        if not is_admin(message.from_user.id):
            await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏.")
            return
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üì¢ –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—Å–µ–º", callback_data="admin_broadcast")],
            [InlineKeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="admin_stats")],
            [InlineKeyboardButton(text="üîç –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", callback_data="admin_search_user")],
            [InlineKeyboardButton(text="‚öôÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥–∞–º–∏", callback_data="admin_configs")],
            [InlineKeyboardButton(text="üìà –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="admin_detailed_stats")],
            [InlineKeyboardButton(text="üîß –°–∏—Å—Ç–µ–º–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏", callback_data="admin_system")],
        ])
        
        await message.answer(
            "üîß –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=keyboard
        )
    except Exception as e:
        logger.error(f"Error in admin_panel: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏.")

@router.callback_query(F.data == "admin_broadcast")
async def start_broadcast(callback: types.CallbackQuery, state: FSMContext):
    """–ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º."""
    try:
        if not is_admin(callback.from_user.id):
            await callback.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
            return
        
        await callback.message.edit_text(
            "üì¢ –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º\n\n"
            "–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º:"
        )
        await state.set_state(AdminStates.waiting_for_message)
        await callback.answer()
    except Exception as e:
        logger.error(f"Error in start_broadcast: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Ä–∞—Å—Å—ã–ª–∫–∏", show_alert=True)

@router.message(AdminStates.waiting_for_message)
async def process_broadcast_message(message: types.Message, state: FSMContext, bot):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –µ–≥–æ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º."""
    if not is_admin(message.from_user.id):
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
        await state.clear()
        return
    
    broadcast_text = message.text
    if not broadcast_text or len(broadcast_text.strip()) == 0:
        await message.answer("–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ –ë–î
    try:
        user_ids = await get_all_user_ids()
        if not user_ids:
            await message.answer("–í –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")
            await state.clear()
            return
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –æ –Ω–∞—á–∞–ª–µ —Ä–∞—Å—Å—ã–ª–∫–∏
        await message.answer(f"üì§ –ù–∞—á–∏–Ω–∞—é —Ä–∞—Å—Å—ã–ª–∫—É —Å–æ–æ–±—â–µ–Ω–∏—è {len(user_ids)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º...")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
        sent_count = 0
        failed_count = 0
        
        for user_id in user_ids:
            try:
                await bot.send_message(user_id, broadcast_text)
                sent_count += 1
            except Exception as e:
                logger.warning(f"Failed to send message to user {user_id}: {e}")
                failed_count += 1
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç—á–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
        await message.answer(
            f"‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n\n"
            f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n"
            f"‚Ä¢ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {sent_count}\n"
            f"‚Ä¢ –û—à–∏–±–æ–∫: {failed_count}\n"
            f"‚Ä¢ –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(user_ids)}"
        )
        
    except Exception as e:
        logger.error(f"Error during broadcast: {e}")
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—Å—ã–ª–∫–µ: {str(e)}")
    
    await state.clear()

@router.callback_query(F.data == "admin_stats")
async def show_admin_stats(callback: types.CallbackQuery):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π."""
    if not is_admin(callback.from_user.id):
        await callback.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
        return
    
    try:
        stats = await get_user_stats()
        stats_text = (
            f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n\n"
            f"üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {stats['total_users']}\n"
            f"üéÅ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ –ø—Ä–æ–±–Ω—É—é –ø–æ–¥–ø–∏—Å–∫—É: {stats['trial_used']}\n"
            f"üí∞ –ò–º–µ—é—Ç –±–∞–ª–∞–Ω—Å –¥–Ω–µ–π: {stats['with_balance']}\n"
            f"ü§ù –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤: {stats['total_referrals']}"
        )
        
        await callback.message.edit_text(stats_text)
        
    except Exception as e:
        logger.error(f"Error getting stats: {e}")
        await callback.message.edit_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {str(e)}")
    
    await callback.answer()

async def get_all_user_ids() -> list[str]:
    """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö tg_id —á–µ—Ä–µ–∑ API."""
    try:
        async with aiohttp.ClientSession() as session:
            headers = {"X-API-Key": AUTH_CODE}
            
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∫–æ–Ω—Ñ–∏–≥–∏ –∏ –∏–∑–≤–ª–µ–∫–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            async with session.get(f"{API_BASE_URL}/all-configs", headers=headers) as resp:
                if resp.status != 200:
                    logger.error(f"API error getting all configs: {resp.status}")
                    return []
                
                data = await resp.json()
                configs = data.get('configs', [])
                
                # –ò–∑–≤–ª–µ–∫–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
                user_ids = set()
                for config in configs:
                    tg_id = config.get('tg_id')
                    if tg_id and tg_id.strip():
                        user_ids.add(tg_id)
                
                return list(user_ids)
    except Exception as e:
        logger.error(f"Error getting user IDs: {e}")
        return []

async def get_user_stats() -> dict:
    """–ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —á–µ—Ä–µ–∑ API."""
    try:
        async with aiohttp.ClientSession() as session:
            headers = {"X-API-Key": AUTH_CODE}
            
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∫–æ–Ω—Ñ–∏–≥–∏ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
            async with session.get(f"{API_BASE_URL}/all-configs", headers=headers) as resp:
                if resp.status != 200:
                    logger.error(f"API error getting all configs: {resp.status}")
                    return {
                        'total_users': 0,
                        'trial_used': 0,
                        'with_balance': 0,
                        'total_referrals': 0
                    }
                
                data = await resp.json()
                configs = data.get('configs', [])
                
                # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ–Ω—Ñ–∏–≥–∏ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
                user_ids = set()
                for config in configs:
                    tg_id = config.get('tg_id')
                    if tg_id and tg_id.strip():
                        user_ids.add(tg_id)
                
                total_users = len(user_ids)
                
                # –ü–æ–∫–∞ —á—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∑–∞–≥–ª—É—à–∫–∏ –¥–ª—è –ø–æ–ª–µ–π, –∫–æ—Ç–æ—Ä—ã—Ö –Ω–µ—Ç –≤ API
                return {
                    'total_users': total_users,
                    'trial_used': 0,  # –ù—É–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –≤ API
                    'with_balance': 0,  # –ù—É–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –≤ API
                    'total_referrals': 0  # –ù—É–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –≤ API
                }
    except Exception as e:
        logger.error(f"Error getting user stats: {e}")
        return {
            'total_users': 0,
            'trial_used': 0,
            'with_balance': 0,
            'total_referrals': 0
        }

# –ù–æ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏

@router.callback_query(F.data == "admin_search_user")
async def start_user_search(callback: types.CallbackQuery, state: FSMContext):
    """–ù–∞—á–∏–Ω–∞–µ—Ç –ø–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ Telegram ID."""
    try:
        if not is_admin(callback.from_user.id):
            await callback.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
            return
        
        await callback.message.edit_text(
            "üîç –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n\n"
            "–í–≤–µ–¥–∏—Ç–µ Telegram ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø–æ–∏—Å–∫–∞:"
        )
        await state.set_state(AdminStates.waiting_for_user_search)
        await callback.answer()
    except Exception as e:
        logger.error(f"Error in start_user_search: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –ø–æ–∏—Å–∫–∞", show_alert=True)

@router.message(AdminStates.waiting_for_user_search)
async def process_user_search(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    if not is_admin(message.from_user.id):
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
        await state.clear()
        return
    
    try:
        user_id = int(message.text.strip())
        user_info = await get_user_info(user_id)
        
        if user_info:
            info_text = (
                f"üë§ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ\n\n"
                f"üÜî Telegram ID: {user_info['tg_id']}\n"
                f"üéÅ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–ª –ø—Ä–æ–±–Ω—É—é –ø–æ–¥–ø–∏—Å–∫—É: {'–î–∞' if user_info['trial_used'] else '–ù–µ—Ç'}\n"
                f"üí∞ –ë–∞–ª–∞–Ω—Å –¥–Ω–µ–π: {user_info['balance']}\n"
                f"ü§ù –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤: {user_info['referral_count']}\n"
                f"üìÖ –î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {user_info['created_at']}\n"
                f"üîó –ê–∫—Ç–∏–≤–Ω—ã—Ö –∫–æ–Ω—Ñ–∏–≥–æ–≤: {user_info['active_configs']}"
            )
            await message.answer(info_text)
        else:
            await message.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")
            
    except ValueError:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–π ID.")
        return
    except Exception as e:
        logger.error(f"Error searching user: {e}")
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ: {str(e)}")
    
    await state.clear()

@router.callback_query(F.data == "admin_configs")
async def show_config_management(callback: types.CallbackQuery):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥–∞–º–∏."""
    if not is_admin(callback.from_user.id):
        await callback.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
        return
    
    try:
        config_stats = await get_config_statistics()
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üîç –ù–∞–π—Ç–∏ –∫–æ–Ω—Ñ–∏–≥ –ø–æ UID", callback_data="admin_find_config")],
            [InlineKeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–æ–Ω—Ñ–∏–≥–æ–≤", callback_data="admin_config_stats")],
            [InlineKeyboardButton(text="üßπ –û—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–µ–∫—à–∏–µ", callback_data="admin_cleanup_expired")],
            [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_back_to_main")],
        ])
        
        stats_text = (
            f"‚öôÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥–∞–º–∏\n\n"
            f"üìä –¢–µ–∫—É—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n"
            f"‚Ä¢ –í—Å–µ–≥–æ –∫–æ–Ω—Ñ–∏–≥–æ–≤: {config_stats['total']}\n"
            f"‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö: {config_stats['active']}\n"
            f"‚Ä¢ –ò—Å—Ç–µ–∫—à–∏—Ö: {config_stats['expired']}\n"
            f"‚Ä¢ –°–≤–æ–±–æ–¥–Ω—ã—Ö: {config_stats['free']}\n"
            f"‚Ä¢ FI —Å–µ—Ä–≤–µ—Ä: {config_stats['fi_count']}\n"
            f"‚Ä¢ NL —Å–µ—Ä–≤–µ—Ä: {config_stats['nl_count']}"
        )
        
        await callback.message.edit_text(stats_text, reply_markup=keyboard)
        
    except Exception as e:
        logger.error(f"Error getting config stats: {e}")
        await callback.message.edit_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {str(e)}")
    
    await callback.answer()

@router.callback_query(F.data == "admin_find_config")
async def start_config_search(callback: types.CallbackQuery, state: FSMContext):
    """–ù–∞—á–∏–Ω–∞–µ—Ç –ø–æ–∏—Å–∫ –∫–æ–Ω—Ñ–∏–≥–∞ –ø–æ UID."""
    try:
        if not is_admin(callback.from_user.id):
            await callback.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
            return
        
        await callback.message.edit_text(
            "üîç –ü–æ–∏—Å–∫ –∫–æ–Ω—Ñ–∏–≥–∞\n\n"
            "–í–≤–µ–¥–∏—Ç–µ UID –∫–æ–Ω—Ñ–∏–≥–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞:"
        )
        await state.set_state(AdminStates.waiting_for_config_uid)
        await callback.answer()
    except Exception as e:
        logger.error(f"Error in start_config_search: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –ø–æ–∏—Å–∫–∞ –∫–æ–Ω—Ñ–∏–≥–∞", show_alert=True)

@router.message(AdminStates.waiting_for_config_uid)
async def process_config_search(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–æ–∏—Å–∫ –∫–æ–Ω—Ñ–∏–≥–∞."""
    if not is_admin(message.from_user.id):
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
        await state.clear()
        return
    
    try:
        config_uid = message.text.strip()
        config_info = await get_config_info(config_uid)
        
        if config_info:
            status = "üü¢ –ê–∫—Ç–∏–≤–Ω—ã–π" if config_info['is_active'] else "üî¥ –ò—Å—Ç–µ–∫—à–∏–π"
            info_text = (
                f"‚öôÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ–Ω—Ñ–∏–≥–µ\n\n"
                f"üÜî UID: {config_info['uid']}\n"
                f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {config_info['tg_id'] or '–ù–µ –Ω–∞–∑–Ω–∞—á–µ–Ω'}\n"
                f"üåç –°–µ—Ä–≤–µ—Ä: {config_info['server']}\n"
                f"‚è∞ –í—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è: {config_info['time_end_formatted']}\n"
                f"üìä –°—Ç–∞—Ç—É—Å: {status}"
            )
            await message.answer(info_text)
        else:
            await message.answer("‚ùå –ö–æ–Ω—Ñ–∏–≥ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            
    except Exception as e:
        logger.error(f"Error searching config: {e}")
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ: {str(e)}")
    
    await state.clear()

@router.callback_query(F.data == "admin_detailed_stats")
async def show_detailed_stats(callback: types.CallbackQuery):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É."""
    if not is_admin(callback.from_user.id):
        await callback.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
        return
    
    try:
        detailed_stats = await get_detailed_statistics()
        
        stats_text = (
            f"üìà –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n\n"
            f"üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:\n"
            f"‚Ä¢ –í—Å–µ–≥–æ: {detailed_stats['users']['total']}\n"
            f"‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö: {detailed_stats['users']['active']}\n"
            f"‚Ä¢ –° –ø—Ä–æ–±–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–æ–π: {detailed_stats['users']['trial_used']}\n"
            f"‚Ä¢ –° –±–∞–ª–∞–Ω—Å–æ–º: {detailed_stats['users']['with_balance']}\n\n"
            f"‚öôÔ∏è –ö–æ–Ω—Ñ–∏–≥–∏:\n"
            f"‚Ä¢ –í—Å–µ–≥–æ: {detailed_stats['configs']['total']}\n"
            f"‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö: {detailed_stats['configs']['active']}\n"
            f"‚Ä¢ –ò—Å—Ç–µ–∫—à–∏—Ö: {detailed_stats['configs']['expired']}\n"
            f"‚Ä¢ FI —Å–µ—Ä–≤–µ—Ä: {detailed_stats['configs']['fi']}\n"
            f"‚Ä¢ NL —Å–µ—Ä–≤–µ—Ä: {detailed_stats['configs']['nl']}\n\n"
            f"ü§ù –†–µ—Ñ–µ—Ä–∞–ª—ã:\n"
            f"‚Ä¢ –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ: {detailed_stats['referrals']['total']}\n"
            f"‚Ä¢ –¢–æ–ø —Ä–µ—Ñ–µ—Ä–µ—Ä: {detailed_stats['referrals']['top_referrer']}"
        )
        
        await callback.message.edit_text(stats_text)
        
    except Exception as e:
        logger.error(f"Error getting detailed stats: {e}")
        await callback.message.edit_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {str(e)}")
    
    await callback.answer()

@router.callback_query(F.data == "admin_system")
async def show_system_operations(callback: types.CallbackQuery):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–∏—Å—Ç–µ–º–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏."""
    try:
        if not is_admin(callback.from_user.id):
            await callback.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
            return
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üßπ –û—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–µ–∫—à–∏–µ –∫–æ–Ω—Ñ–∏–≥–∏", callback_data="admin_cleanup_expired")],
            [InlineKeyboardButton(text="üîÑ –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É", callback_data="admin_reload_stats")],
            [InlineKeyboardButton(text="üìä –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –∫–æ–Ω—Ñ–∏–≥–æ–≤", callback_data="admin_check_availability")],
            [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_back_to_main")],
        ])
        
        await callback.message.edit_text(
            "üîß –°–∏—Å—Ç–µ–º–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø–µ—Ä–∞—Ü–∏—é:",
            reply_markup=keyboard
        )
        await callback.answer()
    except Exception as e:
        logger.error(f"Error in show_system_operations: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π", show_alert=True)

@router.callback_query(F.data == "admin_back_to_main")
async def back_to_main_admin(callback: types.CallbackQuery):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫ –≥–ª–∞–≤–Ω–æ–º—É –º–µ–Ω—é –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏."""
    try:
        if not is_admin(callback.from_user.id):
            await callback.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
            return
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üì¢ –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—Å–µ–º", callback_data="admin_broadcast")],
            [InlineKeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="admin_stats")],
            [InlineKeyboardButton(text="üîç –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", callback_data="admin_search_user")],
            [InlineKeyboardButton(text="‚öôÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥–∞–º–∏", callback_data="admin_configs")],
            [InlineKeyboardButton(text="üìà –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="admin_detailed_stats")],
            [InlineKeyboardButton(text="üîß –°–∏—Å—Ç–µ–º–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏", callback_data="admin_system")],
        ])
        
        await callback.message.edit_text(
            "üîß –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=keyboard
        )
        await callback.answer()
    except Exception as e:
        logger.error(f"Error in back_to_main_admin: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", show_alert=True)

# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –Ω–æ–≤—ã—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π

async def get_user_info(tg_id: int) -> dict | None:
    """–ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ —á–µ—Ä–µ–∑ API."""
    try:
        async with aiohttp.ClientSession(timeout=aiohttp.ClientTimeout(total=10)) as session:
            headers = {"X-API-Key": AUTH_CODE}
            
            # –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ñ–∏–≥–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            async with session.get(f"{API_BASE_URL}/usercodes/{tg_id}", headers=headers) as resp:
                if resp.status == 404:
                    return None
                elif resp.status != 200:
                    logger.error(f"API error getting user configs: {resp.status}")
                    return None
                
                try:
                    configs = await resp.json()
                except aiohttp.ContentTypeError as e:
                    logger.error(f"Invalid JSON response: {e}")
                    return None
                
                active_configs = len([c for c in configs if c.get('time_end', 0) > int(time.time())])
                
                # –ë–∞–∑–æ–≤–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è (–ø–æ–∫–∞ —á—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –∫–æ–Ω—Ñ–∏–≥–æ–≤)
                return {
                    'tg_id': str(tg_id),
                    'trial_used': False,  # –ù—É–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –≤ API
                    'balance': 0,  # –ù—É–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –≤ API
                    'referral_count': 0,  # –ù—É–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –≤ API
                    'created_at': '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ',  # –ù—É–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –≤ API
                    'active_configs': active_configs
                }
    except aiohttp.ClientError as e:
        logger.error(f"Network error getting user info: {e}")
        return None
    except Exception as e:
        logger.error(f"Error getting user info: {e}")
        return None

async def get_config_statistics() -> dict:
    """–ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫–æ–Ω—Ñ–∏–≥–æ–≤ —á–µ—Ä–µ–∑ API."""
    try:
        async with aiohttp.ClientSession(timeout=aiohttp.ClientTimeout(total=10)) as session:
            headers = {"X-API-Key": AUTH_CODE}
            
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∫–æ–Ω—Ñ–∏–≥–∏
            async with session.get(f"{API_BASE_URL}/all-configs", headers=headers) as resp:
                if resp.status != 200:
                    logger.error(f"API error getting all configs: {resp.status}")
                    return {
                        'total': 0, 'active': 0, 'expired': 0, 'free': 0,
                        'fi_count': 0, 'nl_count': 0
                    }
                
                try:
                    data = await resp.json()
                except aiohttp.ContentTypeError as e:
                    logger.error(f"Invalid JSON response: {e}")
                    return {
                        'total': 0, 'active': 0, 'expired': 0, 'free': 0,
                        'fi_count': 0, 'nl_count': 0
                    }
                
                configs = data.get('configs', [])
                
                current_time = int(time.time())
                total = len(configs)
                active = len([c for c in configs if c.get('time_end', 0) > current_time])
                expired = len([c for c in configs if c.get('time_end', 0) <= current_time and c.get('time_end', 0) > 0])
                free = len([c for c in configs if c.get('time_end', 0) == 0])
                fi_count = len([c for c in configs if c.get('server_country') == 'fi'])
                nl_count = len([c for c in configs if c.get('server_country') == 'nl'])
                
                return {
                    'total': total,
                    'active': active,
                    'expired': expired,
                    'free': free,
                    'fi_count': fi_count,
                    'nl_count': nl_count
                }
    except aiohttp.ClientError as e:
        logger.error(f"Network error getting config statistics: {e}")
        return {
            'total': 0, 'active': 0, 'expired': 0, 'free': 0,
            'fi_count': 0, 'nl_count': 0
        }
    except Exception as e:
        logger.error(f"Error getting config statistics: {e}")
        return {
            'total': 0, 'active': 0, 'expired': 0, 'free': 0,
            'fi_count': 0, 'nl_count': 0
        }

async def get_config_info(uid: str) -> dict | None:
    """–ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–Ω—Ñ–∏–≥–µ —á–µ—Ä–µ–∑ API."""
    try:
        async with aiohttp.ClientSession(timeout=aiohttp.ClientTimeout(total=10)) as session:
            headers = {"X-API-Key": AUTH_CODE}
            
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∫–æ–Ω—Ñ–∏–≥–∏ –∏ –∏—â–µ–º –Ω—É–∂–Ω—ã–π
            async with session.get(f"{API_BASE_URL}/all-configs", headers=headers) as resp:
                if resp.status != 200:
                    logger.error(f"API error getting all configs: {resp.status}")
                    return None
                
                try:
                    data = await resp.json()
                except aiohttp.ContentTypeError as e:
                    logger.error(f"Invalid JSON response: {e}")
                    return None
                
                configs = data.get('configs', [])
                
                # –ò—â–µ–º –∫–æ–Ω—Ñ–∏–≥ –ø–æ UID
                config = next((c for c in configs if c.get('uid') == uid), None)
                if not config:
                    return None
                
                current_time = int(time.time())
                time_end = config.get('time_end', 0)
                is_active = time_end > current_time
                
                # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤—Ä–µ–º—è
                if time_end == 0:
                    time_end_formatted = "–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ"
                else:
                    from datetime import datetime
                    time_end_formatted = datetime.fromtimestamp(time_end).strftime("%d.%m.%Y %H:%M")
                
                return {
                    'uid': config.get('uid'),
                    'tg_id': config.get('tg_id'),
                    'time_end': time_end,
                    'time_end_formatted': time_end_formatted,
                    'server': config.get('server_country'),
                    'is_active': is_active
                }
    except aiohttp.ClientError as e:
        logger.error(f"Network error getting config info: {e}")
        return None
    except Exception as e:
        logger.error(f"Error getting config info: {e}")
        return None

async def get_detailed_statistics() -> dict:
    """–ü–æ–ª—É—á–∞–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —á–µ—Ä–µ–∑ API."""
    try:
        async with aiohttp.ClientSession(timeout=aiohttp.ClientTimeout(total=10)) as session:
            headers = {"X-API-Key": AUTH_CODE}
            
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∫–æ–Ω—Ñ–∏–≥–∏
            async with session.get(f"{API_BASE_URL}/all-configs", headers=headers) as resp:
                if resp.status != 200:
                    logger.error(f"API error getting all configs: {resp.status}")
                    return {
                        'users': {'total': 0, 'active': 0, 'trial_used': 0, 'with_balance': 0},
                        'configs': {'total': 0, 'active': 0, 'expired': 0, 'fi': 0, 'nl': 0},
                        'referrals': {'total': 0, 'top_referrer': '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö'}
                    }
                
                try:
                    data = await resp.json()
                except aiohttp.ContentTypeError as e:
                    logger.error(f"Invalid JSON response: {e}")
                    return {
                        'users': {'total': 0, 'active': 0, 'trial_used': 0, 'with_balance': 0},
                        'configs': {'total': 0, 'active': 0, 'expired': 0, 'fi': 0, 'nl': 0},
                        'referrals': {'total': 0, 'top_referrer': '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö'}
                    }
                
                configs = data.get('configs', [])
                
                current_time = int(time.time())
                
                # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ–Ω—Ñ–∏–≥–∏ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
                total_configs = len(configs)
                active_configs = len([c for c in configs if c.get('time_end', 0) > current_time])
                expired_configs = len([c for c in configs if c.get('time_end', 0) <= current_time and c.get('time_end', 0) > 0])
                fi_configs = len([c for c in configs if c.get('server_country') == 'fi'])
                nl_configs = len([c for c in configs if c.get('server_country') == 'nl'])
                
                # –ü–æ–ª—É—á–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
                user_ids = set()
                active_user_ids = set()
                for config in configs:
                    tg_id = config.get('tg_id')
                    if tg_id and tg_id.strip():
                        user_ids.add(tg_id)
                        if config.get('time_end', 0) > current_time:
                            active_user_ids.add(tg_id)
                
                total_users = len(user_ids)
                active_users = len(active_user_ids)
                
                return {
                    'users': {
                        'total': total_users,
                        'active': active_users,
                        'trial_used': 0,  # –ù—É–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –≤ API
                        'with_balance': 0  # –ù—É–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –≤ API
                    },
                    'configs': {
                        'total': total_configs,
                        'active': active_configs,
                        'expired': expired_configs,
                        'fi': fi_configs,
                        'nl': nl_configs
                    },
                    'referrals': {
                        'total': 0,  # –ù—É–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –≤ API
                        'top_referrer': '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö'  # –ù—É–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –≤ API
                    }
                }
    except aiohttp.ClientError as e:
        logger.error(f"Network error getting detailed statistics: {e}")
        return {
            'users': {'total': 0, 'active': 0, 'trial_used': 0, 'with_balance': 0},
            'configs': {'total': 0, 'active': 0, 'expired': 0, 'fi': 0, 'nl': 0},
            'referrals': {'total': 0, 'top_referrer': '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö'}
        }
    except Exception as e:
        logger.error(f"Error getting detailed statistics: {e}")
        return {
            'users': {'total': 0, 'active': 0, 'trial_used': 0, 'with_balance': 0},
            'configs': {'total': 0, 'active': 0, 'expired': 0, 'fi': 0, 'nl': 0},
            'referrals': {'total': 0, 'top_referrer': '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö'}
        }

# –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Å–∏—Å—Ç–µ–º–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏

@router.callback_query(F.data == "admin_cleanup_expired")
async def cleanup_expired_configs(callback: types.CallbackQuery):
    """–û—á–∏—â–∞–µ—Ç –∏—Å—Ç–µ–∫—à–∏–µ –∫–æ–Ω—Ñ–∏–≥–∏ —á–µ—Ä–µ–∑ API."""
    if not is_admin(callback.from_user.id):
        await callback.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
        return
    
    try:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º API –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –∏—Å—Ç–µ–∫—à–∏—Ö –∫–æ–Ω—Ñ–∏–≥–æ–≤
        async with aiohttp.ClientSession() as session:
            headers = {"X-API-Key": AUTH_CODE}
            
            # –ü–æ–∫–∞ —á—Ç–æ –ø—Ä–æ—Å—Ç–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ, —Ç–∞–∫ –∫–∞–∫ API —ç–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω
            await callback.message.edit_text(
                f"üßπ –û—á–∏—Å—Ç–∫–∞ –∏—Å—Ç–µ–∫—à–∏—Ö –∫–æ–Ω—Ñ–∏–≥–æ–≤\n\n"
                f"‚ö†Ô∏è –§—É–Ω–∫—Ü–∏—è –æ—á–∏—Å—Ç–∫–∏ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞\n\n"
                f"–ò—Å—Ç–µ–∫—à–∏–µ –∫–æ–Ω—Ñ–∏–≥–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å—Ç–∞–Ω–æ–≤—è—Ç—Å—è –¥–æ—Å—Ç—É–ø–Ω—ã–º–∏ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è."
            )
        
    except Exception as e:
        logger.error(f"Error cleaning expired configs: {e}")
        await callback.message.edit_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ: {str(e)}")
    
    await callback.answer()

@router.callback_query(F.data == "admin_reload_stats")
async def reload_statistics(callback: types.CallbackQuery):
    """–ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É."""
    if not is_admin(callback.from_user.id):
        await callback.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
        return
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å–≤–µ–∂—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        stats = await get_user_stats()
        config_stats = await get_config_statistics()
        
        stats_text = (
            f"üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n\n"
            f"üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:\n"
            f"‚Ä¢ –í—Å–µ–≥–æ: {stats['total_users']}\n"
            f"‚Ä¢ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ –ø—Ä–æ–±–Ω—É—é: {stats['trial_used']}\n"
            f"‚Ä¢ –° –±–∞–ª–∞–Ω—Å–æ–º: {stats['with_balance']}\n"
            f"‚Ä¢ –†–µ—Ñ–µ—Ä–∞–ª–æ–≤: {stats['total_referrals']}\n\n"
            f"‚öôÔ∏è –ö–æ–Ω—Ñ–∏–≥–∏:\n"
            f"‚Ä¢ –í—Å–µ–≥–æ: {config_stats['total']}\n"
            f"‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö: {config_stats['active']}\n"
            f"‚Ä¢ –ò—Å—Ç–µ–∫—à–∏—Ö: {config_stats['expired']}\n"
            f"‚Ä¢ –°–≤–æ–±–æ–¥–Ω—ã—Ö: {config_stats['free']}\n"
            f"‚Ä¢ FI: {config_stats['fi_count']}\n"
            f"‚Ä¢ NL: {config_stats['nl_count']}"
        )
        
        await callback.message.edit_text(stats_text)
        
    except Exception as e:
        logger.error(f"Error reloading stats: {e}")
        await callback.message.edit_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏: {str(e)}")
    
    await callback.answer()

@router.callback_query(F.data == "admin_check_availability")
async def check_config_availability(callback: types.CallbackQuery):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –∫–æ–Ω—Ñ–∏–≥–æ–≤ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–∞—Ö —á–µ—Ä–µ–∑ API."""
    try:
        if not is_admin(callback.from_user.id):
            await callback.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
            return
        
        async with aiohttp.ClientSession(timeout=aiohttp.ClientTimeout(total=15)) as session:
            headers = {"X-API-Key": AUTH_CODE}
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞
            fi_available = False
            nl_available = False
            any_available = False
            
            try:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º FI —Å–µ—Ä–≤–µ—Ä
                async with session.get(f"{API_BASE_URL}/check-available-configs?server=fi", headers=headers) as resp:
                    if resp.status == 200:
                        try:
                            data = await resp.json()
                            fi_available = data.get('available', False)
                        except aiohttp.ContentTypeError:
                            logger.error("Invalid JSON response from FI server check")
                    else:
                        logger.error(f"FI server check failed with status: {resp.status}")
            except aiohttp.ClientError as e:
                logger.error(f"Network error checking FI server: {e}")
            
            try:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º NL —Å–µ—Ä–≤–µ—Ä
                async with session.get(f"{API_BASE_URL}/check-available-configs?server=nl", headers=headers) as resp:
                    if resp.status == 200:
                        try:
                            data = await resp.json()
                            nl_available = data.get('available', False)
                        except aiohttp.ContentTypeError:
                            logger.error("Invalid JSON response from NL server check")
                    else:
                        logger.error(f"NL server check failed with status: {resp.status}")
            except aiohttp.ClientError as e:
                logger.error(f"Network error checking NL server: {e}")
            
            try:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—â—É—é –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å
                async with session.get(f"{API_BASE_URL}/check-available-configs", headers=headers) as resp:
                    if resp.status == 200:
                        try:
                            data = await resp.json()
                            any_available = data.get('available', False)
                        except aiohttp.ContentTypeError:
                            logger.error("Invalid JSON response from general availability check")
                            any_available = fi_available or nl_available
                    else:
                        logger.error(f"General availability check failed with status: {resp.status}")
                        any_available = fi_available or nl_available
            except aiohttp.ClientError as e:
                logger.error(f"Network error checking general availability: {e}")
                any_available = fi_available or nl_available
            
            availability_text = (
                f"üìä –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –∫–æ–Ω—Ñ–∏–≥–æ–≤\n\n"
                f"üá´üáÆ –§–∏–Ω–ª—è–Ω–¥–∏—è: {'‚úÖ –î–æ—Å—Ç—É–ø–Ω—ã' if fi_available else '‚ùå –ù–µ—Ç —Å–≤–æ–±–æ–¥–Ω—ã—Ö'}\n"
                f"üá≥üá± –ù–∏–¥–µ—Ä–ª–∞–Ω–¥—ã: {'‚úÖ –î–æ—Å—Ç—É–ø–Ω—ã' if nl_available else '‚ùå –ù–µ—Ç —Å–≤–æ–±–æ–¥–Ω—ã—Ö'}\n"
                f"üåç –û–±—â–∞—è –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å: {'‚úÖ –ï—Å—Ç—å –∫–æ–Ω—Ñ–∏–≥–∏' if any_available else '‚ùå –ù–µ—Ç –∫–æ–Ω—Ñ–∏–≥–æ–≤'}\n\n"
                f"üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: {'–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–µ –∫–æ–Ω—Ñ–∏–≥–∏' if not any_available else '–°–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–æ—Ä–º–∞–ª—å–Ω–æ'}"
            )
            
            await callback.message.edit_text(availability_text)
        
    except Exception as e:
        logger.error(f"Error checking availability: {e}")
        await callback.message.edit_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ: {str(e)}")
    
    await callback.answer()

@router.callback_query(F.data == "admin_config_stats")
async def show_config_statistics(callback: types.CallbackQuery):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫–æ–Ω—Ñ–∏–≥–æ–≤."""
    try:
        if not is_admin(callback.from_user.id):
            await callback.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
            return
        
        config_stats = await get_config_statistics()
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –≤—Ä–µ–º–µ–Ω–∏
        current_time = int(time.time())
        tomorrow = current_time + 86400
        week = current_time + 604800
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ–Ω—Ñ–∏–≥–∏ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        expiring_soon = 0
        expiring_week = 0
        
        try:
            async with aiohttp.ClientSession(timeout=aiohttp.ClientTimeout(total=10)) as session:
                headers = {"X-API-Key": AUTH_CODE}
                async with session.get(f"{API_BASE_URL}/all-configs", headers=headers) as resp:
                    if resp.status == 200:
                        try:
                            data = await resp.json()
                            configs = data.get('configs', [])
                            
                            # –ö–æ–Ω—Ñ–∏–≥–∏, –∏—Å—Ç–µ–∫–∞—é—â–∏–µ –≤ –±–ª–∏–∂–∞–π—à–∏–µ 24 —á–∞—Å–∞
                            expiring_soon = len([c for c in configs if current_time < c.get('time_end', 0) <= tomorrow])
                            
                            # –ö–æ–Ω—Ñ–∏–≥–∏, –∏—Å—Ç–µ–∫–∞—é—â–∏–µ –≤ –±–ª–∏–∂–∞–π—à–∏–µ 7 –¥–Ω–µ–π
                            expiring_week = len([c for c in configs if current_time < c.get('time_end', 0) <= week])
                        except aiohttp.ContentTypeError as e:
                            logger.error(f"Invalid JSON response in config stats: {e}")
                    else:
                        logger.error(f"API error getting configs for stats: {resp.status}")
        except aiohttp.ClientError as e:
            logger.error(f"Network error getting config stats: {e}")
        except Exception as e:
            logger.error(f"Error getting config stats: {e}")
        
        stats_text = (
            f"üìä –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–æ–Ω—Ñ–∏–≥–æ–≤\n\n"
            f"üìà –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n"
            f"‚Ä¢ –í—Å–µ–≥–æ –∫–æ–Ω—Ñ–∏–≥–æ–≤: {config_stats['total']}\n"
            f"‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö: {config_stats['active']}\n"
            f"‚Ä¢ –ò—Å—Ç–µ–∫—à–∏—Ö: {config_stats['expired']}\n"
            f"‚Ä¢ –°–≤–æ–±–æ–¥–Ω—ã—Ö: {config_stats['free']}\n\n"
            f"üåç –ü–æ —Å–µ—Ä–≤–µ—Ä–∞–º:\n"
            f"‚Ä¢ üá´üáÆ –§–∏–Ω–ª—è–Ω–¥–∏—è: {config_stats['fi_count']}\n"
            f"‚Ä¢ üá≥üá± –ù–∏–¥–µ—Ä–ª–∞–Ω–¥—ã: {config_stats['nl_count']}\n\n"
            f"‚è∞ –ò—Å—Ç–µ–∫–∞—é—â–∏–µ:\n"
            f"‚Ä¢ –í –±–ª–∏–∂–∞–π—à–∏–µ 24 —á–∞—Å–∞: {expiring_soon}\n"
            f"‚Ä¢ –í –±–ª–∏–∂–∞–π—à–∏–µ 7 –¥–Ω–µ–π: {expiring_week}\n\n"
            f"üìä –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: {round((config_stats['active'] / config_stats['total']) * 100, 1) if config_stats['total'] > 0 else 0}%"
        )
        
        await callback.message.edit_text(stats_text)
        
    except Exception as e:
        logger.error(f"Error getting config stats: {e}")
        await callback.message.edit_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {str(e)}")
    
    await callback.answer()
