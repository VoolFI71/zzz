from aiogram import Router, F, types
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
import logging
import time
from datetime import datetime
import aiohttp
import os
import asyncio

logger = logging.getLogger(__name__)

router = Router()

# ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
ADMIN_ID = 746560409

# API –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
API_BASE_URL = "http://fastapi:8080"
AUTH_CODE = os.getenv("AUTH_CODE")

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ AUTH_CODE
if not AUTH_CODE:
    logger.error("AUTH_CODE environment variable is not set!")
    raise ValueError("AUTH_CODE environment variable is required")

class AdminStates(StatesGroup):
    waiting_for_message = State()
    waiting_for_notification_type = State()
    waiting_for_user_search = State()
    waiting_for_config_uid = State()
    waiting_for_promo_message = State()

def is_admin(user_id: int) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º."""
    return user_id == ADMIN_ID

@router.message(F.text == "üîß –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å")
async def admin_panel(message: types.Message):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞."""
    try:
        if not is_admin(message.from_user.id):
            await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏.")
            return
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üì¢ –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—Å–µ–º", callback_data="admin_broadcast")],
            [InlineKeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="admin_stats")],
            [InlineKeyboardButton(text="üíµ –î–æ—Ö–æ–¥ (—Ä—É–± / –∑–≤–µ–∑–¥—ã)", callback_data="admin_revenue")],
            [InlineKeyboardButton(text="üîç –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", callback_data="admin_search_user")],
            [InlineKeyboardButton(text="‚öôÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥–∞–º–∏", callback_data="admin_configs")],
            [InlineKeyboardButton(text="üìà –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="admin_detailed_stats")],
            [InlineKeyboardButton(text="üîß –°–∏—Å—Ç–µ–º–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏", callback_data="admin_system")],
            [InlineKeyboardButton(text="üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø–æ–¥–ø–∏—Å–∫–µ", callback_data="admin_notifications")],
        ])
        
        await message.answer(
            "üîß –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=keyboard
        )
    except Exception as e:
        logger.error(f"Error in admin_panel: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏.")

@router.callback_query(F.data == "notif")
async def send_notif(callback: types.CallbackQuery, bot):
    if not is_admin(callback.from_user.id):
        await callback.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
        return

    await callback.answer()  # —É–±—Ä–∞—Ç—å "—á–∞—Å–∏–∫–∏" —É –∫–ª–∏–µ–Ω—Ç–∞

    url = f"{API_BASE_URL}/expiring-users"
    headers = {"X-API-Key": AUTH_CODE}
            
    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –∏—Å—Ç–µ–∫–∞—é—â–∏–º–∏ –ø–æ–¥–ø–∏—Å–∫–∞–º–∏
    try:
        async with aiohttp.ClientSession() as session:
            async with session.get(url, headers=headers, timeout=15) as resp:
                if resp.status != 200:
                    text = await resp.text()
                    logger.error(f"/expiring-users returned {resp.status}: {text}")
                    await callback.message.answer(f"–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {resp.status}")
                    return
                data = await resp.json()
    except Exception as e:
        logger.error(f"Error fetching /expiring-users: {e}")
        await callback.message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –∫ —Å–µ—Ä–≤–µ—Ä—É: {e}")
        return

    if not data:
        await callback.message.answer("–ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –ø–æ–¥–ø–∏—Å–∫–æ–π, –∏—Å—Ç–µ–∫–∞—é—â–µ–π –≤ –±–ª–∏–∂–∞–π—à–∏–µ 8 —á–∞—Å–æ–≤.")
        return

    sent = 0
    failed = 0
    invalid = 0

    now = int(time.time())

    for item in data:
        tg = item.get("tg_id")
        te = item.get("time_end")
        if not tg or te is None:
            invalid += 1
            continue

        try:
            te = int(te)
        except (TypeError, ValueError):
            invalid += 1
            continue

        # –≤—ã—á–∏—Å–ª—è–µ–º –æ—Å—Ç–∞–≤—à–∏–µ—Å—è —Å–µ–∫—É–Ω–¥—ã/–º–∏–Ω—É—Ç—ã
        remaining_sec = te - now
        if remaining_sec < 0:
            # –µ—Å–ª–∏ —É–∂–µ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–æ ‚Äî –º–æ–∂–Ω–æ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å –∏–ª–∏ —É–≤–µ–¥–æ–º–∏—Ç—å –∫–∞–∫ "—É–∂–µ –∏—Å—Ç–µ–∫–ª–æ"
            text = "–í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –∫–æ–Ω—Ñ–∏–≥ —É–∂–µ –∏—Å—Ç–µ–∫–ª–∞."
        else:
            minutes = remaining_sec // 60
            # –æ–∫—Ä—É–≥–ª–µ–Ω–∏–µ –≤–≤–µ—Ä—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è "–æ—Å—Ç–∞–ª–æ—Å—å N –º–∏–Ω—É—Ç"
            if remaining_sec % 60:
                minutes += 1
            text = f"üîî –í–Ω–∏–º–∞–Ω–∏–µ! –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –≤–∞—à –∫–æ–Ω—Ñ–∏–≥ –∏—Å—Ç–µ–∫–∞–µ—Ç —á–µ—Ä–µ–∑ {minutes} –º–∏–Ω—É—Ç."

        try:
            await bot.send_message(int(tg), text)
            sent += 1
        except Exception as e:
            logger.warning(f"Failed to send notif to {tg}: {e}")
            failed += 1

        # –Ω–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞, —á—Ç–æ–±—ã –Ω–µ –ø—Ä–µ–≤—ã—à–∞—Ç—å –ª–∏–º–∏—Ç—ã
        await asyncio.sleep(0.05)  # 50ms, —É–≤–µ–ª–∏—á—å—Ç–µ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏

    summary = (
        f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã.\n\n"
        f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {sent}\n"
        f"–ù–µ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ (–æ—à–∏–±–∫–∏): {failed}\n"
        f"–ü—Ä–æ–ø—É—â–µ–Ω–æ (–Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –∑–∞–ø–∏—Å–∏): {invalid}\n"
        f"–í—Å–µ–≥–æ –ø—Ä–æ–≤–µ—Ä–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π: {len(data)}"
    )
    await callback.message.answer(summary)

@router.callback_query(F.data == "admin_notifications")
async def notifications_menu(callback: types.CallbackQuery):
    """–ú–µ–Ω—é —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ç–∏–ø–æ–≤ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –¥–ª—è —É–≤–µ–ª–∏—á–µ–Ω–∏—è –ø—Ä–æ–¥–∞–∂."""
    if not is_admin(callback.from_user.id):
        await callback.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
        return
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚è∞ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ–∫–æ–Ω—á–∞–Ω–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏", callback_data="notif")],
        [InlineKeyboardButton(text="üéØ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –±–µ–∑ –ø–æ–¥–ø–∏—Å–∫–∏ (–ø—Ä–∏–≤–ª–µ—á–µ–Ω–∏–µ)", callback_data="notif_no_sub")],
        [InlineKeyboardButton(text="üß™ –¢–æ–ª—å–∫–æ –ø—Ä–æ–±–Ω–∞—è, –±–µ–∑ –ø–æ–∫—É–ø–æ–∫", callback_data="notif_trial_only")],
        [InlineKeyboardButton(text="üíé –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å –∏—Å—Ç–µ–∫—à–µ–π –ø–æ–¥–ø–∏—Å–∫–æ–π (–≤–æ–∑–≤—Ä–∞—Ç)", callback_data="notif_expired")],
        [InlineKeyboardButton(text="üî• –ê–∫—Ü–∏—è/—Å–∫–∏–¥–∫–∞", callback_data="notif_promo")],
        # [InlineKeyboardButton(text="üì¢ –ù–æ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏/–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è", callback_data="notif_features")],
        # [InlineKeyboardButton(text="üí° –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞—Ö", callback_data="notif_benefits")],
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å", callback_data="admin_panel")],
    ])
    
    await callback.message.edit_text(
        "üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è —É–≤–µ–ª–∏—á–µ–Ω–∏—è –ø—Ä–æ–¥–∞–∂\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Ä–∞—Å—Å—ã–ª–∫–∏:",
        reply_markup=keyboard
    )
    await callback.answer()
@router.callback_query(F.data == "admin_revenue")
async def show_revenue(callback: types.CallbackQuery):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—É–º–º–∞—Ä–Ω—ã–µ –∞–≥—Ä–µ–≥–∞—Ç—ã –æ–ø–ª–∞—Ç: —Ä—É–±–ª–∏ –∏ –∑–≤—ë–∑–¥—ã."""
    if not is_admin(callback.from_user.id):
        await callback.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
        return

    try:
        from database import db as _db
        aggr = await _db.get_payments_aggregates()
        total_rub = aggr.get("total_rub", 0)
        total_stars = aggr.get("total_stars", 0)
        count_rub = aggr.get("count_rub", 0)
        count_stars = aggr.get("count_stars", 0)

        text = (
            "üíµ –î–æ—Ö–æ–¥ —Å–µ—Ä–≤–∏—Å–∞\n\n"
            f"–†—É–±–ª–∏: {total_rub} ‚ÇΩ (–ø–ª–∞—Ç–µ–∂–µ–π: {count_rub})\n"
            f"–ó–≤—ë–∑–¥—ã: {total_stars} ‚≠ê (–ø–ª–∞—Ç–µ–∂–µ–π: {count_stars})\n\n"
            "–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: —Å—É–º–º—ã —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞—é—Ç—Å—è –ø–æ –∞–∫—Ç—É–∞–ª—å–Ω—ã–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º —Ü–µ–Ω –Ω–∞ –º–æ–º–µ–Ω—Ç –æ–ø–ª–∞—Ç—ã."
        )
        await callback.message.edit_text(text)
    except Exception as e:
        logger.error(f"Error showing revenue: {e}")
        await callback.message.edit_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –¥–æ—Ö–æ–¥–µ")
    await callback.answer()


@router.callback_query(F.data == "admin_panel")
async def back_to_admin_panel(callback: types.CallbackQuery):
    """–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏."""
    if not is_admin(callback.from_user.id):
        await callback.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
        return
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üì¢ –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—Å–µ–º", callback_data="admin_broadcast")],
        [InlineKeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="admin_stats")],
        [InlineKeyboardButton(text="üíµ –î–æ—Ö–æ–¥ (—Ä—É–± / –∑–≤–µ–∑–¥—ã)", callback_data="admin_revenue")],
        [InlineKeyboardButton(text="üîç –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", callback_data="admin_search_user")],
        [InlineKeyboardButton(text="‚öôÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥–∞–º–∏", callback_data="admin_configs")],
        [InlineKeyboardButton(text="üìà –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="admin_detailed_stats")],
        [InlineKeyboardButton(text="üîß –°–∏—Å—Ç–µ–º–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏", callback_data="admin_system")],
        [InlineKeyboardButton(text="üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø–æ–¥–ø–∏—Å–∫–µ", callback_data="admin_notifications")],
    ])
    
    await callback.message.edit_text(
        "üîß –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=keyboard
    )
    await callback.answer()

@router.callback_query(F.data == "notif_no_sub")
async def send_no_sub_notification(callback: types.CallbackQuery, bot):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –±–µ–∑ –ø–æ–¥–ø–∏—Å–∫–∏."""
    if not is_admin(callback.from_user.id):
        await callback.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
        return
    
    await callback.answer()
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –±–µ–∑ –ø–æ–¥–ø–∏—Å–∫–∏
    try:
        user_ids = await get_users_without_any_subscription()
        if not user_ids:
            await callback.message.answer("–ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –±–µ–∑ –ø–æ–¥–ø–∏—Å–∫–∏.")
            return
        
        message_text = (
            "üöÄ –ü—Ä–∏–≤–µ—Ç! üëã\n\n"
            "–£ –≤–∞—Å –µ—â—ë –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –Ω–∞—à VPN-—Å–µ—Ä–≤–∏—Å.\n\n"
            "üîí –ü–æ–ª—É—á–∏—Ç–µ –ø–æ–ª–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫:\n"
            "‚Ä¢ –ë–µ–∑–æ–ø–∞—Å–Ω–æ–º—É –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É\n"
            "‚Ä¢ –û–±—Ö–æ–¥—É –±–ª–æ–∫–∏—Ä–æ–≤–æ–∫\n"
            "‚Ä¢ –ó–∞—â–∏—Ç–µ –ª–∏—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö\n"
            "‚Ä¢ –í—ã—Å–æ–∫–æ–π —Å–∫–æ—Ä–æ—Å—Ç–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è\n\n"
            "üéÅ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å ‚Äî –ø–µ—Ä–≤—ã–µ 3 –¥–Ω—è –±–µ—Å–ø–ª–∞—Ç–Ω–æ!\n\n"
            "–ù–∞–∂–º–∏—Ç–µ /start –¥–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏."
        )
        
        sent = 0
        failed = 0
        
        for user_id in user_ids:
            try:
                await bot.send_message(user_id, message_text)
                sent += 1
            except Exception as e:
                logger.warning(f"Failed to send no-sub notification to {user_id}: {e}")
                failed += 1
            await asyncio.sleep(0.05)
        
        await callback.message.answer(
            f"‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –±–µ–∑ –ø–æ–¥–ø–∏—Å–∫–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n\n"
            f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n"
            f"‚Ä¢ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {sent}\n"
            f"‚Ä¢ –û—à–∏–±–æ–∫: {failed}\n"
            f"‚Ä¢ –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(user_ids)}"
        )
        
    except Exception as e:
        logger.error(f"Error in send_no_sub_notification: {e}")
        await callback.message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—Å—ã–ª–∫–µ: {str(e)}")

@router.callback_query(F.data == "notif_expired")
async def send_expired_notification(callback: types.CallbackQuery, bot):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º —Å –∏—Å—Ç–µ–∫—à–µ–π –ø–æ–¥–ø–∏—Å–∫–æ–π."""
    if not is_admin(callback.from_user.id):
        await callback.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
        return
    
    await callback.answer()
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –∏—Å—Ç–µ–∫—à–µ–π –ø–æ–¥–ø–∏—Å–∫–æ–π
    try:
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ bot –ë–î
        all_bot_users = await get_all_user_ids()
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–æ–π –∏–∑ FastAPI
        active_sub_users = await get_users_with_active_subscription()
        
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å –∏—Å—Ç–µ–∫—à–µ–π –ø–æ–¥–ø–∏—Å–∫–æ–π = –µ—Å—Ç—å –≤ bot –ë–î, –Ω–æ –Ω–µ—Ç –≤ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–∫–∞—Ö
        # –ò –ø—Ä–∏ —ç—Ç–æ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ –ø—Ä–æ–±–Ω—É—é –ø–æ–¥–ø–∏—Å–∫—É –∏–ª–∏ –∏–º–µ–ª–∏ –±–∞–ª–∞–Ω—Å
        user_ids = []
        for user_id in all_bot_users:
            if user_id not in active_sub_users:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–æ–±–Ω—É—é –ø–æ–¥–ø–∏—Å–∫—É –∏–ª–∏ –∏–º–µ–ª –±–∞–ª–∞–Ω—Å
                import aiosqlite
                async with aiosqlite.connect("users.db") as conn:
                    async with conn.cursor() as cursor:
                        await cursor.execute("""
                            SELECT trial_3d_used, balance FROM users WHERE tg_id = ?
                        """, (user_id,))
                        row = await cursor.fetchone()
                        if row and (row[0] == 1 or row[1] > 0):
                            user_ids.append(user_id)
        
        if not user_ids:
            await callback.message.answer("–ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –∏—Å—Ç–µ–∫—à–µ–π –ø–æ–¥–ø–∏—Å–∫–æ–π.")
            return
        
        message_text = (
            "üîÑ –ú—ã —Å–∫—É—á–∞–µ–º! üòä\n\n"
            "–í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ —Å–µ–π—á–∞—Å –Ω–µ –∞–∫—Ç–∏–≤–Ω–∞, –Ω–æ –º—ã –ø–æ–¥–≥–æ—Ç–æ–≤–∏–ª–∏ –¥–ª—è –≤–∞—Å:\n\n"
            "‚Ä¢ ‚ôæÔ∏è –ë–µ–∑–ª–∏–º–∏—Ç–Ω—ã–π —Ç—Ä–∞—Ñ–∏–∫ –¥–ª—è –º–æ–±–∏–ª—å–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞ (–µ—Å–ª–∏ –≤ —Ç–∞—Ä–∏—Ñ–µ –µ—Å—Ç—å –æ–ø—Ü–∏—è –Ω–∞ –±–µ–∑–ª–∏–º–∏—Ç–Ω—ã–µ —Å–æ—Ü—Å–µ—Ç–∏, –Ω–∞–ø—Ä–∏–º–µ—Ä VK)\n"
            "‚Ä¢ üéÅ –ë–æ–Ω—É—Å–Ω—ã–µ –¥–Ω–∏ –ø—Ä–∏ –ø—Ä–æ–¥–ª–µ–Ω–∏–∏\n"
            "‚Ä¢ üõü –ü–æ–¥–¥–µ—Ä–∂–∫–∞ 24/7\n\n"
            "–í–∞–∂–Ω–æ: –µ—Å–ª–∏ —É –≤–∞—Å –ú–¢–°, –ô–û–¢–ê –∏–ª–∏ –¢–ï–õ–ï2 ‚Äî —Ç–æ —Å –Ω–∞—à–∏–º VPN –≤—ã —Å–º–æ–∂–µ—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –º–æ–±–∏–ª—å–Ω—ã–º –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–æ–º –¥–∞–∂–µ —Ç–∞–º, –≥–¥–µ –µ–≥–æ –æ—Ç–∫–ª—é—á–∞—é—Ç.\n\n"
        )
        
        sent = 0
        failed = 0
        
        for user_id in user_ids:
            try:
                await bot.send_message(user_id, message_text)
                sent += 1
            except Exception as e:
                logger.warning(f"Failed to send expired notification to {user_id}: {e}")
                failed += 1
            await asyncio.sleep(0.05)
        
        await callback.message.answer(
            f"‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º —Å –∏—Å—Ç–µ–∫—à–µ–π –ø–æ–¥–ø–∏—Å–∫–æ–π –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n\n"
            f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n"
            f"‚Ä¢ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {sent}\n"
            f"‚Ä¢ –û—à–∏–±–æ–∫: {failed}\n"
            f"‚Ä¢ –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(user_ids)}"
        )
        
    except Exception as e:
        logger.error(f"Error in send_expired_notification: {e}")
        await callback.message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—Å—ã–ª–∫–µ: {str(e)}")

@router.callback_query(F.data == "notif_promo")
async def send_promo_notification(callback: types.CallbackQuery, state: FSMContext):
    """–ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø—Ä–æ–º–æ-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è."""
    if not is_admin(callback.from_user.id):
        await callback.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
        return
    
    await callback.message.edit_text(
        "üî• –ü—Ä–æ–º–æ-—Ä–∞—Å—Å—ã–ª–∫–∞\n\n"
        "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –∞–∫—Ü–∏–∏/—Å–∫–∏–¥–∫–∏, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º:"
    )
    await state.set_state(AdminStates.waiting_for_promo_message)
    await callback.answer()

@router.callback_query(F.data == "notif_features")
async def send_features_notification(callback: types.CallbackQuery, bot):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤—ã—Ö —Ñ—É–Ω–∫—Ü–∏—è—Ö."""
    if not is_admin(callback.from_user.id):
        await callback.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
        return
    
    await callback.answer()
    
    try:
        user_ids = await get_all_user_ids()
        if not user_ids:
            await callback.message.answer("–í –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")
            return
        
        message_text = (
            "üÜï –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–µ—Ä–≤–∏—Å–∞! üéâ\n\n"
            "–ú—ã –¥–æ–±–∞–≤–∏–ª–∏ –Ω–æ–≤—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:\n\n"
            "‚ú® –ß—Ç–æ –Ω–æ–≤–æ–≥–æ:\n"
            "‚Ä¢ –£–ª—É—á—à–µ–Ω–Ω–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è\n"
            "‚Ä¢ –ù–æ–≤—ã–µ —Å–µ—Ä–≤–µ—Ä—ã –≤ —Ä–∞–∑–Ω—ã—Ö —Å—Ç—Ä–∞–Ω–∞—Ö\n"
            "‚Ä¢ –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å\n"
            "‚Ä¢ –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è —Ç–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∞\n\n"
            "üöÄ –û–±–Ω–æ–≤–∏—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∏ –Ω–∞—Å–ª–∞–∂–¥–∞–π—Ç–µ—Å—å —É–ª—É—á—à–µ–Ω–∏—è–º–∏!\n\n"
            "–°–ø–∞—Å–∏–±–æ, —á—Ç–æ –æ—Å—Ç–∞–µ—Ç–µ—Å—å —Å –Ω–∞–º–∏! üíô"
        )
        
        sent = 0
        failed = 0
        
        for user_id in user_ids:
            try:
                await bot.send_message(user_id, message_text)
                sent += 1
            except Exception as e:
                logger.warning(f"Failed to send features notification to {user_id}: {e}")
                failed += 1
            await asyncio.sleep(0.05)
        
        await callback.message.answer(
            f"‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –æ –Ω–æ–≤—ã—Ö —Ñ—É–Ω–∫—Ü–∏—è—Ö –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n\n"
            f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n"
            f"‚Ä¢ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {sent}\n"
            f"‚Ä¢ –û—à–∏–±–æ–∫: {failed}\n"
            f"‚Ä¢ –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(user_ids)}"
        )
        
    except Exception as e:
        logger.error(f"Error in send_features_notification: {e}")
        await callback.message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—Å—ã–ª–∫–µ: {str(e)}")

@router.callback_query(F.data == "notif_benefits")
async def send_benefits_notification(callback: types.CallbackQuery, bot):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞—Ö –ø–æ–¥–ø–∏—Å–∫–∏."""
    if not is_admin(callback.from_user.id):
        await callback.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
        return
    
    await callback.answer()
    
    try:
        user_ids = await get_all_user_ids()
        if not user_ids:
            await callback.message.answer("–í –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")
            return
        
        message_text = (
            "üíé –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞—Ö –≤–∞—à–µ–π –ø–æ–¥–ø–∏—Å–∫–∏\n\n"
            "üîí –ß—Ç–æ –≤—ã –ø–æ–ª—É—á–∞–µ—Ç–µ:\n"
            "‚Ä¢ –ü–æ–ª–Ω–∞—è –∞–Ω–æ–Ω–∏–º–Ω–æ—Å—Ç—å –≤ —Å–µ—Ç–∏\n"
            "‚Ä¢ –û–±—Ö–æ–¥ –ª—é–±—ã—Ö –±–ª–æ–∫–∏—Ä–æ–≤–æ–∫\n"
            "‚Ä¢ –î–æ—Å—Ç—É–ø –∫ –∏–Ω–æ—Å—Ç—Ä–∞–Ω–Ω—ã–º —Ä–µ—Å—É—Ä—Å–∞–º\n"
            "‚Ä¢ –í—ã—Å–æ–∫–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è\n"
            "‚Ä¢ –ü–æ–¥–¥–µ—Ä–∂–∫–∞ 24/7\n\n"
            "üéØ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –≤–∞—à–µ–π –ø–æ–¥–ø–∏—Å–∫–∏!\n\n"
            "–°–ø–∞—Å–∏–±–æ –∑–∞ –¥–æ–≤–µ—Ä–∏–µ! üíô"
        )
        
        sent = 0
        failed = 0
        
        for user_id in user_ids:
            try:
                await bot.send_message(user_id, message_text)
                sent += 1
            except Exception as e:
                logger.warning(f"Failed to send benefits notification to {user_id}: {e}")
                failed += 1
            await asyncio.sleep(0.05)
        
        await callback.message.answer(
            f"‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –æ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞—Ö –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n\n"
            f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n"
            f"‚Ä¢ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {sent}\n"
            f"‚Ä¢ –û—à–∏–±–æ–∫: {failed}\n"
            f"‚Ä¢ –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(user_ids)}"
        )
        
    except Exception as e:
        logger.error(f"Error in send_benefits_notification: {e}")
        await callback.message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—Å—ã–ª–∫–µ: {str(e)}")

@router.callback_query(F.data == "admin_broadcast")
async def start_broadcast(callback: types.CallbackQuery, state: FSMContext):
    """–ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º."""
    try:
        if not is_admin(callback.from_user.id):
            await callback.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
            return
        
        await callback.message.edit_text(
            "üì¢ –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º\n\n"
            "–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º:"
        )
        await state.set_state(AdminStates.waiting_for_message)
        await callback.answer()
    except Exception as e:
        logger.error(f"Error in start_broadcast: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Ä–∞—Å—Å—ã–ª–∫–∏", show_alert=True)

@router.message(AdminStates.waiting_for_message)
async def process_broadcast_message(message: types.Message, state: FSMContext, bot):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –µ–≥–æ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º."""
    if not is_admin(message.from_user.id):
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
        await state.clear()
        return
    
    broadcast_text = message.text
    if not broadcast_text or len(broadcast_text.strip()) == 0:
        await message.answer("–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ –ë–î
    try:
        user_ids = await get_all_user_ids()
        if not user_ids:
            await message.answer("–í –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")
            await state.clear()
            return
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –æ –Ω–∞—á–∞–ª–µ —Ä–∞—Å—Å—ã–ª–∫–∏
        await message.answer(f"üì§ –ù–∞—á–∏–Ω–∞—é —Ä–∞—Å—Å—ã–ª–∫—É —Å–æ–æ–±—â–µ–Ω–∏—è {len(user_ids)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º...")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
        sent_count = 0
        failed_count = 0
        
        for user_id in user_ids:
            try:
                await bot.send_message(user_id, broadcast_text)
                sent_count += 1
            except Exception as e:
                logger.warning(f"Failed to send message to user {user_id}: {e}")
                failed_count += 1
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç—á–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
        await message.answer(
            f"‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n\n"
            f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n"
            f"‚Ä¢ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {sent_count}\n"
            f"‚Ä¢ –û—à–∏–±–æ–∫: {failed_count}\n"
            f"‚Ä¢ –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(user_ids)}"
        )
        
    except Exception as e:
        logger.error(f"Error during broadcast: {e}")
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—Å—ã–ª–∫–µ: {str(e)}")
    
    await state.clear()

@router.message(AdminStates.waiting_for_promo_message)
async def process_promo_message(message: types.Message, state: FSMContext, bot):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø—Ä–æ–º–æ-—Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –µ–≥–æ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º."""
    if not is_admin(message.from_user.id):
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
        await state.clear()
        return
    
    promo_text = message.text
    if not promo_text or len(promo_text.strip()) == 0:
        await message.answer("–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:")
        return
    
    try:
        user_ids = await get_all_user_ids()
        if not user_ids:
            await message.answer("–í –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")
            await state.clear()
            return
        
        await message.answer(f"üî• –ù–∞—á–∏–Ω–∞—é –ø—Ä–æ–º–æ-—Ä–∞—Å—Å—ã–ª–∫—É {len(user_ids)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º...")
        
        sent_count = 0
        failed_count = 0
        
        for user_id in user_ids:
            try:
                await bot.send_message(user_id, promo_text)
                sent_count += 1
            except Exception as e:
                logger.warning(f"Failed to send promo message to user {user_id}: {e}")
                failed_count += 1
            await asyncio.sleep(0.05)
        
        await message.answer(
            f"‚úÖ –ü—Ä–æ–º–æ-—Ä–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n\n"
            f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n"
            f"‚Ä¢ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {sent_count}\n"
            f"‚Ä¢ –û—à–∏–±–æ–∫: {failed_count}\n"
            f"‚Ä¢ –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(user_ids)}"
        )
        
    except Exception as e:
        logger.error(f"Error during promo broadcast: {e}")
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–º–æ-—Ä–∞—Å—Å—ã–ª–∫–µ: {str(e)}")
    
    await state.clear()

@router.callback_query(F.data == "admin_stats")
async def show_admin_stats(callback: types.CallbackQuery):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π."""
    if not is_admin(callback.from_user.id):
        await callback.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
        return
    
    try:
        stats = await get_user_stats()
        stats_text = (
            f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n\n"
            f"üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {stats['total_users']}\n"
            f"üéÅ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ –ø—Ä–æ–±–Ω—É—é –ø–æ–¥–ø–∏—Å–∫—É: {stats['trial_used']}\n"
            f"üí∞ –ò–º–µ—é—Ç –±–∞–ª–∞–Ω—Å –¥–Ω–µ–π: {stats['with_balance']}\n"
            f"ü§ù –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤: {stats['total_referrals']}"
        )
        
        await callback.message.edit_text(stats_text)
        
    except Exception as e:
        logger.error(f"Error getting stats: {e}")
        await callback.message.edit_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {str(e)}")
    
    await callback.answer()

async def get_all_user_ids() -> list[str]:
    """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö tg_id –∏–∑ bot –ë–î."""
    try:
        import aiosqlite
        
        async with aiosqlite.connect("users.db") as conn:
            async with conn.cursor() as cursor:
                await cursor.execute("SELECT tg_id FROM users")
                rows = await cursor.fetchall()
                return [row[0] for row in rows if row[0]]
    except Exception as e:
        logger.error(f"Error getting user IDs: {e}")
        return []

async def get_users_without_subscription() -> list[str]:
    """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –±–µ–∑ –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏."""
    try:
        import aiosqlite
        
        async with aiosqlite.connect("users.db") as conn:
            async with conn.cursor() as cursor:
                # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –±–µ–∑ –±–∞–ª–∞–Ω—Å–∞ (–±–µ–∑ –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏)
                await cursor.execute("SELECT tg_id FROM users WHERE balance <= 0")
                rows = await cursor.fetchall()
                return [row[0] for row in rows if row[0]]
    except Exception as e:
        logger.error(f"Error getting users without subscription: {e}")
        return []

async def get_users_with_expired_subscription() -> list[str]:
    """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –∏—Å—Ç–µ–∫—à–µ–π –ø–æ–¥–ø–∏—Å–∫–æ–π."""
    try:
        import aiosqlite
        
        async with aiosqlite.connect("users.db") as conn:
            async with conn.cursor() as cursor:
                # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏, –∫–æ—Ç–æ—Ä—ã–µ –∫–æ–≥–¥–∞-—Ç–æ –∏–º–µ–ª–∏ –ø–æ–¥–ø–∏—Å–∫—É, –Ω–æ —Å–µ–π—á–∞—Å –±–µ–∑ –±–∞–ª–∞–Ω—Å–∞
                # (–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ –ø—Ä–æ–±–Ω—É—é –ø–æ–¥–ø–∏—Å–∫—É –∏–ª–∏ –∏–º–µ–ª–∏ –ø–ª–∞—Ç–Ω—É—é, –Ω–æ –æ–Ω–∞ –∏—Å—Ç–µ–∫–ª–∞)
                await cursor.execute(
                    "SELECT tg_id FROM users WHERE balance <= 0 AND (trial_3d_used = 1 OR paid_count > 0)"
                )
                rows = await cursor.fetchall()
                return [row[0] for row in rows if row[0]]
    except Exception as e:
        logger.error(f"Error getting users with expired subscription: {e}")
        return []

async def get_users_with_active_subscription() -> list[str]:
    """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–æ–π —á–µ—Ä–µ–∑ FastAPI API."""
    try:
        # –ü–æ—Å–∫–æ–ª—å–∫—É /getids –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–æ–ª—å–∫–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –∏—Å—Ç–µ–∫–∞—é—â–∏–º–∏ –ø–æ–¥–ø–∏—Å–∫–∞–º–∏,
        # –∞ –Ω–∞–º –Ω—É–∂–Ω—ã –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ—Å—Ç–æ–π –ø–æ–¥—Ö–æ–¥:
        # –ø–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ bot –ë–î –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º –∏—Ö —á–µ—Ä–µ–∑ /usercodes
        all_bot_users = await get_all_user_ids()
        active_users = []
        
        async with aiohttp.ClientSession() as session:
            for user_id in all_bot_users:
                try:
                    url = f"{API_BASE_URL}/usercodes/{user_id}"
                    headers = {"X-API-Key": AUTH_CODE}
                    async with session.get(url, headers=headers, timeout=15) as resp:
                        if resp.status == 200:
                            # –†–∞–∑–±–∏—Ä–∞–µ–º –∫–æ–Ω—Ñ–∏–≥–∏ –∏ –∏—â–µ–º –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –ê–ö–¢–ò–í–ù–´–ï (time_end > now)
                            try:
                                data = await resp.json()
                            except Exception:
                                # –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ ‚Äî –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–Ω–µ —Ä–∞—Å—Å—ã–ª–∞–µ–º)
                                active_users.append(user_id)
                                continue
                            now_ts = int(time.time())
                            def _parse_time_end(raw: object) -> int:
                                try:
                                    val = int(raw)
                                except Exception:
                                    return 0
                                # –ó–∞—â–∏—Ç–∞ –æ—Ç –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥
                                if val > 10**11:
                                    val = val // 1000
                                return val
                            has_active = any(_parse_time_end(item.get("time_end", 0)) > now_ts for item in data)
                            if has_active:
                                active_users.append(user_id)
                        else:
                            # 404 ‚Äî –Ω–µ—Ç –∫–æ–Ω—Ñ–∏–≥–æ–≤ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Ç–æ—á–Ω–æ –Ω–µ –∞–∫—Ç–∏–≤–Ω—ã–π)
                            if resp.status == 404:
                                pass
                            else:
                                # –õ—é–±–∞—è –∏–Ω–∞—è –æ—à–∏–±–∫–∞ API ‚Äî –ø–æ–¥—Å—Ç—Ä–∞—Ö–æ–≤–∫–∞: –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Ç–∞–∫–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                                active_users.append(user_id)
                except Exception:
                    # –°–µ—Ç–µ–≤–∞—è –æ—à–∏–±–∫–∞ ‚Äî –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Ç–∞–∫–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–Ω–µ —Ä–∞—Å—Å—ã–ª–∞–µ–º)
                    active_users.append(user_id)
                    continue
        return active_users
    except Exception as e:
        logger.error(f"Error getting users with active subscription: {e}")
        return []

async def get_users_without_any_subscription() -> list[str]:
    """–ü–æ–ª—É—á–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –±–µ–∑ –ø–æ–¥–ø–∏—Å–∫–∏ (–Ω–µ –≤ FastAPI –ë–î)."""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ bot –ë–î
        all_bot_users = await get_all_user_ids()
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–æ–π –∏–∑ FastAPI
        active_sub_users = await get_users_with_active_subscription()
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∫–æ—Ç–æ—Ä—ã—Ö –Ω–µ—Ç –≤ —Å–ø–∏—Å–∫–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫
        return [user_id for user_id in all_bot_users if user_id not in active_sub_users]
    except Exception as e:
        logger.error(f"Error getting users without any subscription: {e}")
        return []


async def get_users_trial_only_no_payments() -> list[int]:
    """–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏, –∫—Ç–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–ª –ø—Ä–æ–±–Ω—É—é (trial_3d_used=1), –Ω–æ –µ—â—ë –Ω–∏ —Ä–∞–∑—É –Ω–µ –ø–æ–∫—É–ø–∞–ª (paid_count=0).

    –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–ø–∏—Å–æ–∫ tg_id –∫–∞–∫ int.
    """
    try:
        import aiosqlite
        async with aiosqlite.connect("users.db") as conn:
            async with conn.cursor() as cursor:
                await cursor.execute(
                    "SELECT tg_id FROM users WHERE trial_3d_used = 1 AND (paid_count IS NULL OR paid_count = 0)"
                )
                rows = await cursor.fetchall()
                res: list[int] = []
                for row in rows:
                    try:
                        res.append(int(row[0]))
                    except Exception:
                        continue
                return res
    except Exception as e:
        logger.error(f"Error getting users trial-only: {e}")
        return []


@router.callback_query(F.data == "notif_trial_only")
async def send_trial_only_notification(callback: types.CallbackQuery, bot):
    """–†–∞—Å—Å—ã–ª–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º, –∫—Ç–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–ª –ø—Ä–æ–±–Ω—É—é, –Ω–æ –Ω–µ —Å–æ–≤–µ—Ä—à–∞–ª –æ–ø–ª–∞—Ç—É.

    –¢–µ–∫—Å—Ç –≤–∫–ª—é—á–∞–µ—Ç: –æ–±—Ö–æ–¥ –æ—Ç–∫–ª—é—á–µ–Ω–∏–π –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞ –Ω–∞ –¢–µ–ª–µ2/–ú–¢–°/–ô–æ—Ç–∞ + –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞.
    """
    if not is_admin(callback.from_user.id):
        await callback.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
        return

    await callback.answer()

    try:
        user_ids = await get_users_trial_only_no_payments()
        if not user_ids:
            await callback.message.answer("–ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∫–æ—Ç–æ—Ä—ã–µ —Ç–æ–ª—å–∫–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–ª–∏ –ø—Ä–æ–±–Ω—É—é, –Ω–æ –Ω–µ –ø–æ–∫—É–ø–∞–ª–∏.")
            return

        message_text = (
            "üëã –ü—Ä–∏–≤–µ—Ç! –ù–∞–ø–æ–º–∏–Ω–∞–µ–º, —á—Ç–æ –ø–æ—Å–ª–µ –ø—Ä–æ–±–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏ –≤—ã –µ—â—ë –Ω–µ –æ—Ñ–æ—Ä–º–∏–ª–∏ –ø–æ–ª–Ω—ã–π –¥–æ—Å—Ç—É–ø.\n\n"
            "‚ö° –í–∞–∂–Ω–æ–µ —Å–µ–π—á–∞—Å: –Ω–∞—à VPN –ø–æ–º–æ–≥–∞–µ—Ç –æ–±—Ö–æ–¥–∏—Ç—å –æ—Ç–∫–ª—é—á–µ–Ω–∏—è –º–æ–±–∏–ª—å–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞ —É –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤ –¢–µ–ª–µ2, –ú–¢–° –∏ –ô–û–¢–ê.\n"
            "–î–∞–∂–µ –∫–æ–≥–¥–∞ —Å–≤—è–∑—å —Ä–µ–∂—É—Ç, –≤—ã —Å–º–æ–∂–µ—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–æ–º.\n\n"
            "–° –ø–æ–¥–ø–∏—Å–∫–æ–π –≤—ã –ø–æ–ª—É—á–∞–µ—Ç–µ:\n"
            "‚Ä¢ üîê –ö–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å –∏ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ —Ç—Ä–∞—Ñ–∏–∫–∞\n"
            "‚Ä¢ ‚ôæÔ∏è –ë–µ–∑–ª–∏–º–∏—Ç–Ω—ã–π —Ç—Ä–∞—Ñ–∏–∫\n"
            "‚Ä¢ üöÄ –°—Ç–∞–±–∏–ª—å–Ω–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å –∏ –±—ã—Å—Ç—Ä—ã–µ —Å–µ—Ä–≤–µ—Ä–∞\n"
            "‚Ä¢ üõü –ü–æ–¥–¥–µ—Ä–∂–∫–∞, –µ—Å–ª–∏ —á—Ç–æ-—Ç–æ –ø–æ–π–¥—ë—Ç –Ω–µ —Ç–∞–∫\n\n"
            "–ì–æ—Ç–æ–≤—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å? –û—Ç–∫—Ä–æ–π—Ç–µ /start –∏ –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–∞—Ä–∏—Ñ. –ï—Å–ª–∏ –æ—Å—Ç–∞–ª–∏—Å—å –≤–æ–ø—Ä–æ—Å—ã ‚Äî –Ω–∞–ø–∏—à–∏—Ç–µ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É, –ø–æ–º–æ–∂–µ–º."
        )

        sent = 0
        failed = 0
        for uid in user_ids:
            try:
                await bot.send_message(uid, message_text, disable_web_page_preview=True)
                sent += 1
            except Exception as e:
                logger.warning(f"Failed to send trial-only message to {uid}: {e}")
                failed += 1
            await asyncio.sleep(0.05)

        await callback.message.answer(
            f"‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º —Ç–æ–ª—å–∫–æ —Å –ø—Ä–æ–±–Ω–æ–π –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n\n"
            f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {sent}\n–û—à–∏–±–æ–∫: {failed}\n–í—Å–µ–≥–æ: {len(user_ids)}"
        )
    except Exception as e:
        logger.error(f"Error in send_trial_only_notification: {e}")
        await callback.message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—Å—ã–ª–∫–µ: {str(e)}")


async def get_user_stats() -> dict:
    """–ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–π –ë–î bot –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞."""
    try:
        import aiosqlite
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–π –ë–î bot –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
        async with aiosqlite.connect("users.db") as conn:
            async with conn.cursor() as cursor:
                # –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ bot –ë–î
                await cursor.execute("SELECT COUNT(*) FROM users")
                total_users = (await cursor.fetchone())[0]
                
                # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏, –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–≤—à–∏–µ –ø—Ä–æ–±–Ω—É—é –ø–æ–¥–ø–∏—Å–∫—É
                await cursor.execute("SELECT COUNT(*) FROM users WHERE trial_3d_used = 1")
                trial_used = (await cursor.fetchone())[0]
                
                # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å –±–∞–ª–∞–Ω—Å–æ–º –¥–Ω–µ–π
                await cursor.execute("SELECT COUNT(*) FROM users WHERE balance > 0")
                with_balance = (await cursor.fetchone())[0]
                
                # –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤
                await cursor.execute("SELECT SUM(referral_count) FROM users")
                total_referrals_result = await cursor.fetchone()
                total_referrals = total_referrals_result[0] if total_referrals_result[0] is not None else 0
        
        return {
            'total_users': total_users,
            'trial_used': trial_used,
            'with_balance': with_balance,
            'total_referrals': total_referrals
        }
    except Exception as e:
        logger.error(f"Error getting user stats: {e}")
        return {
            'total_users': 0,
            'trial_used': 0,
            'with_balance': 0,
            'total_referrals': 0
        }

# –ù–æ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏

@router.callback_query(F.data == "admin_search_user")
async def start_user_search(callback: types.CallbackQuery, state: FSMContext):
    """–ù–∞—á–∏–Ω–∞–µ—Ç –ø–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ Telegram ID."""
    try:
        if not is_admin(callback.from_user.id):
            await callback.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
            return
        
        await callback.message.edit_text(
            "üîç –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n\n"
            "–í–≤–µ–¥–∏—Ç–µ Telegram ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø–æ–∏—Å–∫–∞:"
        )
        await state.set_state(AdminStates.waiting_for_user_search)
        await callback.answer()
    except Exception as e:
        logger.error(f"Error in start_user_search: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –ø–æ–∏—Å–∫–∞", show_alert=True)

@router.message(AdminStates.waiting_for_user_search)
async def process_user_search(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    if not is_admin(message.from_user.id):
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
        await state.clear()
        return
    
    try:
        user_id = int(message.text.strip())
        user_info = await get_user_info(user_id)
        
        if user_info:
            info_text = (
                f"üë§ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ\n\n"
                f"üÜî Telegram ID: {user_info['tg_id']}\n"
                f"üéÅ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–ª –ø—Ä–æ–±–Ω—É—é –ø–æ–¥–ø–∏—Å–∫—É: {'–î–∞' if user_info['trial_used'] else '–ù–µ—Ç'}\n"
                f"üí∞ –ë–∞–ª–∞–Ω—Å –¥–Ω–µ–π: {user_info['balance']}\n"
                f"ü§ù –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤: {user_info['referral_count']}\n"
                f"üîó –†–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥: {user_info['referral_code']}\n"
                f"üìÖ –î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {user_info['created_at']}\n"
                f"‚öôÔ∏è –ê–∫—Ç–∏–≤–Ω—ã—Ö –∫–æ–Ω—Ñ–∏–≥–æ–≤: {user_info['active_configs']}"
            )
            await message.answer(info_text)
        else:
            await message.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")
            
    except ValueError:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–π ID.")
        return
    except Exception as e:
        logger.error(f"Error searching user: {e}")
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ: {str(e)}")
    
    await state.clear()

@router.callback_query(F.data == "admin_configs")
async def show_config_management(callback: types.CallbackQuery):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥–∞–º–∏."""
    if not is_admin(callback.from_user.id):
        await callback.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
        return
    
    try:
        config_stats = await get_config_statistics()
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üîç –ù–∞–π—Ç–∏ –∫–æ–Ω—Ñ–∏–≥ –ø–æ UID", callback_data="admin_find_config")],
            [InlineKeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–æ–Ω—Ñ–∏–≥–æ–≤", callback_data="admin_config_stats")],
            [InlineKeyboardButton(text="üßπ –û—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–µ–∫—à–∏–µ", callback_data="admin_cleanup_expired")],
            [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_back_to_main")],
        ])
        
        stats_text = (
            f"‚öôÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥–∞–º–∏\n\n"
            f"üìä –¢–µ–∫—É—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n"
            f"‚Ä¢ –í—Å–µ–≥–æ –∫–æ–Ω—Ñ–∏–≥–æ–≤: {config_stats['total']}\n"
            f"‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö: {config_stats['active']}\n"
            f"‚Ä¢ –ò—Å—Ç–µ–∫—à–∏—Ö: {config_stats['expired']}\n"
            f"‚Ä¢ –°–≤–æ–±–æ–¥–Ω—ã—Ö: {config_stats['free']}\n"
            f"‚Ä¢ üá´üáÆ –§–∏–Ω–ª—è–Ω–¥–∏—è: {config_stats['fi_count']}\n"
            f"‚Ä¢ üá≥üá± –ù–∏–¥–µ—Ä–ª–∞–Ω–¥—ã: {config_stats['nl_count']}\n"
            f"‚Ä¢ üá©üá™ –ì–µ—Ä–º–∞–Ω–∏—è: {config_stats['ge_count']}"
        )
        
        await callback.message.edit_text(stats_text, reply_markup=keyboard)
        
    except Exception as e:
        logger.error(f"Error getting config stats: {e}")
        await callback.message.edit_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {str(e)}")
    
    await callback.answer()

@router.callback_query(F.data == "admin_find_config")
async def start_config_search(callback: types.CallbackQuery, state: FSMContext):
    """–ù–∞—á–∏–Ω–∞–µ—Ç –ø–æ–∏—Å–∫ –∫–æ–Ω—Ñ–∏–≥–∞ –ø–æ UID."""
    try:
        if not is_admin(callback.from_user.id):
            await callback.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
            return
        
        await callback.message.edit_text(
            "üîç –ü–æ–∏—Å–∫ –∫–æ–Ω—Ñ–∏–≥–∞\n\n"
            "–í–≤–µ–¥–∏—Ç–µ UID –∫–æ–Ω—Ñ–∏–≥–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞:"
        )
        await state.set_state(AdminStates.waiting_for_config_uid)
        await callback.answer()
    except Exception as e:
        logger.error(f"Error in start_config_search: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –ø–æ–∏—Å–∫–∞ –∫–æ–Ω—Ñ–∏–≥–∞", show_alert=True)

@router.message(AdminStates.waiting_for_config_uid)
async def process_config_search(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–æ–∏—Å–∫ –∫–æ–Ω—Ñ–∏–≥–∞."""
    if not is_admin(message.from_user.id):
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
        await state.clear()
        return
    
    try:
        config_uid = message.text.strip()
        config_info = await get_config_info(config_uid)
        
        if config_info:
            status = "üü¢ –ê–∫—Ç–∏–≤–Ω—ã–π" if config_info['is_active'] else "üî¥ –ò—Å—Ç–µ–∫—à–∏–π"
            info_text = (
                f"‚öôÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ–Ω—Ñ–∏–≥–µ\n\n"
                f"üÜî UID: {config_info['uid']}\n"
                f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {config_info['tg_id'] or '–ù–µ –Ω–∞–∑–Ω–∞—á–µ–Ω'}\n"
                f"üåç –°–µ—Ä–≤–µ—Ä: {config_info['server']}\n"
                f"‚è∞ –í—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è: {config_info['time_end_formatted']}\n"
                f"üìä –°—Ç–∞—Ç—É—Å: {status}"
            )
            await message.answer(info_text)
        else:
            await message.answer("‚ùå –ö–æ–Ω—Ñ–∏–≥ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            
    except Exception as e:
        logger.error(f"Error searching config: {e}")
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ: {str(e)}")
    
    await state.clear()

@router.callback_query(F.data == "admin_detailed_stats")
async def show_detailed_stats(callback: types.CallbackQuery):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É."""
    if not is_admin(callback.from_user.id):
        await callback.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
        return
    
    try:
        detailed_stats = await get_detailed_statistics()
        
        stats_text = (
            f"üìà –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n\n"
            f"üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:\n"
            f"‚Ä¢ –í—Å–µ–≥–æ: {detailed_stats['users']['total']}\n"
            f"‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö: {detailed_stats['users']['active']}\n"
            f"‚Ä¢ –° –ø—Ä–æ–±–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–æ–π: {detailed_stats['users']['trial_used']}\n"
            f"‚Ä¢ –° –±–∞–ª–∞–Ω—Å–æ–º: {detailed_stats['users']['with_balance']}\n\n"
            f"‚öôÔ∏è –ö–æ–Ω—Ñ–∏–≥–∏:\n"
            f"‚Ä¢ –í—Å–µ–≥–æ: {detailed_stats['configs']['total']}\n"
            f"‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö: {detailed_stats['configs']['active']}\n"
            f"‚Ä¢ –ò—Å—Ç–µ–∫—à–∏—Ö: {detailed_stats['configs']['expired']}\n"
            f"‚Ä¢ üá´üáÆ –§–∏–Ω–ª—è–Ω–¥–∏—è: {detailed_stats['configs']['fi']}\n"
            f"‚Ä¢ üá≥üá± –ù–∏–¥–µ—Ä–ª–∞–Ω–¥—ã: {detailed_stats['configs']['nl']}\n"
            f"‚Ä¢ üá©üá™ –ì–µ—Ä–º–∞–Ω–∏—è: {detailed_stats['configs']['ge']}\n\n"
            f"ü§ù –†–µ—Ñ–µ—Ä–∞–ª—ã:\n"
            f"‚Ä¢ –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ: {detailed_stats['referrals']['total']}\n"
            f"‚Ä¢ –¢–æ–ø —Ä–µ—Ñ–µ—Ä–µ—Ä: {detailed_stats['referrals']['top_referrer']}"
        )
        
        await callback.message.edit_text(stats_text)
        
    except Exception as e:
        logger.error(f"Error getting detailed stats: {e}")
        await callback.message.edit_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {str(e)}")
    
    await callback.answer()

@router.callback_query(F.data == "admin_system")
async def show_system_operations(callback: types.CallbackQuery):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–∏—Å—Ç–µ–º–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏."""
    try:
        if not is_admin(callback.from_user.id):
            await callback.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
            return
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üßπ –û—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–µ–∫—à–∏–µ –∫–æ–Ω—Ñ–∏–≥–∏", callback_data="admin_cleanup_expired")],
            [InlineKeyboardButton(text="üîÑ –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É", callback_data="admin_reload_stats")],
            [InlineKeyboardButton(text="üìä –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –∫–æ–Ω—Ñ–∏–≥–æ–≤", callback_data="admin_check_availability")],
            [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_back_to_main")],
        ])
        
        await callback.message.edit_text(
            "üîß –°–∏—Å—Ç–µ–º–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø–µ—Ä–∞—Ü–∏—é:",
            reply_markup=keyboard
        )
        await callback.answer()
    except Exception as e:
        logger.error(f"Error in show_system_operations: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π", show_alert=True)

@router.callback_query(F.data == "admin_back_to_main")
async def back_to_main_admin(callback: types.CallbackQuery):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫ –≥–ª–∞–≤–Ω–æ–º—É –º–µ–Ω—é –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏."""
    try:
        if not is_admin(callback.from_user.id):
            await callback.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
            return
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üì¢ –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—Å–µ–º", callback_data="admin_broadcast")],
            [InlineKeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="admin_stats")],
        [InlineKeyboardButton(text="üíµ –î–æ—Ö–æ–¥ (—Ä—É–± / –∑–≤–µ–∑–¥—ã)", callback_data="admin_revenue")],
            [InlineKeyboardButton(text="üîç –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", callback_data="admin_search_user")],
            [InlineKeyboardButton(text="‚öôÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥–∞–º–∏", callback_data="admin_configs")],
            [InlineKeyboardButton(text="üìà –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="admin_detailed_stats")],
            [InlineKeyboardButton(text="üîß –°–∏—Å—Ç–µ–º–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏", callback_data="admin_system")],
        ])
        
        await callback.message.edit_text(
            "üîß –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=keyboard
        )
        await callback.answer()
    except Exception as e:
        logger.error(f"Error in back_to_main_admin: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", show_alert=True)

# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –Ω–æ–≤—ã—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π

async def get_user_info(tg_id: int) -> dict | None:
    """–ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–π –ë–î –∏ API."""
    try:
        import aiosqlite
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–π –ë–î bot –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
        async with aiosqlite.connect("users.db") as conn:
            async with conn.cursor() as cursor:
                await cursor.execute("""
                    SELECT tg_id, trial_3d_used, balance, referral_count, referral_code
                    FROM users WHERE tg_id = ?
                """, (str(tg_id),))
                row = await cursor.fetchone()
                
                if not row:
                    return None
                
                tg_id_db, trial_used, balance, referral_count, referral_code = row
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–Ω—Ñ–∏–≥–∞—Ö –∏–∑ API
        active_configs = 0
        try:
            async with aiohttp.ClientSession(timeout=aiohttp.ClientTimeout(total=10)) as session:
                headers = {"X-API-Key": AUTH_CODE}
                async with session.get(f"{API_BASE_URL}/usercodes/{tg_id}", headers=headers) as resp:
                    if resp.status == 200:
                        try:
                            configs = await resp.json()
                            active_configs = len([c for c in configs if c.get('time_end', 0) > int(time.time())])
                        except aiohttp.ContentTypeError as e:
                            logger.error(f"Invalid JSON response: {e}")
        except Exception as e:
            logger.warning(f"Could not get config info from API: {e}")
        
        return {
            'tg_id': str(tg_id),
            'trial_used': bool(trial_used),
            'balance': balance or 0,
            'referral_count': referral_count or 0,
            'referral_code': referral_code or '–ù–µ —Å–æ–∑–¥–∞–Ω',
            'created_at': '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ',  # –í –ë–î –Ω–µ—Ç –ø–æ–ª—è created_at
            'active_configs': active_configs
        }
    except Exception as e:
        logger.error(f"Error getting user info: {e}")
        return None

async def get_config_statistics() -> dict:
    """–ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫–æ–Ω—Ñ–∏–≥–æ–≤ —á–µ—Ä–µ–∑ API."""
    try:
        async with aiohttp.ClientSession(timeout=aiohttp.ClientTimeout(total=10)) as session:
            headers = {"X-API-Key": AUTH_CODE}
            
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∫–æ–Ω—Ñ–∏–≥–∏
            async with session.get(f"{API_BASE_URL}/all-configs", headers=headers) as resp:
                if resp.status != 200:
                    logger.error(f"API error getting all configs: {resp.status}")
                    return {
                        'total': 0, 'active': 0, 'expired': 0, 'free': 0,
                        'fi_count': 0, 'nl_count': 0, 'ge_count': 0
                    }
                
                try:
                    data = await resp.json()
                except aiohttp.ContentTypeError as e:
                    logger.error(f"Invalid JSON response: {e}")
                    return {
                        'total': 0, 'active': 0, 'expired': 0, 'free': 0,
                        'fi_count': 0, 'nl_count': 0, 'ge_count': 0
                    }
                
                configs = data.get('configs', [])
                
                current_time = int(time.time())
                total = len(configs)
                active = len([c for c in configs if c.get('time_end', 0) > current_time])
                expired = len([c for c in configs if c.get('time_end', 0) <= current_time and c.get('time_end', 0) > 0])
                free = len([c for c in configs if c.get('time_end', 0) == 0])
                fi_count = len([c for c in configs if c.get('server_country') == 'fi'])
                nl_count = len([c for c in configs if c.get('server_country') == 'nl'])
                ge_count = len([c for c in configs if c.get('server_country') == 'ge'])
                
                return {
                    'total': total,
                    'active': active,
                    'expired': expired,
                    'free': free,
                    'fi_count': fi_count,
                    'nl_count': nl_count,
                    'ge_count': ge_count
                }
    except aiohttp.ClientError as e:
        logger.error(f"Network error getting config statistics: {e}")
        return {
            'total': 0, 'active': 0, 'expired': 0, 'free': 0,
            'fi_count': 0, 'nl_count': 0, 'ge_count': 0
        }
    except Exception as e:
        logger.error(f"Error getting config statistics: {e}")
        return {
            'total': 0, 'active': 0, 'expired': 0, 'free': 0,
            'fi_count': 0, 'nl_count': 0, 'ge_count': 0
        }

async def get_config_info(uid: str) -> dict | None:
    """–ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–Ω—Ñ–∏–≥–µ —á–µ—Ä–µ–∑ API."""
    try:
        async with aiohttp.ClientSession(timeout=aiohttp.ClientTimeout(total=10)) as session:
            headers = {"X-API-Key": AUTH_CODE}
            
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∫–æ–Ω—Ñ–∏–≥–∏ –∏ –∏—â–µ–º –Ω—É–∂–Ω—ã–π
            async with session.get(f"{API_BASE_URL}/all-configs", headers=headers) as resp:
                if resp.status != 200:
                    logger.error(f"API error getting all configs: {resp.status}")
                    return None
                
                try:
                    data = await resp.json()
                except aiohttp.ContentTypeError as e:
                    logger.error(f"Invalid JSON response: {e}")
                    return None
                
                configs = data.get('configs', [])
                
                # –ò—â–µ–º –∫–æ–Ω—Ñ–∏–≥ –ø–æ UID
                config = next((c for c in configs if c.get('uid') == uid), None)
                if not config:
                    return None
                
                current_time = int(time.time())
                time_end = config.get('time_end', 0)
                is_active = time_end > current_time
                
                # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤—Ä–µ–º—è
                if time_end == 0:
                    time_end_formatted = "–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ"
                else:
                    time_end_formatted = datetime.fromtimestamp(time_end).strftime("%d.%m.%Y %H:%M")
                
                return {
                    'uid': config.get('uid'),
                    'tg_id': config.get('tg_id') or '–ù–µ –Ω–∞–∑–Ω–∞—á–µ–Ω',
                    'time_end': time_end,
                    'time_end_formatted': time_end_formatted,
                    'server': config.get('server_country'),
                    'is_active': is_active
                }
    except aiohttp.ClientError as e:
        logger.error(f"Network error getting config info: {e}")
        return None
    except Exception as e:
        logger.error(f"Error getting config info: {e}")
        return None

async def get_detailed_statistics() -> dict:
    """–ü–æ–ª—É—á–∞–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–∑ bot –ë–î –∏ API."""
    try:
        import aiosqlite
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ bot –ë–î
        async with aiosqlite.connect("users.db") as conn:
            async with conn.cursor() as cursor:
                # –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
                await cursor.execute("SELECT COUNT(*) FROM users")
                total_users = (await cursor.fetchone())[0]
                
                # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏, –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–≤—à–∏–µ –ø—Ä–æ–±–Ω—É—é –ø–æ–¥–ø–∏—Å–∫—É
                await cursor.execute("SELECT COUNT(*) FROM users WHERE trial_3d_used = 1")
                trial_used = (await cursor.fetchone())[0]
                
                # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å –±–∞–ª–∞–Ω—Å–æ–º –¥–Ω–µ–π
                await cursor.execute("SELECT COUNT(*) FROM users WHERE balance > 0")
                with_balance = (await cursor.fetchone())[0]
                
                # –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤
                await cursor.execute("SELECT SUM(referral_count) FROM users")
                total_referrals_result = await cursor.fetchone()
                total_referrals = total_referrals_result[0] if total_referrals_result[0] is not None else 0
                
                # –¢–æ–ø —Ä–µ—Ñ–µ—Ä–µ—Ä
                await cursor.execute("""
                    SELECT tg_id, referral_count 
                    FROM users 
                    WHERE referral_count > 0 
                    ORDER BY referral_count DESC 
                    LIMIT 1
                """)
                top_referrer_row = await cursor.fetchone()
                top_referrer = f"ID: {top_referrer_row[0]} ({top_referrer_row[1]} —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤)" if top_referrer_row else "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö"
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫–æ–Ω—Ñ–∏–≥–æ–≤ –∏–∑ API
        config_stats = await get_config_statistics()
        
        return {
            'users': {
                'total': total_users,
                'active': config_stats['active'],  # –ê–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ = –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å –∞–∫—Ç–∏–≤–Ω—ã–º–∏ –∫–æ–Ω—Ñ–∏–≥–∞–º–∏
                'trial_used': trial_used,
                'with_balance': with_balance
            },
            'configs': {
                'total': config_stats['total'],
                'active': config_stats['active'],
                'expired': config_stats['expired'],
                'fi': config_stats['fi_count'],
                'nl': config_stats['nl_count'],
                'ge': config_stats['ge_count']
            },
            'referrals': {
                'total': total_referrals,
                'top_referrer': top_referrer
            }
        }
    except Exception as e:
        logger.error(f"Error getting detailed statistics: {e}")
        return {
            'users': {'total': 0, 'active': 0, 'trial_used': 0, 'with_balance': 0},
            'configs': {'total': 0, 'active': 0, 'expired': 0, 'fi': 0, 'nl': 0, 'ge': 0},
            'referrals': {'total': 0, 'top_referrer': '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö'}
        }

# –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Å–∏—Å—Ç–µ–º–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏

@router.callback_query(F.data == "admin_cleanup_expired")
async def cleanup_expired_configs(callback: types.CallbackQuery):
    """–û—á–∏—â–∞–µ—Ç –∏—Å—Ç–µ–∫—à–∏–µ –∫–æ–Ω—Ñ–∏–≥–∏ —á–µ—Ä–µ–∑ API."""
    if not is_admin(callback.from_user.id):
        await callback.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
        return
    
    try:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º API –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –∏—Å—Ç–µ–∫—à–∏—Ö –∫–æ–Ω—Ñ–∏–≥–æ–≤
        async with aiohttp.ClientSession() as session:
            headers = {"X-API-Key": AUTH_CODE}
            
            # –ü–æ–∫–∞ —á—Ç–æ –ø—Ä–æ—Å—Ç–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ, —Ç–∞–∫ –∫–∞–∫ API —ç–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω
            await callback.message.edit_text(
                f"üßπ –û—á–∏—Å—Ç–∫–∞ –∏—Å—Ç–µ–∫—à–∏—Ö –∫–æ–Ω—Ñ–∏–≥–æ–≤\n\n"
                f"‚ö†Ô∏è –§—É–Ω–∫—Ü–∏—è –æ—á–∏—Å—Ç–∫–∏ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞\n\n"
                f"–ò—Å—Ç–µ–∫—à–∏–µ –∫–æ–Ω—Ñ–∏–≥–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å—Ç–∞–Ω–æ–≤—è—Ç—Å—è –¥–æ—Å—Ç—É–ø–Ω—ã–º–∏ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è."
            )
        
    except Exception as e:
        logger.error(f"Error cleaning expired configs: {e}")
        await callback.message.edit_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ: {str(e)}")
    
    await callback.answer()

@router.callback_query(F.data == "admin_reload_stats")
async def reload_statistics(callback: types.CallbackQuery):
    """–ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É."""
    if not is_admin(callback.from_user.id):
        await callback.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
        return
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å–≤–µ–∂—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        stats = await get_user_stats()
        config_stats = await get_config_statistics()
        
        stats_text = (
            f"üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n\n"
            f"üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:\n"
            f"‚Ä¢ –í—Å–µ–≥–æ: {stats['total_users']}\n"
            f"‚Ä¢ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ –ø—Ä–æ–±–Ω—É—é: {stats['trial_used']}\n"
            f"‚Ä¢ –° –±–∞–ª–∞–Ω—Å–æ–º: {stats['with_balance']}\n"
            f"‚Ä¢ –†–µ—Ñ–µ—Ä–∞–ª–æ–≤: {stats['total_referrals']}\n\n"
            f"‚öôÔ∏è –ö–æ–Ω—Ñ–∏–≥–∏:\n"
            f"‚Ä¢ –í—Å–µ–≥–æ: {config_stats['total']}\n"
            f"‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö: {config_stats['active']}\n"
            f"‚Ä¢ –ò—Å—Ç–µ–∫—à–∏—Ö: {config_stats['expired']}\n"
            f"‚Ä¢ –°–≤–æ–±–æ–¥–Ω—ã—Ö: {config_stats['free']}\n"
            f"‚Ä¢ FI: {config_stats['fi_count']}\n"
            f"‚Ä¢ NL: {config_stats['nl_count']}"
        )
        
        await callback.message.edit_text(stats_text)
        
    except Exception as e:
        logger.error(f"Error reloading stats: {e}")
        await callback.message.edit_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏: {str(e)}")
    
    await callback.answer()

@router.callback_query(F.data == "admin_check_availability")
async def check_config_availability(callback: types.CallbackQuery):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –∫–æ–Ω—Ñ–∏–≥–æ–≤ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–∞—Ö —á–µ—Ä–µ–∑ API."""
    try:
        if not is_admin(callback.from_user.id):
            await callback.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
            return
        
        async with aiohttp.ClientSession(timeout=aiohttp.ClientTimeout(total=15)) as session:
            headers = {"X-API-Key": AUTH_CODE}
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞
            fi_available = False
            nl_available = False
            any_available = False
            
            try:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º FI —Å–µ—Ä–≤–µ—Ä
                async with session.get(f"{API_BASE_URL}/check-available-configs?server=fi", headers=headers) as resp:
                    if resp.status == 200:
                        try:
                            data = await resp.json()
                            fi_available = data.get('available', False)
                        except aiohttp.ContentTypeError:
                            logger.error("Invalid JSON response from FI server check")
                    else:
                        logger.error(f"FI server check failed with status: {resp.status}")
            except aiohttp.ClientError as e:
                logger.error(f"Network error checking FI server: {e}")
            
            try:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º NL —Å–µ—Ä–≤–µ—Ä
                async with session.get(f"{API_BASE_URL}/check-available-configs?server=nl", headers=headers) as resp:
                    if resp.status == 200:
                        try:
                            data = await resp.json()
                            nl_available = data.get('available', False)
                        except aiohttp.ContentTypeError:
                            logger.error("Invalid JSON response from NL server check")
                    else:
                        logger.error(f"NL server check failed with status: {resp.status}")
            except aiohttp.ClientError as e:
                logger.error(f"Network error checking NL server: {e}")
            
            try:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—â—É—é –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å
                async with session.get(f"{API_BASE_URL}/check-available-configs", headers=headers) as resp:
                    if resp.status == 200:
                        try:
                            data = await resp.json()
                            any_available = data.get('available', False)
                        except aiohttp.ContentTypeError:
                            logger.error("Invalid JSON response from general availability check")
                            any_available = fi_available or nl_available
                    else:
                        logger.error(f"General availability check failed with status: {resp.status}")
                        any_available = fi_available or nl_available
            except aiohttp.ClientError as e:
                logger.error(f"Network error checking general availability: {e}")
                any_available = fi_available or nl_available
            
            availability_text = (
                f"üìä –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –∫–æ–Ω—Ñ–∏–≥–æ–≤\n\n"
                f"üá´üáÆ –§–∏–Ω–ª—è–Ω–¥–∏—è: {'‚úÖ –î–æ—Å—Ç—É–ø–Ω—ã' if fi_available else '‚ùå –ù–µ—Ç —Å–≤–æ–±–æ–¥–Ω—ã—Ö'}\n"
                f"üá≥üá± –ù–∏–¥–µ—Ä–ª–∞–Ω–¥—ã: {'‚úÖ –î–æ—Å—Ç—É–ø–Ω—ã' if nl_available else '‚ùå –ù–µ—Ç —Å–≤–æ–±–æ–¥–Ω—ã—Ö'}\n"
                f"üåç –û–±—â–∞—è –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å: {'‚úÖ –ï—Å—Ç—å –∫–æ–Ω—Ñ–∏–≥–∏' if any_available else '‚ùå –ù–µ—Ç –∫–æ–Ω—Ñ–∏–≥–æ–≤'}\n\n"
                f"üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: {'–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–µ –∫–æ–Ω—Ñ–∏–≥–∏' if not any_available else '–°–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–æ—Ä–º–∞–ª—å–Ω–æ'}"
            )
            
            await callback.message.edit_text(availability_text)
        
    except Exception as e:
        logger.error(f"Error checking availability: {e}")
        await callback.message.edit_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ: {str(e)}")
    
    await callback.answer()

@router.callback_query(F.data == "admin_config_stats")
async def show_config_statistics(callback: types.CallbackQuery):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫–æ–Ω—Ñ–∏–≥–æ–≤."""
    try:
        if not is_admin(callback.from_user.id):
            await callback.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
            return
        
        config_stats = await get_config_statistics()
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –≤—Ä–µ–º–µ–Ω–∏
        current_time = int(time.time())
        tomorrow = current_time + 86400
        week = current_time + 604800
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ–Ω—Ñ–∏–≥–∏ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        expiring_soon = 0
        expiring_week = 0
        
        try:
            async with aiohttp.ClientSession(timeout=aiohttp.ClientTimeout(total=10)) as session:
                headers = {"X-API-Key": AUTH_CODE}
                async with session.get(f"{API_BASE_URL}/all-configs", headers=headers) as resp:
                    if resp.status == 200:
                        try:
                            data = await resp.json()
                            configs = data.get('configs', [])
                            
                            # –ö–æ–Ω—Ñ–∏–≥–∏, –∏—Å—Ç–µ–∫–∞—é—â–∏–µ –≤ –±–ª–∏–∂–∞–π—à–∏–µ 24 —á–∞—Å–∞
                            expiring_soon = len([c for c in configs if current_time < c.get('time_end', 0) <= tomorrow])
                            
                            # –ö–æ–Ω—Ñ–∏–≥–∏, –∏—Å—Ç–µ–∫–∞—é—â–∏–µ –≤ –±–ª–∏–∂–∞–π—à–∏–µ 7 –¥–Ω–µ–π
                            expiring_week = len([c for c in configs if current_time < c.get('time_end', 0) <= week])
                        except aiohttp.ContentTypeError as e:
                            logger.error(f"Invalid JSON response in config stats: {e}")
                    else:
                        logger.error(f"API error getting configs for stats: {resp.status}")
        except aiohttp.ClientError as e:
            logger.error(f"Network error getting config stats: {e}")
        except Exception as e:
            logger.error(f"Error getting config stats: {e}")
        
        stats_text = (
            f"üìä –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–æ–Ω—Ñ–∏–≥–æ–≤\n\n"
            f"üìà –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n"
            f"‚Ä¢ –í—Å–µ–≥–æ –∫–æ–Ω—Ñ–∏–≥–æ–≤: {config_stats['total']}\n"
            f"‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö: {config_stats['active']}\n"
            f"‚Ä¢ –ò—Å—Ç–µ–∫—à–∏—Ö: {config_stats['expired']}\n"
            f"‚Ä¢ –°–≤–æ–±–æ–¥–Ω—ã—Ö: {config_stats['free']}\n\n"
            f"üåç –ü–æ —Å–µ—Ä–≤–µ—Ä–∞–º:\n"
            f"‚Ä¢ üá´üáÆ –§–∏–Ω–ª—è–Ω–¥–∏—è: {config_stats['fi_count']}\n"
            f"‚Ä¢ üá≥üá± –ù–∏–¥–µ—Ä–ª–∞–Ω–¥—ã: {config_stats['nl_count']}\n"
            f"‚Ä¢ üá©üá™ –ì–µ—Ä–º–∞–Ω–∏—è: {config_stats['ge_count']}\n\n"
            f"‚è∞ –ò—Å—Ç–µ–∫–∞—é—â–∏–µ:\n"
            f"‚Ä¢ –í –±–ª–∏–∂–∞–π—à–∏–µ 24 —á–∞—Å–∞: {expiring_soon}\n"
            f"‚Ä¢ –í –±–ª–∏–∂–∞–π—à–∏–µ 7 –¥–Ω–µ–π: {expiring_week}\n\n"
            f"üìä –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: {round((config_stats['active'] / config_stats['total']) * 100, 1) if config_stats['total'] > 0 else 0}%"
        )
        
        await callback.message.edit_text(stats_text)
        
    except Exception as e:
        logger.error(f"Error getting config stats: {e}")
        await callback.message.edit_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {str(e)}")
    
    await callback.answer()
