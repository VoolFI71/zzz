from aiogram import Router, F, types
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from keyboards import keyboard
from utils import should_throttle, acquire_action_lock
import aiohttp
import os
import time
from database import db
router = Router()

AUTH_CODE = os.getenv("AUTH_CODE")

# –ß–∏—Ç–∞–µ—Ç –ø–µ—Ä–≤–æ–µ –Ω–µ–ø—É—Å—Ç–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∏–∑ —Å–ø–∏—Å–∫–∞ env-–∫–ª—é—á–µ–π
def _env_any(*keys: str, default: str = "") -> str:
    for key in keys:
        value = os.getenv(key)
        if value:
            return value
    return default


# Note: COUNTRY_SETTINGS and PUBLIC_BASE_URL are maintained in FastAPI app; not needed in bot layer


# –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º —Å—Ç–∞—Ä—ã–π –∏ –Ω–æ–≤—ã–π –≤–∞—Ä–∏–∞–Ω—Ç—ã –∫–Ω–æ–ø–∫–∏
@router.message(F.text.in_({"–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç", "üë§ –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç"}))
async def my_account(message: types.Message):
    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ –ø–æ–¥–º–µ–Ω—é –ø—Ä–æ—Ñ–∏–ª—è
    await message.answer("–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç:", reply_markup=keyboard.create_profile_keyboard())


@router.message(F.text.in_({"–ü—Ä–æ–±–Ω–∞—è 3 –¥–Ω—è", "üéÅ –ü—Ä–æ–±–Ω–∞—è 3 –¥–Ω—è", "–ü—Ä–æ–±–Ω—ã–µ 3 –¥–Ω—è", "üéÅ –ü—Ä–æ–±–Ω—ã–µ 3 –¥–Ω—è"}))
async def free_trial(message: types.Message):
    user_id = message.from_user.id
    # Throttle repeated clicks
    throttled, retry_after = should_throttle(user_id, "free_trial", cooldown_seconds=5.0)
    if throttled:
        await message.answer(f"–°–ª–∏—à–∫–æ–º —á–∞—Å—Ç–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —á–µ—Ä–µ–∑ {int(retry_after)+1} —Å–µ–∫.")
        return
    try:
        await db.ensure_user_row(str(user_id))
        if await db.has_used_trial_3d(str(user_id)):
            await message.answer("–í—ã —É–∂–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–ª–∏ –ø—Ä–æ–±–Ω—É—é –ø–æ–¥–ø–∏—Å–∫—É —Ä–∞–Ω–µ–µ.")
            return
    except Exception:
        await message.answer("–û—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Å–≤–æ–±–æ–¥–Ω—ã—Ö –∫–æ–Ω—Ñ–∏–≥–æ–≤ (–Ω–µ –±–ª–æ–∫–∏—Ä—É—é—â–µ)
    from utils import get_session
    # –ü—ã—Ç–∞–µ–º—Å—è –≤—ã–¥–∞—Ç—å –Ω–∞ –ø–µ—Ä–≤–æ–º –¥–æ—Å—Ç—É–ø–Ω–æ–º —Å–µ—Ä–≤–µ—Ä–µ –∏–∑ —Å–ø–∏—Å–∫–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é fi, nl)
    from utils import pick_first_available_server
    server_order_env = os.getenv("SERVER_ORDER", "fi")
    preferred = [s.strip().lower() for s in server_order_env.split(',') if s.strip()]
    target_server = await pick_first_available_server(preferred)
    if not target_server:
        await message.answer("–°–≤–æ–±–æ–¥–Ω—ã—Ö –∫–æ–Ω—Ñ–∏–≥–æ–≤ –Ω–µ—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return

    # –í—ã–¥–∞—ë–º –±–µ—Å–ø–ª–∞—Ç–Ω—ã–µ 3 –¥–Ω—è –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ FI
    data = {"time": 3, "id": str(user_id), "server": target_server}
    AUTH_CODE = os.getenv("AUTH_CODE")
    urlupdate = "http://fastapi:8080/giveconfig"
    try:
        session = await get_session()
        async with acquire_action_lock(user_id, "free_trial"):
            async with session.post(urlupdate, json=data, headers={"X-API-Key": AUTH_CODE}) as resp:
                if resp.status == 200:
                    await user_db.set_trial_3d_used(str(user_id))
                    base = os.getenv("PUBLIC_BASE_URL", "https://swaga.space").rstrip('/')
                    try:
                        sub_url = f"http://fastapi:8080/sub/{user_id}"
                        async with session.get(sub_url, headers={"X-API-Key": AUTH_CODE}) as sub_resp:
                            if sub_resp.status == 200:
                                sub_data = await sub_resp.json()
                                sub_key = sub_data.get("sub_key")
                                if sub_key:
                                    web_url = f"{base}/subscription/{sub_key}"
                                else:
                                    web_url = f"{base}/subscription"
                            else:
                                web_url = f"{base}/subscription"
                    except Exception:
                        # Fallback –Ω–∞ —Å—Ç–∞—Ä—É—é —Å—Å—ã–ª–∫—É, –µ—Å–ª–∏ —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫
                        web_url = f"{base}/subscription"
                    kb = InlineKeyboardMarkup(inline_keyboard=[
                        [InlineKeyboardButton(text="üì≤ –î–æ–±–∞–≤–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É –≤ V2rayTun", url=web_url)],
                        [InlineKeyboardButton(text="üìã –°–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å —Å—Å—ã–ª–∫—É", callback_data="copy_sub")],
                    ])
                    await message.answer("–ü—Ä–æ–±–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ 3 –¥–Ω—è –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞!", reply_markup=kb)
                    await message.answer("–ü–æ–¥–ø–∏—Å–∫–∞ –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∞ —Å–∞–π—Ç–µ, –≤ —ç—Ç–æ–º —Å–ª—É—á–∞–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å —Å—Å—ã–ª–∫—É –Ω–∞ –ø–æ–¥–ø–∏—Å–∫—É –∏ –≤—Å—Ç–∞–≤–∏—Ç—å –≤ V2rayTun –≤—Ä—É—á–Ω—É—é.")

                    try:
                        admin_id = 746560409
                        at_username = (f"@{message.from_user.username}" if getattr(message.from_user, "username", None) else "‚Äî")
                        await message.bot.send_message(admin_id, f"–ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞ –ø—Ä–æ–±–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞: user_id={user_id}, user={at_username}, —Å–µ—Ä–≤–µ—Ä=fi, —Å—Ä–æ–∫=3 –¥–Ω.")
                    except Exception:
                        pass
                elif resp.status == 409:
                    await message.answer("–°–≤–æ–±–æ–¥–Ω—ã—Ö –∫–æ–Ω—Ñ–∏–≥–æ–≤ –Ω–µ—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
                else:
                    await message.answer(f"–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ ({resp.status}). –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    except aiohttp.ClientError:
        await message.answer("–û—à–∏–±–∫–∞ —Å–µ—Ç–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


@router.callback_query(F.data.startswith("copy_config_"))
async def copy_config_callback(callback: types.CallbackQuery):
    """–¢–µ–ø–µ—Ä—å –æ—Ç–¥–∞—ë–º —Å—Å—ã–ª–∫—É –Ω–∞ –ø–æ–¥–ø–∏—Å–∫—É, –∫–æ—Ç–æ—Ä–∞—è –ø–æ–¥—Ç—è–Ω–µ—Ç –≤—Å–µ –∫–æ–Ω—Ñ–∏–≥–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏."""
    try:
        # idx –∏–∑ callback –Ω–∞–º –±–æ–ª—å—à–µ –Ω–µ –Ω—É–∂–µ–Ω, –Ω–æ –ø–∞—Ä—Å–∏–º –±–µ–∑–æ–ø–∞—Å–Ω–æ –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
        _ = int(callback.data.split("_")[-1]) if callback.data.rsplit("_", 1)[-1].isdigit() else None
    except Exception:
        pass

    user_id = callback.from_user.id
    headers = {"X-API-Key": AUTH_CODE}

    try:
        from utils import get_session
        session = await get_session()
        async with acquire_action_lock(user_id, "copy_config"):
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å—Ç–æ—è–Ω–Ω—ã–π sub_key –∏–∑ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–≥–æ API
            sub_url_api = f"http://fastapi:8080/sub/{user_id}"
            async with session.get(sub_url_api, timeout=10, headers=headers) as resp:
                if resp.status != 200:
                    await callback.answer("–û—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ", show_alert=True)
                    return
                data = await resp.json()
                sub_key = data.get("sub_key")
                if not sub_key:
                    await callback.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Å—ã–ª–∫—É", show_alert=True)
                    return
            # –§–æ—Ä–º–∏—Ä—É–µ–º –ø—É–±–ª–∏—á–Ω—É—é —Å—Å—ã–ª–∫—É –ø–æ–¥–ø–∏—Å–∫–∏
            base = os.getenv("PUBLIC_BASE_URL", "https://swaga.space").rstrip('/')
            web_url = f"{base}/subscription/{sub_key}"
            kb = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üì≤ –î–æ–±–∞–≤–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É –≤ V2rayTun", url=web_url)],
                [InlineKeyboardButton(text="üìã –°–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å —Å—Å—ã–ª–∫—É", callback_data="copy_sub")],
            ])
            await callback.message.answer("–í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞:", reply_markup=kb, disable_web_page_preview=True)
            await callback.answer()
    except aiohttp.ClientError:
        await callback.answer("–û—à–∏–±–∫–∞ —Å–µ—Ç–∏", show_alert=True)
    except Exception:
        await callback.answer("–û—à–∏–±–∫–∞", show_alert=True)


@router.message(F.text.in_({"–ú–æ–∏ –∫–æ–Ω—Ñ–∏–≥–∏", "üìÇ –ú–æ–∏ –∫–æ–Ω—Ñ–∏–≥–∏"}))
async def my_configs(message: types.Message):
    user_id = message.from_user.id
    throttled, retry_after = should_throttle(user_id, "my_configs", cooldown_seconds=3.0)
    if throttled:
        await message.answer(f"–°–ª–∏—à–∫–æ–º —á–∞—Å—Ç–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —á–µ—Ä–µ–∑ {int(retry_after)} —Å–µ–∫.")
        return
    url = f"http://fastapi:8080/usercodes/{user_id}"
    headers = {"X-API-Key": AUTH_CODE}

    try:
        from utils import get_session
        session = await get_session()
        async with acquire_action_lock(user_id, "my_configs"):
            async with session.get(url, timeout=10, headers=headers) as response:
                if response.status == 200:
                    response_data = await response.json()
                    if response_data:
                        def _parse_time_end(raw: object) -> int:
                            try:
                                val = int(raw)
                            except Exception:
                                return 0
                            # Heuristic: if value looks like milliseconds, convert to seconds
                            if val > 10**11:
                                val = val // 1000
                            return val
                        skew_tolerance = 5  # seconds
                        # –°–≤–æ–¥–∫–∞ –ø–æ —Å—Ç—Ä–∞–Ω–∞–º
                        now_ts = int(time.time())
                    
                        active_configs = []
                        # Map server code -> nice title and flag
                        server_titles = {
                            'fi': '–§–∏–Ω–ª—è–Ω–¥–∏—è',
                            'nl': '–ù–∏–¥–µ—Ä–ª–∞–Ω–¥—ã',
                            'ge': '–ì–µ—Ä–º–∞–Ω–∏—è',
                        }
                        server_flags = {
                            'fi': 'üá´üáÆ',
                            'nl': 'üá≥üá±',
                            'ge': 'üá©üá™',
                        }

                        def _fmt_duration(seconds: int) -> str:
                            seconds = max(0, int(seconds))
                            days = seconds // 86400
                            hours = (seconds % 86400) // 3600
                            minutes = (seconds % 3600) // 60
                            if days > 0:
                                return f"{days} –¥–Ω {hours} —á"
                            if hours > 0:
                                return f"{hours} —á {minutes} –º–∏–Ω"
                            return f"{minutes} –º–∏–Ω"

                        for user in response_data:
                            time_end = _parse_time_end(user.get('time_end', 0))
                            if time_end >= (now_ts - skew_tolerance):
                                srv = str(user.get('server', ''))
                                title = server_titles.get(srv, srv.upper())
                                flag = server_flags.get(srv, '')
                                remaining_secs = time_end - now_ts
                                active_configs.append(f"- {flag} {title}: {_fmt_duration(remaining_secs)}")

                        if not active_configs:
                            await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π", reply_markup=keyboard.create_profile_keyboard())
                            return

                        text = "–í–∞—à–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏:\n" + "\n".join(active_configs)

                        # –ü–æ—Å—Ç–æ—è–Ω–Ω–∞—è —Å—Å—ã–ª–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ sub_key
                        sub_url = f"http://fastapi:8080/sub/{user_id}"
                        try:
                            async with session.get(sub_url, timeout=10, headers=headers) as resp:
                                if resp.status != 200:
                                    await message.answer("–û—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", reply_markup=keyboard.create_profile_keyboard())
                                    return
                                data = await resp.json()
                        except aiohttp.ClientError as e:
                            await message.answer(f"–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: {str(e)}", reply_markup=keyboard.create_profile_keyboard())
                            return
                        except Exception:
                            await message.answer("–û—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", reply_markup=keyboard.create_profile_keyboard())
                            return

                        sub_key = data.get("sub_key")
                        if not sub_key:
                            await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å sub_key.", reply_markup=keyboard.create_profile_keyboard())
                            return

                        web_url = f"https://swaga.space/subscription/{sub_key}"
                        inline_kb = InlineKeyboardMarkup(inline_keyboard=[
                            [InlineKeyboardButton(text="üì≤ –î–æ–±–∞–≤–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É –≤ V2rayTun", url=web_url)],
                            [InlineKeyboardButton(text="üìã –°–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å —Å—Å—ã–ª–∫—É", callback_data="copy_sub")],
                        ])
                        await message.answer(text, reply_markup=inline_kb, disable_web_page_preview=True)
                        await message.answer("–ü–æ–¥–ø–∏—Å–∫–∞ –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∞ —Å–∞–π—Ç–µ, –≤ —ç—Ç–æ–º —Å–ª—É—á–∞–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å —Å—Å—ã–ª–∫—É –Ω–∞ –ø–æ–¥–ø–∏—Å–∫—É –∏ –≤—Å—Ç–∞–≤–∏—Ç—å –≤ V2rayTun –≤—Ä—É—á–Ω—É—é.")
                        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=keyboard.create_profile_keyboard())
                    else:
                        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –∫–æ–Ω—Ñ–∏–≥–æ–≤", reply_markup=keyboard.create_profile_keyboard())
                else:
                    error_message = await response.json()
                    await message.answer(f"{error_message.get('detail', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}", reply_markup=keyboard.create_profile_keyboard())
    except aiohttp.ClientError as e:
        await message.answer(f"–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: {str(e)}", reply_markup=keyboard.create_profile_keyboard())
    except Exception as e:
        await message.answer(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}", reply_markup=keyboard.create_profile_keyboard())

        
@router.callback_query(F.data == "copy_sub")
async def copy_subscription_callback(callback: types.CallbackQuery):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –µ–≥–æ —Å—Å—ã–ª–∫—É –Ω–∞ –ø–æ–¥–ø–∏—Å–∫—É –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è."""
    user_id = callback.from_user.id
    headers = {"X-API-Key": AUTH_CODE}
    try:
        from utils import get_session
        session = await get_session()
        sub_url_api = f"http://fastapi:8080/sub/{user_id}"
        async with acquire_action_lock(user_id, "copy_sub"):
            async with session.get(sub_url_api, timeout=10, headers=headers) as resp:
                if resp.status != 200:
                    await callback.answer("–û—à–∏–±–∫–∞", show_alert=True)
                    return
                data = await resp.json()
                sub_key = data.get("sub_key")
                if not sub_key:
                    await callback.answer("–ù–µ—Ç —Å—Å—ã–ª–∫–∏", show_alert=True)
                    return
        base = os.getenv("PUBLIC_BASE_URL", "https://swaga.space").rstrip('/')
        web_url = f"{base}/subscription/{sub_key}"
        # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ —Å—Å—ã–ª–∫—É –±–µ–∑ –∫–Ω–æ–ø–æ–∫
        try:
            await callback.message.edit_text(web_url, disable_web_page_preview=True)
        except Exception:
            try:
                # –ï—Å–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ (—Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ) ‚Äî –æ—Ç–ø—Ä–∞–≤–∏–º –Ω–æ–≤—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
                await callback.message.answer(web_url, disable_web_page_preview=True)
            except Exception:
                pass
        # –°–æ–æ–±—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        try:
            await callback.answer("–°–∫–æ–ø–∏—Ä—É–π—Ç–µ —Å—Å—ã–ª–∫—É", show_alert=False)
        except Exception:
            pass
    except Exception:
        try:
            await callback.answer("–û—à–∏–±–∫–∞", show_alert=True)
        except Exception:
            pass

@router.callback_query(F.data == "delmsg")
async def delete_message_callback(callback: types.CallbackQuery):
    try:
        await callback.message.delete()
    except Exception:
        pass
    try:
        await callback.answer()
    except Exception:
        pass


@router.message(F.text.in_({"–ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –¥–Ω–∏", "‚ú® –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –¥–Ω–∏"}))
async def show_balance_activation(message: types.Message):
    tg_id = str(message.from_user.id)
    try:
        days = await db.get_balance_days(tg_id)
    except Exception:
        days = 0
    if days <= 0:
        await message.answer("–ù–∞ –≤–∞—à–µ–º –±–∞–ª–∞–Ω—Å–µ –Ω–µ—Ç –¥–Ω–µ–π –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏.", reply_markup=keyboard.create_profile_keyboard())
        return
    await message.answer(
        f"–ù–∞ –±–∞–ª–∞–Ω—Å–µ: {days} –¥–Ω. –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –∏—Ö –∫–∞–∫ –ø–æ–¥–ø–∏—Å–∫—É.",
        reply_markup=keyboard.create_activate_balance_inline(days)
    )