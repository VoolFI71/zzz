from aiogram import Router, F, types
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from keyboards import keyboard
import aiohttp
import json
import os
import time
import urllib.parse
router = Router()

AUTH_CODE = os.getenv("AUTH_CODE")

@router.message(F.text == "–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç")
async def my_account(message: types.Message):
    user_id = message.from_user.id
    url = f"http://fastapi:8080/usercodes/{user_id}"
    headers = {"X-API-Key": AUTH_CODE}

    try:
        async with aiohttp.ClientSession() as session:
            async with session.get(url, headers=headers) as response:
                if response.status == 200:
                    response_data = await response.json()
                    if response_data:
                        for i, user in enumerate(response_data, start=1):
                            remaining_seconds = user['time_end'] - int(time.time()) 
                            if remaining_seconds <= 0 :
                                await message.answer(f"–í—Ä–µ–º—è –¥–µ–π—Å—Ç–≤–∏—è –∫–æ–Ω—Ñ–∏–≥–∞ –∏—Å—Ç–µ–∫–ª–æ \n")
                            else: 
                                exptime = remaining_seconds / 3600
                                await message.answer(f"–ö–æ–Ω—Ñ–∏–≥ {i}. –û—Å—Ç–∞–≤—à–µ–µ—Å—è –≤—Ä–µ–º—è –¥–µ–π—Å—Ç–≤–∏—è: {exptime:.2f} —á–∞—Å–æ–≤ \n")
                            
                            # –°–æ–∑–¥–∞–µ–º VLESS –∫–æ–Ω—Ñ–∏–≥
                            vless_config = (
                                f"vless://{user['user_code']}@77.110.108.194:443?"
                                "security=reality&encryption=none&pbk=bMhOMGZho4aXhfoxyu7D9ZjVnM-02bR9dKBfIMMTVlc&"
                                "headerType=none&fp=chrome&type=tcp&flow=xtls-rprx-vision&sni=google.com&sid=094e39c18a0e44#godnetvpn"
                            )
                            
                            # –°–æ–∑–¥–∞–µ–º URL –¥–ª—è –≤–µ–±-—Å—Ç—Ä–∞–Ω–∏—Ü—ã –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥–∞
                            import base64
                            encoded_config = base64.b64encode(vless_config.encode()).decode()
                            remaining_seconds = user['time_end'] - int(time.time())
                            web_url = f"http://127.0.0.1:8080/add-config?config={encoded_config}&expiry={remaining_seconds}"
                            
                            # –°–æ–∑–¥–∞–µ–º inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π –¥–ª—è V2rayTun
                            inline_kb = InlineKeyboardMarkup(inline_keyboard=[
                                [InlineKeyboardButton(text="üì± –î–æ–±–∞–≤–∏—Ç—å –≤ V2rayTun", url=web_url)],
                                [InlineKeyboardButton(text="üìã –ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å –∫–æ–Ω—Ñ–∏–≥", callback_data=f"copy_config_{i}")]
                            ])
                            
                            # –°–æ–∑–¥–∞–µ–º –∫—Ä–∞—Å–∏–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤–º–µ—Å—Ç–æ –æ–≥—Ä–æ–º–Ω–æ–≥–æ –∫–æ–Ω—Ñ–∏–≥–∞
                            remaining_hours = remaining_seconds // 3600
                            remaining_days = remaining_hours // 24
                            
                            if remaining_days > 0:
                                time_text = f"{remaining_days} –¥–Ω. {remaining_hours % 24} —á."
                            else:
                                time_text = f"{remaining_hours} —á."
                            
                            config_message = (
                                f"üîê <b>–ö–æ–Ω—Ñ–∏–≥ #{i}</b>\n"
                                f"‚è∞ –î–µ–π—Å—Ç–≤—É–µ—Ç: <b>{time_text}</b>\n"
                                f"üåê –°–µ—Ä–≤–µ—Ä: <code>–§–∏–Ω–ª—è–Ω–¥–∏—è üá´üáÆ</code>\n\n"
                                f"üí° <i>–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ</i>"
                            )
                            
                            await message.answer(
                                config_message,
                                parse_mode="HTML",
                                reply_markup=inline_kb
                            )
                        
                        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—Å–Ω–æ–≤–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –ø–æ—Å–ª–µ –≤—Å–µ—Ö –∫–æ–Ω—Ñ–∏–≥–æ–≤
                        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=keyboard.create_keyboard())
                    else:
                        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –∫–æ–Ω—Ñ–∏–≥–æ–≤", reply_markup=keyboard.create_keyboard())
                else:
                    error_message = await response.json()
                    await message.answer(f"{error_message.get('detail', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}", reply_markup=keyboard.create_keyboard())
    except aiohttp.ClientError as e:
        await message.answer(f"–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: {str(e)}", reply_markup=keyboard.create_keyboard())
    except Exception as e:
        await message.answer(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}", reply_markup=keyboard.create_keyboard())

@router.callback_query(F.data.startswith("copy_config_"))
async def copy_config_callback(callback: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥–∞"""
    await callback.answer("–ö–æ–Ω—Ñ–∏–≥ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω! –í—Å—Ç–∞–≤—å—Ç–µ –µ–≥–æ –≤ V2rayTun –≤—Ä—É—á–Ω—É—é.", show_alert=True)