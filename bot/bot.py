import logging
from aiogram import Bot, Dispatcher, types
from aiogram.types import InlineKeyboardMarkup, ReplyKeyboardMarkup, InlineKeyboardButton, KeyboardButton, LabeledPrice, PreCheckoutQuery, Message, CallbackQuery
from aiogram.filters import Command, StateFilter
from aiogram.fsm.context import FSMContext
from aiogram import F
from aiogram.fsm.state import State, StatesGroup
from aiogram import Router
from datetime import datetime, timedelta
import aiosqlite
import asyncio
import requests
import json
import aiohttp
import time
from yookassa import Configuration, Payment
import uuid
from email_validator import validate_email, EmailNotValidError
import os

Configuration.account_id = os.getenv('ACCOUNT_ID')
Configuration.secret_key = str(os.getenv('SECRET_KEY'))
API_TOKEN = str(os.getenv('TELEGRAM_TOKEN'))
# urlupdate = "http://77.110.108.194:8080/giveconfig"
urlupdate = "http://fastapi:8080/giveconfig"

logging.basicConfig(level=logging.INFO)

bot = Bot(token=API_TOKEN)
dp = Dispatcher()

class Form(StatesGroup):
    waiting_for_email = State()

async def init_db():
    async with aiosqlite.connect("emails.db") as conn:
        cursor = await conn.cursor()
        await cursor.execute('''
            CREATE TABLE IF NOT EXISTS email (
                tg_id TEXT UNIQUE,
                email TEXT
            )
        ''')
        await conn.commit()

async def get_email(tg_id):
    """–ü–æ–ª—É—á–∏—Ç—å email –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ –µ–≥–æ tg_id –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö."""
    async with aiosqlite.connect("emails.db") as conn:
        async with conn.execute('SELECT email FROM email WHERE tg_id = ?', (tg_id,)) as cursor:
            result = await cursor.fetchone()
            return result[0] if result else None

async def insert_email(tg_id, email):
    """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å email –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö."""
    try:
        async with aiosqlite.connect("emails.db") as conn:
            async with conn.execute('INSERT INTO email (tg_id, email) VALUES (?, ?)', (tg_id, email)):
                await conn.commit()
    except aiosqlite.IntegrityError:
        print(f"–û—à–∏–±–∫–∞: tg_id '{tg_id}' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.")
    except aiosqlite.Error as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—Å—Ç–∞–≤–∫–µ –¥–∞–Ω–Ω—ã—Ö: {e}")

def create_keyboard():
    kb_list = [
        [KeyboardButton(text="–í—ã–±—Ä–∞—Ç—å —Ç–∞—Ä–∏—Ñ"), KeyboardButton(text="–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç")],
        [KeyboardButton(text="–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è‚öôÔ∏è")]
    ]
    keyboard = ReplyKeyboardMarkup(keyboard=kb_list, resize_keyboard=True, one_time_keyboard=True)
    return keyboard

def create_tariff_keyboard():
    kb_list = [
        [InlineKeyboardButton(text="–ö—É–ø–∏—Ç—å –Ω–∞ 1 –º–µ—Å—è—Ü - 99 –†—É–±–ª–µ–πüí∞", callback_data="buy_1")],
        [InlineKeyboardButton(text="–ö—É–ø–∏—Ç—å –Ω–∞ 3 –º–µ—Å—è—Ü–∞ - 199 –†—É–±–ª–µ–πüí∞", callback_data="buy_2")],
        [InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="back")]

    ]
    keyboard = InlineKeyboardMarkup(inline_keyboard=kb_list)
    return keyboard

def create_settings_keyboard():
    kb_list = [
        [KeyboardButton(text="–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –Ω–∞ –¢–µ–ª–µ—Ñ–æ–Ω"), KeyboardButton(text="–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –Ω–∞ PC")]
    ]
    keyboard = ReplyKeyboardMarkup(keyboard=kb_list, resize_keyboard=True, one_time_keyboard=True)
    return keyboard

@dp.message(Command('start'))
async def start_command(message: types.Message):
    await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=create_keyboard())

@dp.message(F.text == "–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è‚öôÔ∏è")
async def guide_command(message: types.Message):
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± —É—Å—Ç–∞–Ω–æ–≤–∫–∏:", reply_markup=create_settings_keyboard())

@dp.message(F.text == "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –Ω–∞ –¢–µ–ª–µ—Ñ–æ–Ω")
async def tel_guide_command(message: types.Message):
    await message.answer(
        "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –Ω–∞ [Android](https://play.google.com/store/apps/details?id=com.v2raytun.android) –∏ [iOS](https://apps.apple.com/ru/app/v2raytun/id6476628951) –∏–¥–µ–Ω—Ç–∏—á–Ω–∞. –ß—Ç–æ–±—ã –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ v2RayTun. –°–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å –∫–æ–Ω—Ñ–∏–≥ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∏–∑ –ª–∏—á–Ω–æ–≥–æ –∫–∞–±–∏–Ω–µ—Ç–∞ –≤ –±–æ—Ç–µ. –í—Å—Ç–∞–≤–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥ –∏–∑ –±—É—Ñ–µ—Ä–∞ –æ–±–º–µ–Ω–∞ –≤ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∏ –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è.",
        reply_markup=create_keyboard(),
        parse_mode='Markdown',
        disable_web_page_preview=True
    )

@dp.message(F.text == "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –Ω–∞ PC")
async def pc_guide_command(message: types.Message):
    await message.answer("–ß—Ç–æ–±—ã –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ v2RayN [IOS](https://apps.apple.com/ru/app/v2raytun/id6476628951), [Windows, Linux](https://github.com/2dust/v2rayN/releases/download/7.13.2/v2rayN-windows-64.zip). –ü—Ä–æ—Å—Ç–∞—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –¥–ª—è –≤—Å–µ—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤ [Amneziavpn](https://amnezia.app/ru/downloads). –°–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å –∫–æ–Ω—Ñ–∏–≥ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∏–∑ –ª–∏—á–Ω–æ–≥–æ –∫–∞–±–∏–Ω–µ—Ç–∞ –≤ –±–æ—Ç–µ. –í—Å—Ç–∞–≤–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥ –∏–∑ –±—É—Ñ–µ—Ä–∞ –æ–±–º–µ–Ω–∞ –≤ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∏ –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è", 
    reply_markup=create_keyboard(),
    parse_mode='Markdown',
    disable_web_page_preview=True
    )
    
@dp.message(F.text == "–í—ã–±—Ä–∞—Ç—å —Ç–∞—Ä–∏—Ñ")
async def choose_tariff(message: types.Message):
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∞—Ä–∏—Ñ:", reply_markup=create_tariff_keyboard())

@dp.message(Form.waiting_for_email)
async def handle_email_input(message: Message, state: FSMContext) -> None:
    tg_id = message.from_user.id
    email_input = message.text
    try:
        valid = validate_email(email_input) 
        email = valid.email
        await insert_email(tg_id, email)  
        await message.reply("Email —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω!", reply_markup=create_tariff_keyboard())
    except EmailNotValidError as e:
        await message.reply(f"–û—à–∏–±–∫–∞: {str(e)}. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email, —ç—Ç–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —á–µ–∫–∞ –Ω–∞ –≤–∞—à—É –ø–æ—á—Ç—É.")
        return
    await state.set_state(None) 

async def check_payment_status(payment_id, bot, user_id, description, message_id):
    i = 0
    while i < 46:
        await asyncio.sleep(10) 
        try: 
            data = {}
            if description == "1m":
                data["time"] = 1
            elif description == "3m":
                data["time"] = 3
            data["id"] = str(user_id)

            payment = Payment.find_one(str(payment_id))
        
            if payment.status == "succeeded" and payment.paid:
                await bot.send_message(
                    chat_id=user_id,
                    text="–£—Å–ø–µ—à–Ω–æ! –í–∞—à –ø–ª–∞—Ç–µ–∂ –±—ã–ª –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω."
                )
                data["auth"] = "+7999999999999999999"
                async with aiohttp.ClientSession() as session:
                    try:
                        async with session.post(urlupdate, json=data) as response:
                            if response.status == 200:
                                await bot.send_message(user_id, "–ö–æ–Ω—Ñ–∏–≥ –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –º–æ–∂–Ω–æ –Ω–∞–π—Ç–∏ –≤ –ª–∏—á–Ω–æ–º –∫–∞–±–∏–Ω–µ—Ç–µ.")
                            elif response.status == 409:
                                await bot.send_message(user_id, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–æ–Ω—Ñ–∏–≥–∞. –°–≤–æ–±–æ–¥–Ω—ã—Ö –∫–æ–Ω—Ñ–∏–≥–æ–≤ –Ω–µ—Ç. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.")
                            else:
                                await bot.send_message(user_id, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–æ–Ω—Ñ–∏–≥–∞. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É. –ù–æ–º–µ—Ä –æ—à–∏–±–∫–∏ 1.")
                    except Exception as e:
                        await bot.send_message(user_id, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–æ–Ω—Ñ–∏–≥–∞. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É. –ù–æ–º–µ—Ä –æ—à–∏–±–∫–∏ 2.")
                        print(f"Exception occurred: {e}")

                await bot.delete_message(chat_id=user_id, message_id=message_id)
                break
                
            elif payment.status == "canceled":
                await bot.send_message(
                    chat_id=user_id,
                    text="–ü–ª–∞—Ç–µ–∂ –Ω–µ –±—ã–ª –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."
                )
                await bot.delete_message(chat_id=user_id, message_id=message_id)

            elif payment.status == "pending":
                pass
                # await bot.send_message(
                #     chat_id=user_id,
                #     text="–û–∂–∏–¥–∞–Ω–∏–µ –æ–ø–ª–∞—Ç—ã."
                # )
        except Exception as e:
            print(e)
        i+=1

@dp.callback_query()
async def process_callback_query(callback_query: CallbackQuery, state: FSMContext, bot: Bot) -> None:
    await init_db()
    logging.info(f"Callback query received: {callback_query.data}")
    tg_id = callback_query.from_user.id     

    if callback_query.data == "back":
        await bot.delete_message(chat_id=tg_id, message_id=callback_query.message.message_id)
        await bot.send_message(
            chat_id=callback_query.from_user.id,
            text="–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é:",
            reply_markup=create_keyboard()  
        )
        return 

    email = await get_email(tg_id)
    if email is None:
        await bot.send_message(tg_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —á–µ–∫–æ–≤ –Ω–∞ –ø–æ—á—Ç—É:")
        await state.set_state(Form.waiting_for_email)
    else:
        confirmation_url = ""
        confirmation_id = ""

        uid = uuid.uuid4()
        if callback_query.data == "buy_1":
            description = "1m"
            payment = Payment.create({
                "amount": {
                    "value": 99,
                    "currency": "RUB"
                },
                "confirmation": {
                    "type": "redirect",
                    "return_url": "https://t.me/godnet_vpnbot"
                },
                "capture": True,
                "description": description,
                "receipt": {
                    "customer": {
                        "email": email
                    },
                    "items": [
                        {
                            "description": "–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ 1 –º–µ—Å—è—Ü",
                            "quantity": 1,
                            "amount": {
                                "value": "99.00",
                                "currency": "RUB"
                            },
                            "vat_code": 1
                        }
                    ]
                }
            }, uid)

            confirmation_url = payment.confirmation.confirmation_url
            confirmation_id = payment.id

        elif callback_query.data == "buy_2":
            description = "3m"
            payment = Payment.create({
                "amount": {
                    "value": 199,
                    "currency": "RUB"
                },
                "confirmation": {
                    "type": "redirect",
                    "return_url": "https://t.me/godnet_vpnbot"
                },
                "capture": True,
                "description": description,
                "receipt": {
                    "customer": {
                        "email": email
                    },
                    "items": [
                        {
                            "description": "–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ 3 –º–µ—Å—è—Ü–∞",
                            "quantity": 1,
                            "amount": {
                                "value": "199.00",
                                "currency": "RUB"
                            },
                            "vat_code": 1
                        }
                    ]
                }
            }, uid)

            confirmation_url = payment.confirmation.confirmation_url
            confirmation_id = payment.id

        reply_markup = types.InlineKeyboardMarkup(
            inline_keyboard=[
                [types.InlineKeyboardButton(text="–ü–µ—Ä–µ–π—Ç–∏ –∫ –æ–ø–ª–∞—Ç–µ", url=confirmation_url)]
            ]
        )

        message = await callback_query.message.edit_text(text=f"{"–ó–∞–∫–∞–∑ –Ω–∞ –æ–ø–ª–∞—Ç—É —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω"}\n", reply_markup=reply_markup)

        await check_payment_status(confirmation_id, bot, callback_query.from_user.id, payment.description, message.message_id)

@dp.message(F.text == "–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç")
async def my_account(message: types.Message):
    user_id = message.from_user.id
    url = f"http://fastapi:8080/usercodes/{user_id}"
    try:
        async with aiohttp.ClientSession() as session:
            async with session.get(url) as response:
                if response.status == 200:
                    response_data = await response.json()
                    if response_data:
                        for i, user in enumerate(response_data, start=1):
                            remaining_seconds = user['time_end'] - int(time.time()) 
                            if remaining_seconds <= 0 :
                                await message.answer(f"–í—Ä–µ–º—è –¥–µ–π—Å—Ç–≤–∏—è –∫–æ–Ω—Ñ–∏–≥–∞ –∏—Å—Ç–µ–∫–ª–æ \n")
                            else: 
                                exptime = remaining_seconds / 3600
                                await message.answer(f"–ö–æ–Ω—Ñ–∏–≥ {i}. –û—Å—Ç–∞–≤—à–µ–µ—Å—è –≤—Ä–µ–º—è –¥–µ–π—Å—Ç–≤–∏—è: {exptime:.2f} —á–∞—Å–æ–≤ \n")
                            response_message = (
                                f"vless://{user['user_code']}@77.110.108.194:443?"
                                "security=reality&encryption=none&pbk=bMhOMGZho4aXhfoxyu7D9ZjVnM-02bR9dKBfIMMTVlc&"
                                "headerType=none&fp=chrome&type=tcp&flow=xtls-rprx-vision&sni=google.com&sid=094e39c18a0e44#godnetvpn.\n"
                            )
                            await message.answer(response_message + "\n", reply_markup=create_keyboard())
                    else:
                        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –∫–æ–Ω—Ñ–∏–≥–æ–≤")
                else:
                    error_message = await response.json()
                    await message.answer(f"–û—à–∏–±–∫–∞: {error_message.get('detail', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}", reply_markup=create_keyboard())
    except aiohttp.ClientError as e:
        await message.answer(f"–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: {str(e)}", reply_markup=create_keyboard())
    except Exception as e:
        await message.answer(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}", reply_markup=create_keyboard())

async def main():
    await init_db()
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())