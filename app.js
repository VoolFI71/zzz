const puppeteer = require('puppeteer');
const express = require('express');
const cors = require('cors');
const sqlite3 = require('sqlite3').verbose();

const app = express();
app.use(cors());
app.use(express.json());

const db = new sqlite3.Database('./rates.db');

function getRandomUserAgent() {
  const userAgents = [
    'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36',
    'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/14.0.3 Safari/605.1.15',
    'Mozilla/5.0 (Linux; Android 10; Pixel 3 XL) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.114 Mobile Safari/537.36',
    // –î–æ–±–∞–≤—å—Ç–µ –±–æ–ª—å—à–µ User-Agent —Å—Ç—Ä–æ–∫ –ø–æ –∂–µ–ª–∞–Ω–∏—é
  ];
  return userAgents[Math.floor(Math.random() * userAgents.length)];
}

db.serialize(() => {
  db.run(`
    CREATE TABLE IF NOT EXISTS rates (
      id INTEGER PRIMARY KEY AUTOINCREMENT,
      rate REAL NOT NULL,
      source TEXT NOT NULL,
      timestamp DATETIME DEFAULT CURRENT_TIMESTAMP
    )
  `);
});

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Å—Ç–∞—Ä—ã—Ö –∑–∞–ø–∏—Å–µ–π
const cleanOldRates = () => {
  db.run(`
    DELETE FROM rates 
    WHERE id NOT IN (
      SELECT id FROM rates 
      ORDER BY timestamp DESC 
      LIMIT 5
    )
  `, (err) => {
    if (err) console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ä—ã—Ö –∫—É—Ä—Å–æ–≤:', err);
  });
};

const fetchData = async () => {
  let browser = null;
  
  try {
    console.log('üöÄ –ó–∞–ø—É—Å–∫ –±—Ä–∞—É–∑–µ—Ä–∞...');
    const isLinux = process.platform === 'linux';
    const executablePath = isLinux ? '/usr/bin/google-chrome' : 'C:\\Program Files\\Google\\Chrome\\Application\\chrome.exe';

    browser = await puppeteer.launch({ 
      executablePath: executablePath,
      headless: true,
      args: ['--no-sandbox', '--disable-setuid-sandbox']
    });
    
    const page = await browser.newPage();
    await page.setDefaultNavigationTimeout(61001);

    const randomUserAgent = getRandomUserAgent();
    await page.setUserAgent(randomUserAgent);

    console.log('üìÑ –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ rapira.org...');
    await page.goto('https://rapira.org/exchange/USDT_RUB', { 
      waitUntil: 'networkidle2',
      timeout: 61001
    });

    console.log('‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏ –∫—É—Ä—Å–∞...');
    await page.waitForSelector('span.me-2', { timeout: 10000 });

    console.log('üîç –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∫—É—Ä—Å–∞...');
    const rateText = await page.evaluate(() => {
      const span = document.querySelector('span.me-2');
      return span ? span.textContent.trim() : null;
    });

    if (!rateText) {
      throw new Error('–≠–ª–µ–º–µ–Ω—Ç —Å –∫—É—Ä—Å–æ–º –Ω–µ –Ω–∞–π–¥–µ–Ω');
    }

    const rate = parseFloat(rateText.replace(',', '.')); 
    if (isNaN(rate)) {
      throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ');
    }

    await new Promise((resolve, reject) => {
      db.run(
        'INSERT INTO rates (rate, source) VALUES (?, ?)',
        [rate, 'Rapira'],
        function(err) {
          if (err) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –≤ –ë–î:', err);
            reject(err);
          } else {
            console.log('üíæ –ö—É—Ä—Å —Å–æ—Ö—Ä–∞–Ω—ë–Ω –≤ –ë–î');
            cleanOldRates();
            resolve();
          }
        }
      );
    });

    return rate;
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error.message);
    return null;
  } finally {
    if (browser) {
      await browser.close().catch(e => console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ –±—Ä–∞—É–∑–µ—Ä–∞:', e));
    }
  }
};


// API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∫—É—Ä—Å–∞
app.get('/api/rate', (req, res) => {
  db.get(
    'SELECT rate, timestamp FROM rates ORDER BY timestamp DESC LIMIT 1',
    (err, row) => {
      if (err || !row) {
        return res.status(503).json({
          success: false,
          error: '–ö—É—Ä—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω',
          rate: 92.5,
          source: 'Fallback'
        });
      }
      res.json({
        success: true,
        rate: row.rate,
        lastUpdate: row.timestamp,
        source: 'Rapira (DB)'
      });
    }
  );
});

// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
const PORT = process.env.PORT || 3001;
app.listen(PORT, () => {
  console.log(`üåê –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);
  
  // –ü–µ—Ä–≤–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ –∫—É—Ä—Å–∞
  fetchData()
    .then(rate => {
      if (rate) {
        console.log(`üîÑ –ü–µ—Ä–≤—ã–π –∫—É—Ä—Å –ø–æ–ª—É—á–µ–Ω: ${rate}`);
      } else {
        console.log('üîÑ –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø–µ—Ä–≤—ã–π –∫—É—Ä—Å');
      }
    });
  
  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞–∂–¥—ã–µ 60 —Å–µ–∫—É–Ω–¥
  setInterval(fetchData, 60000);
});